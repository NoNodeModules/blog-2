{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/yun/source/Yun.png","path":"Yun.png","modified":0,"renderable":1},{"_id":"themes/yun/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/yun/source/honoka.png","path":"honoka.png","modified":0,"renderable":1},{"_id":"themes/yun/source/yun.ico","path":"yun.ico","modified":0,"renderable":1},{"_id":"themes/yun/source/css/custom.css","path":"css/custom.css","modified":0,"renderable":1},{"_id":"themes/yun/source/css/hexo-theme-yun.styl","path":"css/hexo-theme-yun.styl","modified":0,"renderable":1},{"_id":"themes/yun/source/js/gallery-decrypt.js","path":"js/gallery-decrypt.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/hexo-theme-yun.js","path":"js/hexo-theme-yun.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/say.js","path":"js/say.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/comments/disqus.js","path":"js/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/search/algolia-search.js","path":"js/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/ui/banner.js","path":"js/ui/banner.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/ui/fireworks.js","path":"js/ui/fireworks.js","modified":0,"renderable":1},{"_id":"themes/yun/source/js/ui/mode.js","path":"js/ui/mode.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/about/index.md","hash":"0c968857a154e998857041dbec0d40dc61f0c179","modified":1607002913029},{"_id":"source/404.md","hash":"91bcda7565115530dd1de4c7b6d113ff15aa62e7","modified":1607008157808},{"_id":"source/_posts/2019新北市國際資訊奧林匹亞研習營初選資格選拔.md","hash":"61aed6238c5f25daf0ab0b4ced2f92981791b916","modified":1607007159324},{"_id":"source/about/site.md","hash":"a45f442bc2ce1f3e0b09ebc62f01dd2d2634a84b","modified":1607009493458},{"_id":"source/_posts/TIOJ 1152 銀河帝國旅行社.md","hash":"8cc8cd7dfaed8f323d9577202d8262ec1c19e509","modified":1607007029410},{"_id":"source/_posts/2020 TOPC心得.md","hash":"98b98cee2c22b951dd746ceab79b611c8a1793cc","modified":1607007029410},{"_id":"source/_posts/TIOJ 1312 家族.md","hash":"e91c7be209aaf82c608ce5b1daadea76781dac5c","modified":1607007029410},{"_id":"source/_posts/[LifeCP_生活競程] For自己競程的解題紀錄.md","hash":"3073d49a712e38d027414f6b683bdac4f3e7e6da","modified":1607611502583},{"_id":"source/_posts/2020 NCPC初賽心得.md","hash":"9abeba4209a130a668f1e9dca1200833ac780d2a","modified":1607007029410},{"_id":"source/_posts/[NTHU]10322 PC 費式數列與矩陣快速冪.md","hash":"625a570cdd3dc7c487a3193725c412f95cb85a51","modified":1607007029410},{"_id":"source/_posts/[SOJ] 41 大顆壽司.md","hash":"7540b5d510178cb8f1316486e372a7d5d32801b2","modified":1607007029410},{"_id":"source/_posts/[SOJ] 43 Lacy 路網.md","hash":"524340272aa36e85d1aceeb1152483b3372ca4eb","modified":1607007029410},{"_id":"source/_posts/[ICPC模擬賽] 2015 ICPC Singapore Clone.md","hash":"7e668fecde1e2be0470528782a5ac7993243ffde","modified":1607011614222},{"_id":"source/_posts/[Sprout OJ] No.80 RMQ練習.md","hash":"749b3d34e67a8257bb5ab32e235a1b5deae5426a","modified":1607007029410},{"_id":"source/_posts/利用Hexo架出第一個Blog.md","hash":"1c97f9e0eb7d6da27d676bfac3292d6c0e44114f","modified":1607007029410},{"_id":"source/_posts/[TIOJ] 1410. Comiket.md","hash":"d3d0bab71c8fabc515ce0c3c03d070747e616f85","modified":1607007029410},{"_id":"source/_posts/大學面試總心得.md","hash":"12742fbec753ad3010bdf26257cda26d438ef754","modified":1607007029410},{"_id":"source/_posts/程設(一) 作業1 有趣有用的小東西,心得.md","hash":"96e1ff34f31161d44c350c2023ddc2e2c67d0f1e","modified":1607007029410},{"_id":"source/search/index.md","hash":"b9edefd48ed2483b77ba8c21bcb426e304f34ca7","modified":1607013343121},{"_id":"source/links/index.md","hash":"65756e553f0ec05ff110d94570ff3426f3c0cebd","modified":1607056924769},{"_id":"source/tags/index.md","hash":"30936666ef6753c11e2f05bc4acfc4a113f47a29","modified":1607004110955},{"_id":"source/categories/index.md","hash":"51226c7247b6c2d62cf082c75a993c5ea01ac75d","modified":1607003352810},{"_id":"themes/yun/scripts/injector/index.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1606978646641},{"_id":"themes/yun/.gitignore","hash":"b9e34fe2544e88baff4129db394ce0cd4a29893e","modified":1606978646637},{"_id":"themes/yun/LICENSE","hash":"a24ce67b002ff38718c549129d23d177bf951dbf","modified":1606978646637},{"_id":"themes/yun/package.json","hash":"74dd88cf0aefc2b63ef22516d92aba3d747a15bb","modified":1606978646641},{"_id":"themes/yun/.github/FUNDING.yml","hash":"41b293d76a307f29e81d931edb1c6d05fed526fd","modified":1606978646637},{"_id":"themes/yun/_vendors.yml","hash":"756311cc429dbd66a81408a29098ca6d57cf96b8","modified":1606978646637},{"_id":"themes/yun/data/_comments.yml","hash":"cd12614a270607b1dc57aa0d6ecfc6905b0323b4","modified":1606999143105},{"_id":"themes/yun/docs/README.md","hash":"1509cc59c0dd1ef3314ca3078425a87f20495a63","modified":1606978646637},{"_id":"themes/yun/_config.yml","hash":"24ddb68a0643a1f08f06942a1b39dafca67a77b5","modified":1608147812351},{"_id":"themes/yun/README.md","hash":"cbd1fbe7ebc46b8665c82d2ddb170cfa055004db","modified":1606978646637},{"_id":"themes/yun/languages/default.yml","hash":"5edebbb1ee31f4b6a06c8b0cd4da07d4759c17ba","modified":1606981408210},{"_id":"themes/yun/docs/about.md","hash":"18d60a62db0653f37c54b96c4ab6ad947c4b368e","modified":1606978646637},{"_id":"themes/yun/docs/demo.md","hash":"0a8132188391c5f361fb28d14f4fba604073b74f","modified":1606978646637},{"_id":"themes/yun/languages/en.yml","hash":"a6304e0aff9425d3f0aeb94acc4b78c9434fc177","modified":1606978646637},{"_id":"themes/yun/languages/zh-CN.yml","hash":"7335025328bba8cb6aaca1c6aa5aa56c08c3602c","modified":1606978646637},{"_id":"themes/yun/languages/ja.yml","hash":"ab9ae6ae6ed8850d33a2301ec2a19262bae0fbf4","modified":1606978646637},{"_id":"themes/yun/languages/zh-TW.yml","hash":"cda26b7d7ad37fc066deecfe6553ab21d0a30540","modified":1606981408210},{"_id":"themes/yun/layout/archive.pug","hash":"067ac814d892dc6c0efe9c03c45abd712648e37e","modified":1606978646641},{"_id":"themes/yun/layout/404.pug","hash":"39719b1b4300ed7d12b062eec4186bda5dede7c2","modified":1606978646637},{"_id":"themes/yun/layout/category.pug","hash":"6d0a910ac2716c1acae5e7ab0c2a56e4d5438281","modified":1606978646641},{"_id":"themes/yun/layout/gallery.pug","hash":"a79bed685d6d8adfa6be776adf078f880d85d9b7","modified":1606978646641},{"_id":"themes/yun/layout/girls.pug","hash":"9fce3f9e013e0118161f1d19ae2f06065e5c133f","modified":1606978646641},{"_id":"themes/yun/layout/index.pug","hash":"7322ea6d9cfb29b1bb13a31bb5f98abcf5d9f409","modified":1606978646641},{"_id":"themes/yun/layout/links.pug","hash":"354d2f6822e748b38dd67876cce32d3d8e9a85da","modified":1606978646641},{"_id":"themes/yun/layout/page.pug","hash":"756be355b95237d539c1aa84bc7bfcfee033c274","modified":1606978646641},{"_id":"themes/yun/layout/tag.pug","hash":"936517e7783217eac36e55f027ff383f1cd5c3da","modified":1606978646641},{"_id":"themes/yun/layout/slide.pug","hash":"9582b6053d979dc78154410dc5bf47941b67c8e7","modified":1606978646641},{"_id":"themes/yun/layout/post.pug","hash":"0ce118c7033dc07357a771a38d1cc93b8f73edad","modified":1606978646641},{"_id":"themes/yun/source/Yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1606978646641},{"_id":"themes/yun/source/yun.ico","hash":"5d63418cd650d1881d4b6507f35b9f9df766020e","modified":1606978646641},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/feature_request.md","hash":"62827149319963e12671b8522850423eceea2eb0","modified":1606978646637},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/bug_report.md","hash":"fc6cae3cfcc963b0f9cfb91f3a703362c2ecd945","modified":1606978646637},{"_id":"themes/yun/.github/ISSUE_TEMPLATE/usage_problem.md","hash":"6127e821a2f673c1b1604ccf1e8d9c062389eb0c","modified":1606978646637},{"_id":"themes/yun/.github/workflows/docs.yml","hash":"529956828792a03d8b882edd89fedb5613beaa84","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/config.js","hash":"a90ba88a5e5bed11c44a6b2bee667a939a257056","modified":1606978646637},{"_id":"themes/yun/docs/en/README.md","hash":"4b7a325b5f0d97d6bc4af65cf86a576dedf45dde","modified":1606978646637},{"_id":"themes/yun/docs/en/about.md","hash":"19f69d579ba7770c732306c6c66642f4d170220d","modified":1606978646637},{"_id":"themes/yun/docs/guide/additional-package-support.md","hash":"f4912fa8ad05482eaf5e2c7d927fa34f483620b2","modified":1606978646637},{"_id":"themes/yun/docs/guide/README.md","hash":"8bf2d78487a143c7776f0dd582959ab5e78318bf","modified":1606978646637},{"_id":"themes/yun/docs/guide/faq.md","hash":"6875e60626526960b7eb1b2f02f952b8088b3f0b","modified":1606978646637},{"_id":"themes/yun/docs/guide/icon.md","hash":"05fe25b14d29dcd9dc6bfad27f2e40c68c1a9929","modified":1606978646637},{"_id":"themes/yun/docs/guide/migrate.md","hash":"a865536d769d82500bfc58ab2ace3641880c5ba9","modified":1606978646637},{"_id":"themes/yun/docs/guide/config.md","hash":"2aaaa355aa40876f953217ca6285571ccca2fff4","modified":1606978646637},{"_id":"themes/yun/docs/guide/page.md","hash":"95968d7e0fe58827ddbcf2b64e583af1f8d9814a","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/icon.pug","hash":"18ee2c33b4e6ef71c31d7955f9a20789fe6aa9e4","modified":1606978646637},{"_id":"themes/yun/docs/guide/third-party-support.md","hash":"8b2619a91a467a7cd2253b087db592ca1b74f28f","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/index.pug","hash":"3969072910506b21cb09ea2a69f718110c1bb23c","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/page-header.pug","hash":"b72bf2a802d48ca05ff9ffc6dfe92c9701f1cc87","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/post-categories.pug","hash":"c6961fcc933e039bb7c9dd6631f4818d83fcb52b","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/post-collapse.pug","hash":"741195a5a29ecb5863b1fd0c3b203d960aae05c1","modified":1606978646637},{"_id":"themes/yun/layout/_partial/background.pug","hash":"53b9607f2c68d852d2c082a6588f66af0e681b68","modified":1606978646637},{"_id":"themes/yun/layout/_mixin/post-tags.pug","hash":"ae8f218519d59f31028e1e0c161bdcaa7a8c9816","modified":1606978646637},{"_id":"themes/yun/layout/_partial/head.pug","hash":"323c18e0d339761d2bd7416d36bbf31d7a5a054c","modified":1606978646641},{"_id":"themes/yun/layout/_partial/banner.pug","hash":"33ed4a88492e1f66bd7db40ff23b2f3487a88cb7","modified":1606978646641},{"_id":"themes/yun/layout/_partial/footer.pug","hash":"377bcbb76b2d2e89d4b830cc614485aae5d0ef87","modified":1606978646641},{"_id":"themes/yun/layout/_partial/layout.pug","hash":"75e8a2c375482797b850638ae2d9eeb2402d378b","modified":1606978646641},{"_id":"themes/yun/layout/_partial/pagination.pug","hash":"b55b6a99b105447b4a6c982fa258680a2a9a34a9","modified":1606978646641},{"_id":"themes/yun/layout/_partial/sidebar.pug","hash":"be71d25cedbaab357790f8e657a69a4cee83b3d1","modified":1606978646641},{"_id":"themes/yun/layout/_partial/recent-posts.pug","hash":"e0d429fbb9bdf4c3e6110faae95e44f7b37def53","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/aplayer.pug","hash":"642445a227e8b702be443958b49901d7c884555f","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/google-tagmanager.pug","hash":"01724665b723aaa1b5fc3a63e3b538970efcd13c","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/index.pug","hash":"59cb2c9fce6213536778f3f51126add5fd53d230","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/pjax.pug","hash":"b5c0c9cf26933621839ab90a4e754e6406341d09","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/cdn.pug","hash":"0ce00434e64a9fa608a844d362ee3e3745603e62","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/lightgallery.pug","hash":"4b059acfaf5068c5b742d8cc5b71d4f8073dd532","modified":1606978646641},{"_id":"themes/yun/layout/_widget/back-to-top.pug","hash":"ace7af6f69735441125517aeb9a5257ab7cfaf2b","modified":1606978646641},{"_id":"themes/yun/layout/_widget/cloud.pug","hash":"8903d1311bf5f68dcc23e520cb4f1e4385aff70d","modified":1606978646641},{"_id":"themes/yun/layout/_widget/aplayer.pug","hash":"1167bc416316139b224057fe54244ff88158b1be","modified":1606978646641},{"_id":"themes/yun/layout/_widget/index.pug","hash":"2888bcec128ce5b72236aa794103089b64240689","modified":1606978646641},{"_id":"themes/yun/layout/_widget/mourn.pug","hash":"3c7741cb35d253a73e2a9ad326ed9e638035102c","modified":1606978646641},{"_id":"themes/yun/layout/_widget/notice.pug","hash":"780a10dbf308022790c58a4d2117dc2f48581531","modified":1606978646641},{"_id":"themes/yun/layout/_widget/say.pug","hash":"fbb919ae36a9b0ce349ed4b305d19d89231c3dd9","modified":1606978646641},{"_id":"themes/yun/scripts/events/data.js","hash":"c49f863b804fa408b8b21e78bef64ac56da65ff0","modified":1606978646641},{"_id":"themes/yun/scripts/events/config.js","hash":"c0ed1dfaf386762512e9a50d82d2478ba39be260","modified":1606978646641},{"_id":"themes/yun/scripts/events/index.js","hash":"7bd5bad3d77847a757582edd851a61b43bea2ac2","modified":1606978646641},{"_id":"themes/yun/scripts/events/utils.js","hash":"05f2d96bf5321cccadc3ab768a3827a337a86233","modified":1606978646641},{"_id":"themes/yun/scripts/filters/index.js","hash":"79d58b61e227b63bdd0dd894e6cb7fb5830cc120","modified":1606978646641},{"_id":"themes/yun/scripts/helpers/engine.js","hash":"ba145729643bbc4a246599ae5cfd1c2b9bd7704e","modified":1606978646641},{"_id":"themes/yun/scripts/helpers/encrypt.js","hash":"6dc249c5845d6440e26772a2efd07713c73df9d0","modified":1606978646641},{"_id":"themes/yun/scripts/helpers/yun-config.js","hash":"825960324d8bf5b97be5727df8ad72aee88a4cf8","modified":1606978646641},{"_id":"themes/yun/scripts/helpers/index.js","hash":"0284592bf6e585ec6133621699c486ede1b39a70","modified":1606978646641},{"_id":"themes/yun/source/css/hexo-theme-yun.styl","hash":"90842c9d64e111cd6d7037870c1eafb195e78882","modified":1606978646641},{"_id":"themes/yun/source/js/gallery-decrypt.js","hash":"a3c81112e1957e1df33e795b3c9be194ee7a7648","modified":1606978646641},{"_id":"themes/yun/source/js/hexo-theme-yun.js","hash":"e8639a10f77ed68d289c7a99750e8f53f9ebb600","modified":1606978646641},{"_id":"themes/yun/source/js/pjax.js","hash":"ff364e88fdd44cc98a3e4400f36d71eb06f5719e","modified":1606978646641},{"_id":"themes/yun/source/favicon.png","hash":"18b0856d5dcc80a63704d81cf0003c0414da7ca3","modified":1602140638320},{"_id":"themes/yun/source/js/sidebar.js","hash":"f0edb5504c4f472dcab1c574d552fdcab58f76d4","modified":1606978646641},{"_id":"themes/yun/source/js/utils.js","hash":"655ce9996ae4334f58cecfafc9425e836ce26823","modified":1606978646641},{"_id":"themes/yun/docs/.vuepress/assets/icons.json","hash":"77b1354831ece19c786d5d3c4ffe5fe8ae08ab94","modified":1607013343121},{"_id":"themes/yun/docs/.vuepress/components/DisplayIcon.vue","hash":"23336545106deecca47fe0e475cb25350a6e551a","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/public/logo.gif","hash":"a2e7143f1f890f58a3c06b8c0acd7a7a3225022f","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/public/manifest.json","hash":"471057e459e6aeb525e2dc09922e4182ab89683c","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/public/CNAME","hash":"c7ffe7d5488a88dfa38ef3780292c22088d5e8ce","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/public/yun.svg","hash":"aa027a0a9e7ba96c906b9fd2d9cd3f8018ff2e2d","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/styles/index.styl","hash":"d9430bfc26fd335984c3dfd9c2acee73bdc7eecf","modified":1606978646637},{"_id":"themes/yun/docs/.vuepress/styles/palette.styl","hash":"25a57ac820b471bc91c151347a1c1d0cc62767d6","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/README.md","hash":"c1a474bd300a6fe7abece7d74c1f63e3fba61110","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/additional-package-support.md","hash":"0e49e785184e8f94fd937b8f0be65d30e97c9827","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/config.md","hash":"193ec9b47d8db629ba574939a55811177c200444","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/icon.md","hash":"107f7105b2bb90723074d66ddbfc94d0fc9e2b29","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/faq.md","hash":"f910f63649baf7f4fd2a6aadab64c34a17ac192b","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/page.md","hash":"46d4a99105f748562a517b054f7a9c0202b576ab","modified":1606978646637},{"_id":"themes/yun/docs/en/guide/third-party-support.md","hash":"f5bf3cb41c15369c016871991f696d2014cd3890","modified":1606978646637},{"_id":"themes/yun/layout/_partial/post/post-copyright.pug","hash":"a2415fb36a0dffbe57bf32cd2cfeace11cbaed6b","modified":1606978646641},{"_id":"themes/yun/layout/_partial/post/post-meta.pug","hash":"858905783067b032b3ff5637b5702f1ada31b43d","modified":1606978646641},{"_id":"themes/yun/layout/_partial/post/post-edit.pug","hash":"09d21451a8464047777dcbda09c14b1140396dd8","modified":1606978646641},{"_id":"themes/yun/layout/_partial/post/post-nav.pug","hash":"a951544cfa6127f3284e221cdf6c3e2dcb9801c9","modified":1606978646641},{"_id":"themes/yun/layout/_partial/sidebar/info.pug","hash":"57b04b7781db71b35c17ccc4f9ab8bc46c30e843","modified":1606978646641},{"_id":"themes/yun/layout/_partial/post/post-schema.pug","hash":"ec85079174da20c9f608b142e7fda2c28a9b1dac","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/adsense/google-adsense.pug","hash":"ae63305d776ebec0d88f91197b5c78cdaa401585","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/analytics/google-analytics.pug","hash":"3cb12c4ec3f5dbaeccf1a63a6aaa9e31dcaf926e","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/analytics/busuanzi.pug","hash":"d606071c4c4f1e0df9f55fa6c8e248eb2591c484","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/disqus.pug","hash":"b84ee3aa7334f38a5c96b45e41fe7dd4c4c8870f","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/disqusjs.pug","hash":"e72cbb5ce02fb65e573964e1a2b0335789198b32","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/github-issues.pug","hash":"2772d0e44da12c261e695e35f265af05f2cd75dc","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/index.pug","hash":"7e5d58f123d161c18936b93da580baba7477ec2a","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/livere.pug","hash":"b81ed4fb8a0ca32ccfb8e22c37ac48e4be1f4152","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/minivaline.pug","hash":"50400c7b29eadfc5e2dc310f032212b678e6818d","modified":1606978646641},{"_id":"themes/yun/layout/_partial/post/reward.pug","hash":"f19b6562f1df71c23dafed15f2f3c9415414e281","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/utterances.pug","hash":"712f893469f258e969806e1b55d0d2ac926761be","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/comments/valine.pug","hash":"1fc4a96068ea4f67520905593d2ad12b057f9575","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/math/index.pug","hash":"9a61d4923fad7c778f0bf2ce8c81744b126e6a1f","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/math/katex.pug","hash":"20e002f2e73338d317ec6f8e2b8be70378f47d0f","modified":1606978646641},{"_id":"themes/yun/layout/_third-party/seo/baidu-push.pug","hash":"0669b8c7e54c0a80e1f36e720e299cf0cd1182fe","modified":1606978646641},{"_id":"themes/yun/layout/_widget/search/algolia-search.pug","hash":"09a15ab356ebde0f9998fe7e39b2f154dea0543a","modified":1606978646641},{"_id":"themes/yun/layout/_widget/search/index.pug","hash":"05271074172be21c014cd862a25f5112d0b3710c","modified":1606978646641},{"_id":"themes/yun/layout/_widget/search/local-search.pug","hash":"d2ba600623043b2410f379fd7ba3cc75329ff408","modified":1606978646641},{"_id":"themes/yun/source/css/_components/card.styl","hash":"66426a03826ab37e94a1667497ce7ffa5a0898f7","modified":1606978646641},{"_id":"themes/yun/source/css/custom.css","hash":"93ab075fa94ce28d7d2a800216ccedaf8e13664a","modified":1607022140160},{"_id":"themes/yun/source/css/_components/button.styl","hash":"3315fc12b1b7659a06120b042a1a2e87a839ebe1","modified":1606978646641},{"_id":"themes/yun/source/css/_components/menu.styl","hash":"b47933a82045f165fb414d7a40135732fb7a7e73","modified":1606978646641},{"_id":"themes/yun/source/css/_components/scrollbar.styl","hash":"2d735d019b58a1e6fea297e0027c33a4a7bc1858","modified":1606978646641},{"_id":"themes/yun/source/js/say.js","hash":"3d86572961d0072372ca376173d5ff0a7c841558","modified":1606985330177},{"_id":"themes/yun/source/css/_components/ui.styl","hash":"8e48ea5247c6482afddc430ce1ec3aa276477b1a","modified":1606978646641},{"_id":"themes/yun/source/css/_extend/albums.styl","hash":"1e7c7730c89b6d81da37f6565239679b5075234b","modified":1606978646641},{"_id":"themes/yun/source/css/_global/dark.styl","hash":"0a499f151df6d4d59fff5346b5d42cd171788bdb","modified":1607030840720},{"_id":"themes/yun/source/css/_extend/girls.styl","hash":"e83c8b1219d0117bc342c40030e106b21245dddf","modified":1606978646641},{"_id":"themes/yun/source/css/_global/index.styl","hash":"217634a3d5b5d52b703f073da251e9d522c2148a","modified":1607030840720},{"_id":"themes/yun/source/css/_layout/banner.styl","hash":"c076ec7bd0f17ef289b3a198c199879e6f09055c","modified":1606978646641},{"_id":"themes/yun/source/css/_global/reset.styl","hash":"e5e66819a428fa72f07a0fef54ca7007f8ede5c7","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/grid.styl","hash":"3ab663d1bb9dd3639a7adf117e6000a93d093b9e","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/footer.styl","hash":"f8c9fdea73c42913dc11bf68f63fec2ca3b04f7a","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/main.styl","hash":"9e88ce9ee2043b72828113c06dd0fcf2ee687611","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/links.styl","hash":"6e6ee87743a1e888dce5682a1168773f6564c875","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/page.styl","hash":"52ff29d8bdc61dedb0a6515dd84cf015db67a499","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/pagination.styl","hash":"da0aa0153ffe72a1164c4acaa1df38c98b708077","modified":1606978646641},{"_id":"themes/yun/source/css/_layout/post.styl","hash":"e6723fa0b47b1fae7747f2b152d2197d40876664","modified":1606978646641},{"_id":"themes/yun/source/css/_mixins/helper.styl","hash":"09e560ae6db2bccaf39dff8882977cab2e9dec3b","modified":1606978646641},{"_id":"themes/yun/source/css/_mixins/base.styl","hash":"686b530b78271df6c1e708da72101ced5a02c46c","modified":1606978646641},{"_id":"themes/yun/source/css/_variables/_base.styl","hash":"d94e4e978e4d9cdb361a906f2f417787ed86f86a","modified":1606978646641},{"_id":"themes/yun/source/css/_variables/_colors.styl","hash":"a3c0a33658909d3acda06498e2980fd0112b78f8","modified":1607017361099},{"_id":"themes/yun/source/css/_widget/index.styl","hash":"a740126826a0ae9a1a2860fbb9c8d805d006aad6","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/comment.styl","hash":"048be48d2f236d37b4cc101c7fcd866c6ef46931","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/notice.styl","hash":"1d68860529a4fd8d3f63d2f257ed32b4e0f1167f","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/say.styl","hash":"c47dd38477c08d31e0813610263200322e8f5ebe","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/back-to-top.styl","hash":"7b5bb91b63c21a7f8d692834db41ed21c9d33ebe","modified":1607017786556},{"_id":"themes/yun/source/js/comments/disqus.js","hash":"ac324ecba1f4d6e0868f04f3fd3c42982abd6512","modified":1606978646641},{"_id":"themes/yun/source/js/search/local-search.js","hash":"46cfc1a30a297ff0d2fcef43a099b3962d8a5eff","modified":1606978646641},{"_id":"themes/yun/source/js/search/algolia-search.js","hash":"5174bf4bec0e1358e53f9ec7739270eca13846dd","modified":1606978646641},{"_id":"themes/yun/source/js/ui/banner.js","hash":"17af4d315ab6d503e01069f3b3a561ac514cf316","modified":1606982373775},{"_id":"themes/yun/source/js/ui/fireworks.js","hash":"0c595b44ac25d51a20a99cb5d5067a855fcfca84","modified":1606978646641},{"_id":"themes/yun/source/js/ui/mode.js","hash":"6587b0620e4d70b7507b3275840fd55a4f760705","modified":1607056924769},{"_id":"themes/yun/source/css/_components/post/post-card.styl","hash":"5aa250c306b77e9d4e867bf384660f53449565b8","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-codebloack.styl","hash":"c95452abd1799895dab7e9e9353a4f45509edec5","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-collapse.styl","hash":"6741c225a37e7e121d4159f129b7024402a8eeec","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-header.styl","hash":"2e674b76b47b3e6226269fe357d8b937b7a007a8","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-markdown.styl","hash":"5c47eac6fa98130ee6c107ebd9458e6b9db66b15","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-nav.styl","hash":"9d39f2ae5c151a1b0693c021d92cd25c5073be64","modified":1606978646641},{"_id":"themes/yun/source/css/_components/post/post-reward.styl","hash":"454aa79758c9be46c8d8fa226b38e7ac1834ce3b","modified":1606978646641},{"_id":"themes/yun/source/css/_components/sidebar/sidebar-nav.styl","hash":"523e765158652f86ab4f70f0138c3746782b24e5","modified":1606978646641},{"_id":"themes/yun/source/css/_components/sidebar/sidebar-toc.styl","hash":"115aaf6e36ace0e866432cfc75e480e08718ef8c","modified":1606978646641},{"_id":"themes/yun/source/css/_components/sidebar/sidebar.styl","hash":"21b2532c943e06bae70ed2a6b341b4816ce55898","modified":1606978646641},{"_id":"themes/yun/source/css/_components/sidebar/site-overview.styl","hash":"23e42f93aa236a5212450baf2151ed64176c91c2","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/search/algolia-search.styl","hash":"69916b23d54859160c4fda5ee809b8375fc56151","modified":1606978646641},{"_id":"themes/yun/source/css/_widget/search/local-search.styl","hash":"bcb8e5d593d49e370312e17eadf9f1e13aa22829","modified":1606978646641},{"_id":"themes/yun/source/css/_components/sidebar/hamburger.styl","hash":"9333d53c9ca2dd88922ae0b7eb387284af7d3f61","modified":1607017427840},{"_id":"themes/yun/source/css/_widget/search/index.styl","hash":"5e44b343cad0d5fbc6c55d8cac08019bd9f8f052","modified":1607017031588},{"_id":"themes/yun/source/honoka.png","hash":"5d3c4ae80acc5592215e934d13ed83565dd6e3eb","modified":1606981818623},{"_id":"public/search.xml","hash":"658d3fef6e9618ae57ba1192a6b611f63a497484","modified":1608149671018},{"_id":"public/404.html","hash":"408caf718477a8aaa5aeb00743aad714b8942bfb","modified":1608148607079},{"_id":"public/about/index.html","hash":"3de7daf66effcd3047c2c77a64968e20d479c9e3","modified":1608148607079},{"_id":"public/about/site.html","hash":"f6821dd36ec8ba7063d2c0dfd8e13d3dbe771eb9","modified":1608148607079},{"_id":"public/links/index.html","hash":"4ecaa14529eb165f6b8f93c40de03e37ddbb0d62","modified":1608148607079},{"_id":"public/categories/index.html","hash":"d2674752eca1bef26c610aa0fde62d369ab89129","modified":1608148607079},{"_id":"public/search/index.html","hash":"d6539902febca2682705f5af027a36f47ec41a70","modified":1608148607079},{"_id":"public/tags/index.html","hash":"d741dd151cb27a9c91a96ae79efcbc47b148afdc","modified":1608148607079},{"_id":"public/2020/12/01/[LifeCP_生活競程] For自己競程的解題紀錄/index.html","hash":"0c42817a58128951351c72cabe7fe45b6ccfb61a","modified":1608148607079},{"_id":"public/2020/11/06/[ICPC模擬賽] 2015 ICPC Singapore Clone/index.html","hash":"17f845cc4e0a21947b2c8f6665ed203e3c555c3c","modified":1608148607079},{"_id":"public/2020/10/29/2020 TOPC心得/index.html","hash":"3af003453f4c164035f978c755b81846b93ced28","modified":1608148607079},{"_id":"public/2020/10/11/利用Hexo架出第一個Blog/index.html","hash":"dff581f106c3e722a669135d6ac4a39cfe47559f","modified":1608148607079},{"_id":"public/2020/10/09/程設(一) 作業1 有趣有用的小東西,心得/index.html","hash":"e870d04c3cf873ad735f3811dc2212a20c6d41cc","modified":1608148607079},{"_id":"public/2020/09/27/2020 NCPC初賽心得/index.html","hash":"caca91f5a2cba95024ea613bcf47f9152a62780e","modified":1608148607079},{"_id":"public/2020/04/26/大學面試總心得/index.html","hash":"bf362d402c6de3beb6ca3ea7889432b025b274cd","modified":1608148607079},{"_id":"public/2019/02/22/TIOJ 1152 銀河帝國旅行社/index.html","hash":"8844d6878b401e5a7a1d5f7b162c1c0767ed7555","modified":1608148607079},{"_id":"public/2019/02/21/[NTHU]10322 PC 費式數列與矩陣快速冪/index.html","hash":"d6df77f45d64120f8fbb6d76814081c9ee5b2863","modified":1608148607079},{"_id":"public/2019/01/24/2019新北市國際資訊奧林匹亞研習營初選資格選拔/index.html","hash":"934bc9c8ee5f1d35dfbadc15661e88085f96b8f2","modified":1608148607079},{"_id":"public/2018/12/26/[Sprout OJ] No.80 RMQ練習/index.html","hash":"229decd92f80c2abcb967a6b6ac0a0ba0958f072","modified":1608148607079},{"_id":"public/2018/12/22/[TIOJ] 1410. Comiket/index.html","hash":"3d137d7660323f417a2528d52543a8d203f02b80","modified":1608148607079},{"_id":"public/2018/12/19/TIOJ 1312 家族/index.html","hash":"7ae657d55fd31ba90b7414495bb8bd48b7c48f0b","modified":1608148607079},{"_id":"public/2018/08/16/[SOJ] 43 Lacy 路網/index.html","hash":"690168e21f29bd33e857fd68090e24aaf79acdbd","modified":1608148607079},{"_id":"public/2018/08/16/[SOJ] 41 大顆壽司/index.html","hash":"dffcb2236488ea7d4107d6fa6808b5d326f5dc2c","modified":1608148607079},{"_id":"public/archives/index.html","hash":"f721786fb7fa2547ffe30f0260c6ee5f580bd0ef","modified":1608148607079},{"_id":"public/archives/page/2/index.html","hash":"09c95e64633ea98557ab41905a5fd69a9093c1dd","modified":1608148607079},{"_id":"public/archives/2018/index.html","hash":"606a45cec6a97cbc041558322a2a3c99b3604b5e","modified":1608148607079},{"_id":"public/archives/2018/08/index.html","hash":"909e6feac59cd8c34f2a170bf8dc7d789f3e3bb7","modified":1608148607079},{"_id":"public/archives/2018/12/index.html","hash":"15c3cd2194f7cefcb2d025012227fd28c9e7d05a","modified":1608148607079},{"_id":"public/archives/2019/index.html","hash":"878dc4fd7dd3528880594dae7fb6e095aab81804","modified":1608148607079},{"_id":"public/archives/2019/01/index.html","hash":"acfa7d4a30c19c3504d5f3b20cac0fa30b274c80","modified":1608148607079},{"_id":"public/archives/2019/02/index.html","hash":"3be0e3a25c8eb5e0ff4422a021a67b287685edca","modified":1608148607079},{"_id":"public/archives/2020/index.html","hash":"bde993af02b786dd8ee38b9c73508e5df3e4307a","modified":1608148607079},{"_id":"public/archives/2020/04/index.html","hash":"590a5394c64c5d5d17aed7d9c58aba67cda5c9cf","modified":1608148607079},{"_id":"public/archives/2020/09/index.html","hash":"aedfe170def5d9dd3eb6ecc9b7d44f9c2962dfed","modified":1608148607079},{"_id":"public/archives/2020/10/index.html","hash":"cc37e4edd336f58e0aed3fb5e391a7ee6f4e1d9d","modified":1608148607079},{"_id":"public/archives/2020/11/index.html","hash":"7043ba84c48142f1b7ece771a63896b615f52b85","modified":1608148607079},{"_id":"public/archives/2020/12/index.html","hash":"122edcf8d3a2e9890f1efc5910e7ee1a5e6ea307","modified":1608148607079},{"_id":"public/categories/心得/index.html","hash":"bc7f196e1695c0429d7835038c4cb8977c76e7d2","modified":1608148607079},{"_id":"public/categories/演算法/index.html","hash":"4e3a58f3588ed5d045c5f1911ac671f724705b8c","modified":1608148607079},{"_id":"public/categories/競程紀錄/index.html","hash":"d87ba66ec80941d0b910ebbb4de084311daffbfc","modified":1608148607079},{"_id":"public/categories/資料結構/index.html","hash":"036344a292f144ae0f366efa8e2e585daeda8be7","modified":1608148607079},{"_id":"public/index.html","hash":"2ecf616bb14c8cbbaa8339dd6dc9bc27a7309c0d","modified":1608148607079},{"_id":"public/page/2/index.html","hash":"43a56fe62e004208b9741423e59a67d28b83d13b","modified":1608148607079},{"_id":"public/tags/新北市TOI/index.html","hash":"eed4180acd5c6e8476f2cbc97c0858616a17f9c5","modified":1608148607079},{"_id":"public/tags/2019/index.html","hash":"b7a7e1c4441fe0edd99768b3325ee1ed7a0ebf7b","modified":1608148607079},{"_id":"public/tags/NCPC/index.html","hash":"2cb68902e0cffab40fd3e9cadd12de29cfb94f36","modified":1608148607079},{"_id":"public/tags/2020/index.html","hash":"8bdc4cb36e13b3da083a64fc8d231b8bcc12d488","modified":1608148607079},{"_id":"public/tags/TOPC/index.html","hash":"a6538c9f7ad1f519a42df8c65f925772bea5474e","modified":1608148607079},{"_id":"public/tags/TIOJ/index.html","hash":"7b2244767bb20531330bdc3361f935fb8bba0ee4","modified":1608148607079},{"_id":"public/tags/樹直徑/index.html","hash":"6185764b842e0bb99b5492cf9bfe40cfb4795c86","modified":1608148607079},{"_id":"public/tags/並查集/index.html","hash":"319f04bd0b6905130363d354f68c730a2a362df9","modified":1608148607079},{"_id":"public/tags/模擬賽/index.html","hash":"93bda4d92f74245cf15019f1ffbf592886cd18dc","modified":1608148607079},{"_id":"public/tags/Failure-Function/index.html","hash":"07288742d6f393b8209d3cade43e809a5d90fa28","modified":1608148607079},{"_id":"public/tags/KMP/index.html","hash":"7894338f98bd595ad9f3dc917802c842a401e2cc","modified":1608148607079},{"_id":"public/tags/競程/index.html","hash":"773fe111f27c44573ce8262eb99d37ffaa113d8d","modified":1608148607079},{"_id":"public/tags/算法/index.html","hash":"d468ed9ab6ae196c62023191d4d130503ee7691c","modified":1608148607079},{"_id":"public/tags/NTHU/index.html","hash":"c41a0fbc0bcca32de5078430d02c87436e07d8e4","modified":1608148607079},{"_id":"public/tags/矩陣快速冪/index.html","hash":"16c4fe8308332d4cab87e460658aa934e8256a5e","modified":1608148607079},{"_id":"public/tags/數論/index.html","hash":"63b5cf2fe32a80fac9790bb468791bbbc4ee6acd","modified":1608148607079},{"_id":"public/tags/SPOJ/index.html","hash":"2bb73bcabd1cf50c414467883a3ba258cc91feb8","modified":1608148607079},{"_id":"public/tags/線段樹/index.html","hash":"0bcea22d955a57da298868558fdf652df08e7d49","modified":1608148607079},{"_id":"public/tags/SOJ/index.html","hash":"a364fbd92d7a1cb046047a80e2cb33e9df0d37b0","modified":1608148607079},{"_id":"public/tags/MST/index.html","hash":"b4f36fa83a7483a75ff57798012b1ccff42d8db1","modified":1608148607079},{"_id":"public/tags/djijkstra/index.html","hash":"59c969b33dc1fd268eb63b4d76f79b599acbf44b","modified":1608148607079},{"_id":"public/tags/最短路徑/index.html","hash":"c47c20b4947e8aacc516ee0f298efa80056c5459","modified":1608148607079},{"_id":"public/tags/時間標記/index.html","hash":"0f7e209775a6e1e760a08ae76bfc0b07941b1df2","modified":1608148607079},{"_id":"public/tags/前綴和/index.html","hash":"5dfc792b762eefcf3d07c92fd8b111dc3c6a44de","modified":1608148607079},{"_id":"public/tags/Blog/index.html","hash":"75a79050867ba8089ed510357963361b4f5ebf25","modified":1608148607079},{"_id":"public/tags/Hexo/index.html","hash":"14404eab333b422222b8eaddd573404b3f05311b","modified":1608148607079},{"_id":"public/tags/面試/index.html","hash":"1435ca4608c6207228a5f8428660cc2410e952f9","modified":1608148607079},{"_id":"public/tags/高中/index.html","hash":"424e205c6f68b0bbd3b155b89083434bb00575b3","modified":1608148607079},{"_id":"public/tags/作業/index.html","hash":"2f3f39b054e27f7624b31f95a46cbdad905455cc","modified":1608148607079},{"_id":"public/tags/有趣的東西/index.html","hash":"bd6fe852177280218b54e8a4012ef07b37ce1ecb","modified":1608148607079},{"_id":"public/Yun.png","hash":"b8ae426fa5dd7579d23d189c222641d812c51c0a","modified":1607611527089},{"_id":"public/favicon.png","hash":"18b0856d5dcc80a63704d81cf0003c0414da7ca3","modified":1607611527089},{"_id":"public/yun.ico","hash":"5d63418cd650d1881d4b6507f35b9f9df766020e","modified":1607611527089},{"_id":"public/css/custom.css","hash":"93ab075fa94ce28d7d2a800216ccedaf8e13664a","modified":1607611527089},{"_id":"public/css/hexo-theme-yun.css","hash":"2a09b58999527ce9474df2e60d07ca3d40a04899","modified":1607611527089},{"_id":"public/js/gallery-decrypt.js","hash":"a3c81112e1957e1df33e795b3c9be194ee7a7648","modified":1607611527089},{"_id":"public/js/hexo-theme-yun.js","hash":"e8639a10f77ed68d289c7a99750e8f53f9ebb600","modified":1607611527089},{"_id":"public/js/pjax.js","hash":"ff364e88fdd44cc98a3e4400f36d71eb06f5719e","modified":1607611527089},{"_id":"public/js/say.js","hash":"3d86572961d0072372ca376173d5ff0a7c841558","modified":1607611527089},{"_id":"public/js/sidebar.js","hash":"f0edb5504c4f472dcab1c574d552fdcab58f76d4","modified":1607611527089},{"_id":"public/js/utils.js","hash":"655ce9996ae4334f58cecfafc9425e836ce26823","modified":1607611527089},{"_id":"public/js/comments/disqus.js","hash":"ac324ecba1f4d6e0868f04f3fd3c42982abd6512","modified":1607611527089},{"_id":"public/js/search/algolia-search.js","hash":"5174bf4bec0e1358e53f9ec7739270eca13846dd","modified":1607611527089},{"_id":"public/js/search/local-search.js","hash":"46cfc1a30a297ff0d2fcef43a099b3962d8a5eff","modified":1607611527089},{"_id":"public/js/ui/banner.js","hash":"17af4d315ab6d503e01069f3b3a561ac514cf316","modified":1607611527089},{"_id":"public/js/ui/fireworks.js","hash":"2f92b2fc70e60a3fa57ab5b7e95e44da2fc86dc3","modified":1607611527089},{"_id":"public/js/ui/mode.js","hash":"6587b0620e4d70b7507b3275840fd55a4f760705","modified":1607611527089},{"_id":"public/honoka.png","hash":"5d3c4ae80acc5592215e934d13ed83565dd6e3eb","modified":1607611527089},{"_id":"source/_posts/[2020 CPTC 心得].md","hash":"1fc9500322e84f747859e4a596e4d255fcc1de9c","modified":1608149657423},{"_id":"public/2020/12/17/[2020 CPTC 心得]/index.html","hash":"71160434e4bc0f64ae514b5d0695752be8b0a9a3","modified":1608149671018},{"_id":"public/tags/CPTC/index.html","hash":"d580b234dc16c9c84e75e9e24e8d55ef8b55bd24","modified":1608148607079}],"Category":[{"name":"心得","_id":"ckiiye9d50004cdg626qo43b5"},{"name":"演算法","_id":"ckiiye9df000pcdg69fup7m9p"},{"name":"競程紀錄","_id":"ckiiye9dl0012cdg6c59h78lg"},{"name":"資料結構","_id":"ckiiye9do001ecdg679wfcmpo"}],"Data":[],"Page":[{"layout":"404","title":"Nothing Here~!","reward":false,"_content":"","source":"404.md","raw":"---\nlayout: 404\ntitle: Nothing Here~!\npermalink: /404.html\nreward: false\n---","date":"2020-12-03T15:09:17.808Z","updated":"2020-12-03T15:09:17.808Z","path":"/404.html","comments":1,"_id":"ckiiye9cz0000cdg652uhebux","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","date":"2020-10-09T18:31:29.000Z","_content":"# 關於我\n>努力把自己變成一位毒瘤Coder OwO\n## 簡歷\n姓名：蘇子權 (SubaRya)\n高中：私立時雨高級中學（~~監獄~~）\n目前就讀：國立臺灣師範大學 資訊工程學系\nemail：index20010928@gmail.com\nLine：0976960352\n\n>熱愛打競程，高一下時在噁心濕冷的金瓜石(山上)用成績換取爛網路跟筆電展開了競程之旅，上了大學後接觸一堆電神才知道我的渺小，因此才決定要努力把自己變成一位毒瘤Coder OwO。\n\n## [大學競程團賽歷程](https://hackmd.io/Fr9gZGyKTuKgVbJOGXw3ew?both)\n\n* 2015 網際網路程式設計全國大賽(NPSC) (決賽優勝)\n* 2017 年國際運算思維挑戰賽(九、十年級組) PR99 (300/300)\n* 2019 臺灣國際資訊奧林匹亞研習營初選 (第 81 名)\n* 2020 月大學程式能力先修檢測(APCS) (實作：4/觀念：4）\n* 2018/2019 新北市資訊學科能力競賽(擔任佳作最高分)->~~根本人品差~~\n* 2020 全國大專電腦軟體設計競賽活動 (NCPC) 初賽(校內：7)(全國不含台清交：25)->沒晉級(因為校內取前6)\n* 2020 ICPC Asia Taiwan Online Programming Contest (校內：7)(全國：52)","source":"about/index.md","raw":"---\ntitle: About me\ndate: 2020-10-10 02:31:29\n---\n# 關於我\n>努力把自己變成一位毒瘤Coder OwO\n## 簡歷\n姓名：蘇子權 (SubaRya)\n高中：私立時雨高級中學（~~監獄~~）\n目前就讀：國立臺灣師範大學 資訊工程學系\nemail：index20010928@gmail.com\nLine：0976960352\n\n>熱愛打競程，高一下時在噁心濕冷的金瓜石(山上)用成績換取爛網路跟筆電展開了競程之旅，上了大學後接觸一堆電神才知道我的渺小，因此才決定要努力把自己變成一位毒瘤Coder OwO。\n\n## [大學競程團賽歷程](https://hackmd.io/Fr9gZGyKTuKgVbJOGXw3ew?both)\n\n* 2015 網際網路程式設計全國大賽(NPSC) (決賽優勝)\n* 2017 年國際運算思維挑戰賽(九、十年級組) PR99 (300/300)\n* 2019 臺灣國際資訊奧林匹亞研習營初選 (第 81 名)\n* 2020 月大學程式能力先修檢測(APCS) (實作：4/觀念：4）\n* 2018/2019 新北市資訊學科能力競賽(擔任佳作最高分)->~~根本人品差~~\n* 2020 全國大專電腦軟體設計競賽活動 (NCPC) 初賽(校內：7)(全國不含台清交：25)->沒晉級(因為校內取前6)\n* 2020 ICPC Asia Taiwan Online Programming Contest (校內：7)(全國：52)","updated":"2020-12-03T13:41:53.029Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckiiye9d30002cdg6hndid9u6","content":"<h1 id=\"關於我\"><a href=\"#關於我\" class=\"headerlink\" title=\"關於我\"></a>關於我</h1><blockquote>\n<p>努力把自己變成一位毒瘤Coder OwO</p>\n</blockquote>\n<h2 id=\"簡歷\"><a href=\"#簡歷\" class=\"headerlink\" title=\"簡歷\"></a>簡歷</h2><p>姓名：蘇子權 (SubaRya)<br>高中：私立時雨高級中學（<del>監獄</del>）<br>目前就讀：國立臺灣師範大學 資訊工程學系<br>email：<a href=\"mailto:&#x69;&#110;&#100;&#x65;&#x78;&#x32;&#x30;&#x30;&#x31;&#48;&#57;&#50;&#x38;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;\">&#x69;&#110;&#100;&#x65;&#x78;&#x32;&#x30;&#x30;&#x31;&#48;&#57;&#50;&#x38;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a><br>Line：0976960352</p>\n<blockquote>\n<p>熱愛打競程，高一下時在噁心濕冷的金瓜石(山上)用成績換取爛網路跟筆電展開了競程之旅，上了大學後接觸一堆電神才知道我的渺小，因此才決定要努力把自己變成一位毒瘤Coder OwO。</p>\n</blockquote>\n<h2 id=\"大學競程團賽歷程\"><a href=\"#大學競程團賽歷程\" class=\"headerlink\" title=\"大學競程團賽歷程\"></a><a href=\"https://hackmd.io/Fr9gZGyKTuKgVbJOGXw3ew?both\">大學競程團賽歷程</a></h2><ul>\n<li>2015 網際網路程式設計全國大賽(NPSC) (決賽優勝)</li>\n<li>2017 年國際運算思維挑戰賽(九、十年級組) PR99 (300/300)</li>\n<li>2019 臺灣國際資訊奧林匹亞研習營初選 (第 81 名)</li>\n<li>2020 月大學程式能力先修檢測(APCS) (實作：4/觀念：4）</li>\n<li>2018/2019 新北市資訊學科能力競賽(擔任佳作最高分)-&gt;<del>根本人品差</del></li>\n<li>2020 全國大專電腦軟體設計競賽活動 (NCPC) 初賽(校內：7)(全國不含台清交：25)-&gt;沒晉級(因為校內取前6)</li>\n<li>2020 ICPC Asia Taiwan Online Programming Contest (校內：7)(全國：52)</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"關於我\"><a href=\"#關於我\" class=\"headerlink\" title=\"關於我\"></a>關於我</h1><blockquote>\n<p>努力把自己變成一位毒瘤Coder OwO</p>\n</blockquote>\n<h2 id=\"簡歷\"><a href=\"#簡歷\" class=\"headerlink\" title=\"簡歷\"></a>簡歷</h2><p>姓名：蘇子權 (SubaRya)<br>高中：私立時雨高級中學（<del>監獄</del>）<br>目前就讀：國立臺灣師範大學 資訊工程學系<br>email：<a href=\"mailto:&#x69;&#110;&#100;&#x65;&#x78;&#x32;&#x30;&#x30;&#x31;&#48;&#57;&#50;&#x38;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;\">&#x69;&#110;&#100;&#x65;&#x78;&#x32;&#x30;&#x30;&#x31;&#48;&#57;&#50;&#x38;&#x40;&#x67;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a><br>Line：0976960352</p>\n<blockquote>\n<p>熱愛打競程，高一下時在噁心濕冷的金瓜石(山上)用成績換取爛網路跟筆電展開了競程之旅，上了大學後接觸一堆電神才知道我的渺小，因此才決定要努力把自己變成一位毒瘤Coder OwO。</p>\n</blockquote>\n<h2 id=\"大學競程團賽歷程\"><a href=\"#大學競程團賽歷程\" class=\"headerlink\" title=\"大學競程團賽歷程\"></a><a href=\"https://hackmd.io/Fr9gZGyKTuKgVbJOGXw3ew?both\">大學競程團賽歷程</a></h2><ul>\n<li>2015 網際網路程式設計全國大賽(NPSC) (決賽優勝)</li>\n<li>2017 年國際運算思維挑戰賽(九、十年級組) PR99 (300/300)</li>\n<li>2019 臺灣國際資訊奧林匹亞研習營初選 (第 81 名)</li>\n<li>2020 月大學程式能力先修檢測(APCS) (實作：4/觀念：4）</li>\n<li>2018/2019 新北市資訊學科能力競賽(擔任佳作最高分)-&gt;<del>根本人品差</del></li>\n<li>2020 全國大專電腦軟體設計競賽活動 (NCPC) 初賽(校內：7)(全國不含台清交：25)-&gt;沒晉級(因為校內取前6)</li>\n<li>2020 ICPC Asia Taiwan Online Programming Contest (校內：7)(全國：52)</li>\n</ul>\n"},{"title":"關於這個部落格","date":"2020-12-03T14:57:29.000Z","_content":"# 2020-10-11\n當時一時興起用Hexo的[Diaspora](https://github.com/Fechin/hexo-theme-diaspora)搬遷了我放在Google Blogger的所有東西(嘛...根本都沒在更新XD)\n[以前部落格的網址(已停更)](https://subarya3906.github.io/)\n陸陸續續修好了一堆Bug (Markdown無法好好顯示、RWD爛掉要自己修、iconmenu開啟後會讓底部圖片跑上來...)，現在則是高耦合、高內聚的js爛掉導致```addEventListener```和旋轉版面時用奇怪的方式算到版跑掉，牽一髮而動全身(我重刻還比較快)，因此我痛下心把這油油的theme換掉。SAD~\n# 2020-12-03\n更新成Hexo [Yun](https://github.com/YunYouJun/hexo-theme-yun) 的 theme","source":"about/site.md","raw":"---\ntitle: 關於這個部落格\ndate: 2020-12-03 22:57:29\n---\n# 2020-10-11\n當時一時興起用Hexo的[Diaspora](https://github.com/Fechin/hexo-theme-diaspora)搬遷了我放在Google Blogger的所有東西(嘛...根本都沒在更新XD)\n[以前部落格的網址(已停更)](https://subarya3906.github.io/)\n陸陸續續修好了一堆Bug (Markdown無法好好顯示、RWD爛掉要自己修、iconmenu開啟後會讓底部圖片跑上來...)，現在則是高耦合、高內聚的js爛掉導致```addEventListener```和旋轉版面時用奇怪的方式算到版跑掉，牽一髮而動全身(我重刻還比較快)，因此我痛下心把這油油的theme換掉。SAD~\n# 2020-12-03\n更新成Hexo [Yun](https://github.com/YunYouJun/hexo-theme-yun) 的 theme","updated":"2020-12-03T15:31:33.458Z","path":"about/site.html","comments":1,"layout":"page","_id":"ckiiye9d60006cdg679ead0oz","content":"<h1 id=\"2020-10-11\"><a href=\"#2020-10-11\" class=\"headerlink\" title=\"2020-10-11\"></a>2020-10-11</h1><p>當時一時興起用Hexo的<a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora</a>搬遷了我放在Google Blogger的所有東西(嘛…根本都沒在更新XD)<br><a href=\"https://subarya3906.github.io/\">以前部落格的網址(已停更)</a><br>陸陸續續修好了一堆Bug (Markdown無法好好顯示、RWD爛掉要自己修、iconmenu開啟後會讓底部圖片跑上來…)，現在則是高耦合、高內聚的js爛掉導致<code>addEventListener</code>和旋轉版面時用奇怪的方式算到版跑掉，牽一髮而動全身(我重刻還比較快)，因此我痛下心把這油油的theme換掉。SAD~</p>\n<h1 id=\"2020-12-03\"><a href=\"#2020-12-03\" class=\"headerlink\" title=\"2020-12-03\"></a>2020-12-03</h1><p>更新成Hexo <a href=\"https://github.com/YunYouJun/hexo-theme-yun\">Yun</a> 的 theme</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2020-10-11\"><a href=\"#2020-10-11\" class=\"headerlink\" title=\"2020-10-11\"></a>2020-10-11</h1><p>當時一時興起用Hexo的<a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora</a>搬遷了我放在Google Blogger的所有東西(嘛…根本都沒在更新XD)<br><a href=\"https://subarya3906.github.io/\">以前部落格的網址(已停更)</a><br>陸陸續續修好了一堆Bug (Markdown無法好好顯示、RWD爛掉要自己修、iconmenu開啟後會讓底部圖片跑上來…)，現在則是高耦合、高內聚的js爛掉導致<code>addEventListener</code>和旋轉版面時用奇怪的方式算到版跑掉，牽一髮而動全身(我重刻還比較快)，因此我痛下心把這油油的theme換掉。SAD~</p>\n<h1 id=\"2020-12-03\"><a href=\"#2020-12-03\" class=\"headerlink\" title=\"2020-12-03\"></a>2020-12-03</h1><p>更新成Hexo <a href=\"https://github.com/YunYouJun/hexo-theme-yun\">Yun</a> 的 theme</p>\n"},{"title":"友情連結","date":"2020-12-03T13:54:07.000Z","type":"links","_content":"### [NTNU_import_magic](https://ntnu-import-magic.github.io/) (臺師資工113隊伍)\n### [PolarisChiba](https://polarischiba.blogspot.com/) (電神麻吉)\n### [jw910731](https://blog.jw910731.wtf/) (隊友1)\n### [大衞的筆記](https://theriseofdavid.github.io/) (北科電神麻吉)","source":"links/index.md","raw":"---\ntitle: 友情連結\ndate: 2020-12-03 21:54:07\ntype: links\n---\n### [NTNU_import_magic](https://ntnu-import-magic.github.io/) (臺師資工113隊伍)\n### [PolarisChiba](https://polarischiba.blogspot.com/) (電神麻吉)\n### [jw910731](https://blog.jw910731.wtf/) (隊友1)\n### [大衞的筆記](https://theriseofdavid.github.io/) (北科電神麻吉)","updated":"2020-12-04T04:42:04.769Z","path":"links/index.html","comments":1,"layout":"page","_id":"ckiiye9d70008cdg601noeh8i","content":"<h3 id=\"NTNU-import-magic-臺師資工113隊伍\"><a href=\"#NTNU-import-magic-臺師資工113隊伍\" class=\"headerlink\" title=\"NTNU_import_magic (臺師資工113隊伍)\"></a><a href=\"https://ntnu-import-magic.github.io/\">NTNU_import_magic</a> (臺師資工113隊伍)</h3><h3 id=\"PolarisChiba-電神麻吉\"><a href=\"#PolarisChiba-電神麻吉\" class=\"headerlink\" title=\"PolarisChiba (電神麻吉)\"></a><a href=\"https://polarischiba.blogspot.com/\">PolarisChiba</a> (電神麻吉)</h3><h3 id=\"jw910731-隊友1\"><a href=\"#jw910731-隊友1\" class=\"headerlink\" title=\"jw910731 (隊友1)\"></a><a href=\"https://blog.jw910731.wtf/\">jw910731</a> (隊友1)</h3><h3 id=\"大衞的筆記-北科電神麻吉\"><a href=\"#大衞的筆記-北科電神麻吉\" class=\"headerlink\" title=\"大衞的筆記 (北科電神麻吉)\"></a><a href=\"https://theriseofdavid.github.io/\">大衞的筆記</a> (北科電神麻吉)</h3>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"NTNU-import-magic-臺師資工113隊伍\"><a href=\"#NTNU-import-magic-臺師資工113隊伍\" class=\"headerlink\" title=\"NTNU_import_magic (臺師資工113隊伍)\"></a><a href=\"https://ntnu-import-magic.github.io/\">NTNU_import_magic</a> (臺師資工113隊伍)</h3><h3 id=\"PolarisChiba-電神麻吉\"><a href=\"#PolarisChiba-電神麻吉\" class=\"headerlink\" title=\"PolarisChiba (電神麻吉)\"></a><a href=\"https://polarischiba.blogspot.com/\">PolarisChiba</a> (電神麻吉)</h3><h3 id=\"jw910731-隊友1\"><a href=\"#jw910731-隊友1\" class=\"headerlink\" title=\"jw910731 (隊友1)\"></a><a href=\"https://blog.jw910731.wtf/\">jw910731</a> (隊友1)</h3><h3 id=\"大衞的筆記-北科電神麻吉\"><a href=\"#大衞的筆記-北科電神麻吉\" class=\"headerlink\" title=\"大衞的筆記 (北科電神麻吉)\"></a><a href=\"https://theriseofdavid.github.io/\">大衞的筆記</a> (北科電神麻吉)</h3>"},{"title":"categories","date":"2020-12-03T13:36:16.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-12-03 21:36:16\ntype: categories\n---\n","updated":"2020-12-03T13:49:12.810Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckiiye9d8000acdg602mq3wtr","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2020-12-03T16:34:50.000Z","type":"search","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2020-12-04 00:34:50\ntype: \"search\"\n---\n","updated":"2020-12-03T16:35:43.121Z","path":"search/index.html","comments":1,"layout":"page","_id":"ckiiye9db000ecdg6d9lp12bo","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-12-03T13:34:58.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-12-03 21:34:58\ntype: tags\n---\n","updated":"2020-12-03T14:01:50.955Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckiiye9dc000gcdg6hhcohqxa","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2019新北市國際資訊奧林匹亞研習營初選資格選拔","date":"2019-01-23T17:53:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n來寫個心得～ （不算長文（？而且很流水帳喔><\n2019資奧TOI初選前熱身營隊（？\n### Day1(1/21)\n因為是第一天報到，所以試著早起（5 點喔\n來到了板中，開始上課時發現我沒吃早餐.....可悲\n第一天只教DP但也是顛覆我人生的第 一次聽到如此動人又詳盡的DP，才開 始發現我以前原來跟DP很不熟。\n然後很順利的跟坐附近的同學們聊得很來（？\n還有一個保送科大，電m(_ _)m\n大部分都寫ZJ 的題目，而且很多是蝸牛老師出的，感到有一種循序漸進～><\n回家坐在椅子上直接睡著，耶～習題沒寫完\n### 進入Day2(1/22)\n早上四點起床發現沒寫習題，開拼～\n不知不覺5:30了，差一點錯過第一班公車\n然後，到了板橋車站附近我居然記得吃早餐ww\n小抱怨，快上課了警衛才記得把樓下鐵捲門打開QAQ\n第二天教的是簡單的資料結構、前中後序轉換、DFS、BFS，也是邊刷題邊上課\n然後神奇的鄰座學長是樹大神，解惑了些許對於樹的疑惑~(聽說高職專學樹(?羨慕)\n回家亦然倒頭就睡\n### 差點遲到的Day3(1/23)\n居然睡過頭了QQ但趕上了第三班6:00的公車，因此來不及用電腦裡的頭貼為昨天要選拔賽的我送上祝福(?\n據說這選拔賽的全名是2019新北市國際資訊奧林匹亞研習營初選資格選拔(?\n差10分鐘遲到，匆匆忙忙得趕上後聽說今天教圖論&二分\n再來驚喜的是親眼遇見大神們陳威翰和蘇柏瑄(架CMS辛苦了><)\n題目有5題\n\n---\nPA:單純的stack&queue(100%)\n\nPB:題目包裝得很漂亮，拆開來是我曾經精神AC卻沒實做過的LCS(100%)\n\nPC:想了想，原本想說跟TIOJ 的Comiket一樣左加1，(右+1)減1 直接掃過去，但紙張上畫一畫發現會爛掉(? 所以突發奇想想起今天教了binary search，所以我就開了pair反過來二分搜，結過記憶體爛掉(27%)\n\nPD:給一張格子圖，求某位置通過一些點到達目的的最短總長。(0%)\n\nPE:並查集(精神100%)\n\n過程:\n前14分鐘寫完PA，由於精神不濟刻出來的code，讓我自己為了寫成2個stack就耍向de了許久，精神恢復了(100get)，發現PB敘述好長，大約看了一下就跳去看PC了，如上述PC的題目敘述一般，我埋頭苦幹了直到剩不到1小時，算了(27get)，趕快看PB & PE，恩……PB看了看，這規律有一種既是感，LCS!(100get) 但剩下的十分鐘，就算知道PE是裸裸的disjoint set，我也無可奈何的沒完成~總計227/500，頗糟的，比預期的低100分QAQ\n\n---\n題目:https://drive.google.com/open…\n\n---\n\n* 第8名，加油~少年!!!\n* 成功進入複選資格~~\n* 板中包了前5名......NDDWFF(QAQ)\n* 我IOI CAMP 慘了......要請掉兩天去複選進階班培訓\n* 初階結束了，資料夾、隨身碟、蝸牛老師的講義&一堆巧顆力GET~!!!","source":"_posts/2019新北市國際資訊奧林匹亞研習營初選資格選拔.md","raw":"---\ntitle: 2019新北市國際資訊奧林匹亞研習營初選資格選拔\ndate: 2019-01-24 01:53:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- 新北市TOI\n- 2019\n---\n\n來寫個心得～ （不算長文（？而且很流水帳喔><\n2019資奧TOI初選前熱身營隊（？\n### Day1(1/21)\n因為是第一天報到，所以試著早起（5 點喔\n來到了板中，開始上課時發現我沒吃早餐.....可悲\n第一天只教DP但也是顛覆我人生的第 一次聽到如此動人又詳盡的DP，才開 始發現我以前原來跟DP很不熟。\n然後很順利的跟坐附近的同學們聊得很來（？\n還有一個保送科大，電m(_ _)m\n大部分都寫ZJ 的題目，而且很多是蝸牛老師出的，感到有一種循序漸進～><\n回家坐在椅子上直接睡著，耶～習題沒寫完\n### 進入Day2(1/22)\n早上四點起床發現沒寫習題，開拼～\n不知不覺5:30了，差一點錯過第一班公車\n然後，到了板橋車站附近我居然記得吃早餐ww\n小抱怨，快上課了警衛才記得把樓下鐵捲門打開QAQ\n第二天教的是簡單的資料結構、前中後序轉換、DFS、BFS，也是邊刷題邊上課\n然後神奇的鄰座學長是樹大神，解惑了些許對於樹的疑惑~(聽說高職專學樹(?羨慕)\n回家亦然倒頭就睡\n### 差點遲到的Day3(1/23)\n居然睡過頭了QQ但趕上了第三班6:00的公車，因此來不及用電腦裡的頭貼為昨天要選拔賽的我送上祝福(?\n據說這選拔賽的全名是2019新北市國際資訊奧林匹亞研習營初選資格選拔(?\n差10分鐘遲到，匆匆忙忙得趕上後聽說今天教圖論&二分\n再來驚喜的是親眼遇見大神們陳威翰和蘇柏瑄(架CMS辛苦了><)\n題目有5題\n\n---\nPA:單純的stack&queue(100%)\n\nPB:題目包裝得很漂亮，拆開來是我曾經精神AC卻沒實做過的LCS(100%)\n\nPC:想了想，原本想說跟TIOJ 的Comiket一樣左加1，(右+1)減1 直接掃過去，但紙張上畫一畫發現會爛掉(? 所以突發奇想想起今天教了binary search，所以我就開了pair反過來二分搜，結過記憶體爛掉(27%)\n\nPD:給一張格子圖，求某位置通過一些點到達目的的最短總長。(0%)\n\nPE:並查集(精神100%)\n\n過程:\n前14分鐘寫完PA，由於精神不濟刻出來的code，讓我自己為了寫成2個stack就耍向de了許久，精神恢復了(100get)，發現PB敘述好長，大約看了一下就跳去看PC了，如上述PC的題目敘述一般，我埋頭苦幹了直到剩不到1小時，算了(27get)，趕快看PB & PE，恩……PB看了看，這規律有一種既是感，LCS!(100get) 但剩下的十分鐘，就算知道PE是裸裸的disjoint set，我也無可奈何的沒完成~總計227/500，頗糟的，比預期的低100分QAQ\n\n---\n題目:https://drive.google.com/open…\n\n---\n\n* 第8名，加油~少年!!!\n* 成功進入複選資格~~\n* 板中包了前5名......NDDWFF(QAQ)\n* 我IOI CAMP 慘了......要請掉兩天去複選進階班培訓\n* 初階結束了，資料夾、隨身碟、蝸牛老師的講義&一堆巧顆力GET~!!!","slug":"2019新北市國際資訊奧林匹亞研習營初選資格選拔","published":1,"updated":"2020-12-03T14:52:39.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9d10001cdg663bb7f1j","content":"<p>來寫個心得～ （不算長文（？而且很流水帳喔&gt;&lt;<br>2019資奧TOI初選前熱身營隊（？</p>\n<h3 id=\"Day1-1-21\"><a href=\"#Day1-1-21\" class=\"headerlink\" title=\"Day1(1/21)\"></a>Day1(1/21)</h3><p>因為是第一天報到，所以試著早起（5 點喔<br>來到了板中，開始上課時發現我沒吃早餐…..可悲<br>第一天只教DP但也是顛覆我人生的第 一次聽到如此動人又詳盡的DP，才開 始發現我以前原來跟DP很不熟。<br>然後很順利的跟坐附近的同學們聊得很來（？<br>還有一個保送科大，電m(_ _)m<br>大部分都寫ZJ 的題目，而且很多是蝸牛老師出的，感到有一種循序漸進～&gt;&lt;<br>回家坐在椅子上直接睡著，耶～習題沒寫完</p>\n<h3 id=\"進入Day2-1-22\"><a href=\"#進入Day2-1-22\" class=\"headerlink\" title=\"進入Day2(1/22)\"></a>進入Day2(1/22)</h3><p>早上四點起床發現沒寫習題，開拼～<br>不知不覺5:30了，差一點錯過第一班公車<br>然後，到了板橋車站附近我居然記得吃早餐ww<br>小抱怨，快上課了警衛才記得把樓下鐵捲門打開QAQ<br>第二天教的是簡單的資料結構、前中後序轉換、DFS、BFS，也是邊刷題邊上課<br>然後神奇的鄰座學長是樹大神，解惑了些許對於樹的疑惑~(聽說高職專學樹(?羨慕)<br>回家亦然倒頭就睡</p>\n<h3 id=\"差點遲到的Day3-1-23\"><a href=\"#差點遲到的Day3-1-23\" class=\"headerlink\" title=\"差點遲到的Day3(1/23)\"></a>差點遲到的Day3(1/23)</h3><p>居然睡過頭了QQ但趕上了第三班6:00的公車，因此來不及用電腦裡的頭貼為昨天要選拔賽的我送上祝福(?<br>據說這選拔賽的全名是2019新北市國際資訊奧林匹亞研習營初選資格選拔(?<br>差10分鐘遲到，匆匆忙忙得趕上後聽說今天教圖論&amp;二分<br>再來驚喜的是親眼遇見大神們陳威翰和蘇柏瑄(架CMS辛苦了&gt;&lt;)<br>題目有5題</p>\n<hr>\n<p>PA:單純的stack&amp;queue(100%)</p>\n<p>PB:題目包裝得很漂亮，拆開來是我曾經精神AC卻沒實做過的LCS(100%)</p>\n<p>PC:想了想，原本想說跟TIOJ 的Comiket一樣左加1，(右+1)減1 直接掃過去，但紙張上畫一畫發現會爛掉(? 所以突發奇想想起今天教了binary search，所以我就開了pair反過來二分搜，結過記憶體爛掉(27%)</p>\n<p>PD:給一張格子圖，求某位置通過一些點到達目的的最短總長。(0%)</p>\n<p>PE:並查集(精神100%)</p>\n<p>過程:<br>前14分鐘寫完PA，由於精神不濟刻出來的code，讓我自己為了寫成2個stack就耍向de了許久，精神恢復了(100get)，發現PB敘述好長，大約看了一下就跳去看PC了，如上述PC的題目敘述一般，我埋頭苦幹了直到剩不到1小時，算了(27get)，趕快看PB &amp; PE，恩……PB看了看，這規律有一種既是感，LCS!(100get) 但剩下的十分鐘，就算知道PE是裸裸的disjoint set，我也無可奈何的沒完成~總計227/500，頗糟的，比預期的低100分QAQ</p>\n<hr>\n<p>題目:<a href=\"https://drive.google.com/open%E2%80%A6\">https://drive.google.com/open…</a></p>\n<hr>\n<ul>\n<li>第8名，加油~少年!!!</li>\n<li>成功進入複選資格~~</li>\n<li>板中包了前5名……NDDWFF(QAQ)</li>\n<li>我IOI CAMP 慘了……要請掉兩天去複選進階班培訓</li>\n<li>初階結束了，資料夾、隨身碟、蝸牛老師的講義&amp;一堆巧顆力GET~!!!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>來寫個心得～ （不算長文（？而且很流水帳喔&gt;&lt;<br>2019資奧TOI初選前熱身營隊（？</p>\n<h3 id=\"Day1-1-21\"><a href=\"#Day1-1-21\" class=\"headerlink\" title=\"Day1(1/21)\"></a>Day1(1/21)</h3><p>因為是第一天報到，所以試著早起（5 點喔<br>來到了板中，開始上課時發現我沒吃早餐…..可悲<br>第一天只教DP但也是顛覆我人生的第 一次聽到如此動人又詳盡的DP，才開 始發現我以前原來跟DP很不熟。<br>然後很順利的跟坐附近的同學們聊得很來（？<br>還有一個保送科大，電m(_ _)m<br>大部分都寫ZJ 的題目，而且很多是蝸牛老師出的，感到有一種循序漸進～&gt;&lt;<br>回家坐在椅子上直接睡著，耶～習題沒寫完</p>\n<h3 id=\"進入Day2-1-22\"><a href=\"#進入Day2-1-22\" class=\"headerlink\" title=\"進入Day2(1/22)\"></a>進入Day2(1/22)</h3><p>早上四點起床發現沒寫習題，開拼～<br>不知不覺5:30了，差一點錯過第一班公車<br>然後，到了板橋車站附近我居然記得吃早餐ww<br>小抱怨，快上課了警衛才記得把樓下鐵捲門打開QAQ<br>第二天教的是簡單的資料結構、前中後序轉換、DFS、BFS，也是邊刷題邊上課<br>然後神奇的鄰座學長是樹大神，解惑了些許對於樹的疑惑~(聽說高職專學樹(?羨慕)<br>回家亦然倒頭就睡</p>\n<h3 id=\"差點遲到的Day3-1-23\"><a href=\"#差點遲到的Day3-1-23\" class=\"headerlink\" title=\"差點遲到的Day3(1/23)\"></a>差點遲到的Day3(1/23)</h3><p>居然睡過頭了QQ但趕上了第三班6:00的公車，因此來不及用電腦裡的頭貼為昨天要選拔賽的我送上祝福(?<br>據說這選拔賽的全名是2019新北市國際資訊奧林匹亞研習營初選資格選拔(?<br>差10分鐘遲到，匆匆忙忙得趕上後聽說今天教圖論&amp;二分<br>再來驚喜的是親眼遇見大神們陳威翰和蘇柏瑄(架CMS辛苦了&gt;&lt;)<br>題目有5題</p>\n<hr>\n<p>PA:單純的stack&amp;queue(100%)</p>\n<p>PB:題目包裝得很漂亮，拆開來是我曾經精神AC卻沒實做過的LCS(100%)</p>\n<p>PC:想了想，原本想說跟TIOJ 的Comiket一樣左加1，(右+1)減1 直接掃過去，但紙張上畫一畫發現會爛掉(? 所以突發奇想想起今天教了binary search，所以我就開了pair反過來二分搜，結過記憶體爛掉(27%)</p>\n<p>PD:給一張格子圖，求某位置通過一些點到達目的的最短總長。(0%)</p>\n<p>PE:並查集(精神100%)</p>\n<p>過程:<br>前14分鐘寫完PA，由於精神不濟刻出來的code，讓我自己為了寫成2個stack就耍向de了許久，精神恢復了(100get)，發現PB敘述好長，大約看了一下就跳去看PC了，如上述PC的題目敘述一般，我埋頭苦幹了直到剩不到1小時，算了(27get)，趕快看PB &amp; PE，恩……PB看了看，這規律有一種既是感，LCS!(100get) 但剩下的十分鐘，就算知道PE是裸裸的disjoint set，我也無可奈何的沒完成~總計227/500，頗糟的，比預期的低100分QAQ</p>\n<hr>\n<p>題目:<a href=\"https://drive.google.com/open%E2%80%A6\">https://drive.google.com/open…</a></p>\n<hr>\n<ul>\n<li>第8名，加油~少年!!!</li>\n<li>成功進入複選資格~~</li>\n<li>板中包了前5名……NDDWFF(QAQ)</li>\n<li>我IOI CAMP 慘了……要請掉兩天去複選進階班培訓</li>\n<li>初階結束了，資料夾、隨身碟、蝸牛老師的講義&amp;一堆巧顆力GET~!!!</li>\n</ul>\n"},{"title":"NCPC 初賽 2020心得","date":"2020-09-27T11:42:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"難得這次我有賽中把題目看完\n\n---\n## 以下題敘\n\nPA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r<pq & r<10^9 assume that 1<p,q<10^9)\n\nPB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n<=5 & n is odd)\n\nPC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n<=1500 & q<=20 && <=10筆測資 && W<=10000)\n\nPD : 有一個以大寫字母組成長度<10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。\n現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。\n\nPE : 給定一個大小為n^2陣列L，n<1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0<邊權<2^32)\n\nPF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m<=n & 8<=n<=30 & 共10筆測資)\n\nPG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)\n## 今日總過程\n[江大衞](https://theriseofdavid.github.io/) 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?\n隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶->(茶)\n進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。\n宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )\n我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。\n快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，\n「中間時段」為->討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。\n原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解\n而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip\nPB跟PA也想不到好的解法，於是整場大燒機!!~~\n\n### (比賽結束)\n\n---\n## 想法與心得\n賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。\n文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。\n但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。\n## 個人感想\n由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ","source":"_posts/2020 NCPC初賽心得.md","raw":"---\ntitle: [NCPC 初賽 2020心得]\ndate: 2020-09-27 19:42:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- NCPC\n- 2020\n---\n難得這次我有賽中把題目看完\n\n---\n## 以下題敘\n\nPA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r<pq & r<10^9 assume that 1<p,q<10^9)\n\nPB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n<=5 & n is odd)\n\nPC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n<=1500 & q<=20 && <=10筆測資 && W<=10000)\n\nPD : 有一個以大寫字母組成長度<10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。\n現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。\n\nPE : 給定一個大小為n^2陣列L，n<1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0<邊權<2^32)\n\nPF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m<=n & 8<=n<=30 & 共10筆測資)\n\nPG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)\n## 今日總過程\n[江大衞](https://theriseofdavid.github.io/) 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?\n隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶->(茶)\n進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。\n宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )\n我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。\n快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，\n「中間時段」為->討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。\n原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解\n而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip\nPB跟PA也想不到好的解法，於是整場大燒機!!~~\n\n### (比賽結束)\n\n---\n## 想法與心得\n賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。\n文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。\n但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。\n## 個人感想\n由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ","slug":"2020 NCPC初賽心得","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9d30003cdg6he0j3a9m","content":"<p>難得這次我有賽中把題目看完</p>\n<hr>\n<h2 id=\"以下題敘\"><a href=\"#以下題敘\" class=\"headerlink\" title=\"以下題敘\"></a>以下題敘</h2><p>PA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r&lt;pq &amp; r&lt;10^9 assume that 1&lt;p,q&lt;10^9)</p>\n<p>PB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n&lt;=5 &amp; n is odd)</p>\n<p>PC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n&lt;=1500 &amp; q&lt;=20 &amp;&amp; &lt;=10筆測資 &amp;&amp; W&lt;=10000)</p>\n<p>PD : 有一個以大寫字母組成長度&lt;10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。<br>現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。</p>\n<p>PE : 給定一個大小為n^2陣列L，n&lt;1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0&lt;邊權&lt;2^32)</p>\n<p>PF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m&lt;=n &amp; 8&lt;=n&lt;=30 &amp; 共10筆測資)</p>\n<p>PG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)</p>\n<h2 id=\"今日總過程\"><a href=\"#今日總過程\" class=\"headerlink\" title=\"今日總過程\"></a>今日總過程</h2><p><a href=\"https://theriseofdavid.github.io/\">江大衞</a> 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?<br>隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶-&gt;(茶)<br>進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。<br>宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )<br>我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。<br>快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，<br>「中間時段」為-&gt;討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。<br>原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解<br>而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip<br>PB跟PA也想不到好的解法，於是整場大燒機!!~~</p>\n<h3 id=\"比賽結束\"><a href=\"#比賽結束\" class=\"headerlink\" title=\"(比賽結束)\"></a>(比賽結束)</h3><hr>\n<h2 id=\"想法與心得\"><a href=\"#想法與心得\" class=\"headerlink\" title=\"想法與心得\"></a>想法與心得</h2><p>賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。<br>文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。<br>但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。</p>\n<h2 id=\"個人感想\"><a href=\"#個人感想\" class=\"headerlink\" title=\"個人感想\"></a>個人感想</h2><p>由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ</p>\n","site":{"data":{}},"excerpt":"","more":"<p>難得這次我有賽中把題目看完</p>\n<hr>\n<h2 id=\"以下題敘\"><a href=\"#以下題敘\" class=\"headerlink\" title=\"以下題敘\"></a>以下題敘</h2><p>PA : r=qx+py，給正整數r,p,q，求|x|+|y|最小 (r&lt;pq &amp; r&lt;10^9 assume that 1&lt;p,q&lt;10^9)</p>\n<p>PB : 奇數魔方陣。給定第一列數字，把整個大小n^2的魔方陣求出。(魔方陣：每行、列、主副對角線個別和相等) (n&lt;=5 &amp; n is odd)</p>\n<p>PC : 給一棵帶邊權的樹，n個節點，修改q次邊權Wij，求出每次修改後最遠的兩點。(n&lt;=1500 &amp; q&lt;=20 &amp;&amp; &lt;=10筆測資 &amp;&amp; W&lt;=10000)</p>\n<p>PD : 有一個以大寫字母組成長度&lt;10^4的字串，以星號(*)結尾。總共有兩次的變動，第一次為「將最後一個字母丟到第一個，重複n-1次」，第二次為「將原字串與n-1個字串以字典序排序」，然後依序取每個字串的最後一個字母。<br>現在給定一字串為「每個字串的最後一個字母」，請推出原字串為何。</p>\n<p>PE : 給定一個大小為n^2陣列L，n&lt;1000，L[i][j]表示i與j相鄰的距離(L[1][2]=1 L[1][3]=2 L[2][3]雖然可以間接走到，但沒有相鄰因此為無限大)，題序為全點對最短情況下modify一邊權後響多少點對被變更(變更使得維持全點對最短)(0&lt;邊權&lt;2^32)</p>\n<p>PF : 給m,n表示1~m中任意數量數字和=n，有全部列出，無則輸出-1 (m&lt;=n &amp; 8&lt;=n&lt;=30 &amp; 共10筆測資)</p>\n<p>PG : 給定d[0][0]，用下面圖片那串建一個(N-1)*(M-1)的table，給A,B,L取max(左上d[A][B]與右下d[A+L-1][B+L-1]的矩形範圍內相鄰差)</p>\n<h2 id=\"今日總過程\"><a href=\"#今日總過程\" class=\"headerlink\" title=\"今日總過程\"></a>今日總過程</h2><p><a href=\"https://theriseofdavid.github.io/\">江大衞</a> 昨天半夜來我家吃宵夜、改Codebook，還有互相打氣(?<br>隔天10點快半跟原齊、文元會合吃早(午)餐，然後買了電瓶-&gt;(茶)<br>進考場後說甚麼不能動電腦跟鍵盤，欸欸，都已經12:43了，剩17分鐘就要考了，說好的30分鐘測機呢？其他組去問都沒有用，然後我就上前去跟考官抗議，嗆到他一句回不出時他就摸摸鼻子去跟隔壁間考官說上台宣布開始測機(只剩15分鐘)。<br>宣布時有說到有提供印表機，但途中印表機卡紙(問題真多啊= = )<br>我快速的把全部題目看過，PF文元跟原齊正在解，我發現PD是前年新北市賽那題(「外星人的訊息」，解法我記得是BWT(Burrows–Wheeler Transform))，但我當年沒好好研究這算法(抓到，當年我喇部份分。子權你再不好好訂正啊!)，只好憑印象跟隊友說解法(因為事先說好我這次不會上機(怕我毒瘤code))。<br>快2小時過去，PF WA了兩次AC了，「中間時段」原齊也有把PD刻好了，<br>「中間時段」為-&gt;討論PD跟PC的解法，PC這題我跟文元說是樹直徑，但他說這題帶權重，我不好好的證明就放棄了這個念頭(如果我的實力好一點而且會在場上細心證明的話這題就AC了)。然後文元覺得是樹鏈剖分套BIT拉出每一條，雖然聽起來合理，但後來看Scoreboard得知很多人AC，發覺這題應該沒那麼毒瘤。<br>原齊把PD上傳後吃了WA，後來手動列出很多比測資都還是不知道哪裡假解<br>而PE跟PG我覺得很勞動而且PG的多次查詢範圍相臨差最大想不到優質的解法，所以都skip<br>PB跟PA也想不到好的解法，於是整場大燒機!!~~</p>\n<h3 id=\"比賽結束\"><a href=\"#比賽結束\" class=\"headerlink\" title=\"(比賽結束)\"></a>(比賽結束)</h3><hr>\n<h2 id=\"想法與心得\"><a href=\"#想法與心得\" class=\"headerlink\" title=\"想法與心得\"></a>想法與心得</h2><p>賽後我直接問 江文吉 PC怎麼AC的，他的隊友跟我說是樹直徑。<br>文元認為整個團隊還沒配合的很好，原齊跟我認為是實力不夠導致PA想不到是「擴展歐幾里得」(而且也不知道這是什麼)，還有PC沒法好好證明帶邊權樹直徑DFS兩次的正確性，後來文元很直白跟我說我都在吃老本、沒在動腦，看到題目就會翻以前解過哪些相似的並困在那思路中，更何況題目都會變化。<br>但我認為我還是得好好地刷題，刺激不同且新的思路還有把想法轉為code並穩定輸出，原齊則想往快速開題還有數論發展。</p>\n<h2 id=\"個人感想\"><a href=\"#個人感想\" class=\"headerlink\" title=\"個人感想\"></a>個人感想</h2><p>由於高中時期我幾乎是一人獨來獨往，組隊是用湊人頭的，很少有多次合作並賽後檢討的機會，更何況我都不知道我的「團隊配合」與「解題思路」有這麼多需要改進(真的直到文元指出我才知道)，這次多人正式賽真的學到了不少，希望兩位能繼續收留我QAQ</p>\n"},{"title":"TOPC 2020 比賽心得","date":"2020-10-29T03:56:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"# 2020 TOPC 心得\n\n比賽時間：2020/10/07 18:00~21:00\n\n## 題目：[**url**](https://drive.google.com/drive/folders/1ikFKK3SGxzTAaWQKvkGr0NVSaBqL4T7c)\n\n雖然算是遲到的心得，但我還是得紀錄一下 OwO\n隊友: [吳文元](https://blog.jw910731.wtf/) 余原齊\n\n## 小抱怨\n* 理圖圖書館的印表機真的爛到炸 OAO\n* 我超爛，SAD\n* OJ可能是在金費之下的受害者，但真正受害者的是我們比賽的人 -> 一題可以給我judging快20分鐘。Orz\n* 沒有penalty。\n* 上述兩點加起來根本就是今年比賽的主打，SAD\n## 過程\npI是簽到題，bj4\npA在某種程度下也是簽到題，因為只要先回到(0,0)，在按照題目輸出即可。\n之後我根原齊在某種奇怪的量子糾纏之下一人一半把pB給AC了(他寫上半部(fold)，我寫下半部(overlapping condition)) -> 過程中我把condition寫成了噁心的巢狀結構，然後因為了1個變數忘了修改而debug了幾百年(拖時間大師is me)。\n### 以下是沒解開的\npC 我們想不到**多點同速率擴張圓**的最寫法，文元原本想要寫最近點對，但沒以實做的想法。\npD 是聽了學長的解後才恍然大悟的數學幾何題。\npG 我以為是貪婪加二分圖，之後以為是匹配，但之後看了fb上大老們的心得文後才知道這題是**二分圖最大點獨立集**。\npEFHJ 我都沒看QQ\n## 結論\n名次：52/146\n整場打下來配合度雨默契有比上次NCPC還要好，但我們的實力與刷題量皆不足，我們事後也有分配我們的合作模式與個人專項(擅長的算法)衝刺。\n雖然以為沒有進ICPC而感到失望，但幾天後的遞補信又讓我重拾了鬥志與信心\nICPC Taipei on Site 加油吧～\n\n![](https://i.imgur.com/WNIq9bK.jpg)\n\n\n","source":"_posts/2020 TOPC心得.md","raw":"---\ntitle: [TOPC 2020 比賽心得]\ndate: 2020-10-29 11:56:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- TOPC\n- 2020\n---\n# 2020 TOPC 心得\n\n比賽時間：2020/10/07 18:00~21:00\n\n## 題目：[**url**](https://drive.google.com/drive/folders/1ikFKK3SGxzTAaWQKvkGr0NVSaBqL4T7c)\n\n雖然算是遲到的心得，但我還是得紀錄一下 OwO\n隊友: [吳文元](https://blog.jw910731.wtf/) 余原齊\n\n## 小抱怨\n* 理圖圖書館的印表機真的爛到炸 OAO\n* 我超爛，SAD\n* OJ可能是在金費之下的受害者，但真正受害者的是我們比賽的人 -> 一題可以給我judging快20分鐘。Orz\n* 沒有penalty。\n* 上述兩點加起來根本就是今年比賽的主打，SAD\n## 過程\npI是簽到題，bj4\npA在某種程度下也是簽到題，因為只要先回到(0,0)，在按照題目輸出即可。\n之後我根原齊在某種奇怪的量子糾纏之下一人一半把pB給AC了(他寫上半部(fold)，我寫下半部(overlapping condition)) -> 過程中我把condition寫成了噁心的巢狀結構，然後因為了1個變數忘了修改而debug了幾百年(拖時間大師is me)。\n### 以下是沒解開的\npC 我們想不到**多點同速率擴張圓**的最寫法，文元原本想要寫最近點對，但沒以實做的想法。\npD 是聽了學長的解後才恍然大悟的數學幾何題。\npG 我以為是貪婪加二分圖，之後以為是匹配，但之後看了fb上大老們的心得文後才知道這題是**二分圖最大點獨立集**。\npEFHJ 我都沒看QQ\n## 結論\n名次：52/146\n整場打下來配合度雨默契有比上次NCPC還要好，但我們的實力與刷題量皆不足，我們事後也有分配我們的合作模式與個人專項(擅長的算法)衝刺。\n雖然以為沒有進ICPC而感到失望，但幾天後的遞補信又讓我重拾了鬥志與信心\nICPC Taipei on Site 加油吧～\n\n![](https://i.imgur.com/WNIq9bK.jpg)\n\n\n","slug":"2020 TOPC心得","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9d60007cdg696p8c1vh","content":"<h1 id=\"2020-TOPC-心得\"><a href=\"#2020-TOPC-心得\" class=\"headerlink\" title=\"2020 TOPC 心得\"></a>2020 TOPC 心得</h1><p>比賽時間：2020/10/07 18:00~21:00</p>\n<h2 id=\"題目：url\"><a href=\"#題目：url\" class=\"headerlink\" title=\"題目：url\"></a>題目：<a href=\"https://drive.google.com/drive/folders/1ikFKK3SGxzTAaWQKvkGr0NVSaBqL4T7c\"><strong>url</strong></a></h2><p>雖然算是遲到的心得，但我還是得紀錄一下 OwO<br>隊友: <a href=\"https://blog.jw910731.wtf/\">吳文元</a> 余原齊</p>\n<h2 id=\"小抱怨\"><a href=\"#小抱怨\" class=\"headerlink\" title=\"小抱怨\"></a>小抱怨</h2><ul>\n<li>理圖圖書館的印表機真的爛到炸 OAO</li>\n<li>我超爛，SAD</li>\n<li>OJ可能是在金費之下的受害者，但真正受害者的是我們比賽的人 -&gt; 一題可以給我judging快20分鐘。Orz</li>\n<li>沒有penalty。</li>\n<li>上述兩點加起來根本就是今年比賽的主打，SAD<h2 id=\"過程\"><a href=\"#過程\" class=\"headerlink\" title=\"過程\"></a>過程</h2>pI是簽到題，bj4<br>pA在某種程度下也是簽到題，因為只要先回到(0,0)，在按照題目輸出即可。<br>之後我根原齊在某種奇怪的量子糾纏之下一人一半把pB給AC了(他寫上半部(fold)，我寫下半部(overlapping condition)) -&gt; 過程中我把condition寫成了噁心的巢狀結構，然後因為了1個變數忘了修改而debug了幾百年(拖時間大師is me)。<h3 id=\"以下是沒解開的\"><a href=\"#以下是沒解開的\" class=\"headerlink\" title=\"以下是沒解開的\"></a>以下是沒解開的</h3>pC 我們想不到<strong>多點同速率擴張圓</strong>的最寫法，文元原本想要寫最近點對，但沒以實做的想法。<br>pD 是聽了學長的解後才恍然大悟的數學幾何題。<br>pG 我以為是貪婪加二分圖，之後以為是匹配，但之後看了fb上大老們的心得文後才知道這題是<strong>二分圖最大點獨立集</strong>。<br>pEFHJ 我都沒看QQ<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2>名次：52/146<br>整場打下來配合度雨默契有比上次NCPC還要好，但我們的實力與刷題量皆不足，我們事後也有分配我們的合作模式與個人專項(擅長的算法)衝刺。<br>雖然以為沒有進ICPC而感到失望，但幾天後的遞補信又讓我重拾了鬥志與信心<br>ICPC Taipei on Site 加油吧～</li>\n</ul>\n<p><img src=\"https://i.imgur.com/WNIq9bK.jpg\" loading=\"lazy\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2020-TOPC-心得\"><a href=\"#2020-TOPC-心得\" class=\"headerlink\" title=\"2020 TOPC 心得\"></a>2020 TOPC 心得</h1><p>比賽時間：2020/10/07 18:00~21:00</p>\n<h2 id=\"題目：url\"><a href=\"#題目：url\" class=\"headerlink\" title=\"題目：url\"></a>題目：<a href=\"https://drive.google.com/drive/folders/1ikFKK3SGxzTAaWQKvkGr0NVSaBqL4T7c\"><strong>url</strong></a></h2><p>雖然算是遲到的心得，但我還是得紀錄一下 OwO<br>隊友: <a href=\"https://blog.jw910731.wtf/\">吳文元</a> 余原齊</p>\n<h2 id=\"小抱怨\"><a href=\"#小抱怨\" class=\"headerlink\" title=\"小抱怨\"></a>小抱怨</h2><ul>\n<li>理圖圖書館的印表機真的爛到炸 OAO</li>\n<li>我超爛，SAD</li>\n<li>OJ可能是在金費之下的受害者，但真正受害者的是我們比賽的人 -&gt; 一題可以給我judging快20分鐘。Orz</li>\n<li>沒有penalty。</li>\n<li>上述兩點加起來根本就是今年比賽的主打，SAD<h2 id=\"過程\"><a href=\"#過程\" class=\"headerlink\" title=\"過程\"></a>過程</h2>pI是簽到題，bj4<br>pA在某種程度下也是簽到題，因為只要先回到(0,0)，在按照題目輸出即可。<br>之後我根原齊在某種奇怪的量子糾纏之下一人一半把pB給AC了(他寫上半部(fold)，我寫下半部(overlapping condition)) -&gt; 過程中我把condition寫成了噁心的巢狀結構，然後因為了1個變數忘了修改而debug了幾百年(拖時間大師is me)。<h3 id=\"以下是沒解開的\"><a href=\"#以下是沒解開的\" class=\"headerlink\" title=\"以下是沒解開的\"></a>以下是沒解開的</h3>pC 我們想不到<strong>多點同速率擴張圓</strong>的最寫法，文元原本想要寫最近點對，但沒以實做的想法。<br>pD 是聽了學長的解後才恍然大悟的數學幾何題。<br>pG 我以為是貪婪加二分圖，之後以為是匹配，但之後看了fb上大老們的心得文後才知道這題是<strong>二分圖最大點獨立集</strong>。<br>pEFHJ 我都沒看QQ<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2>名次：52/146<br>整場打下來配合度雨默契有比上次NCPC還要好，但我們的實力與刷題量皆不足，我們事後也有分配我們的合作模式與個人專項(擅長的算法)衝刺。<br>雖然以為沒有進ICPC而感到失望，但幾天後的遞補信又讓我重拾了鬥志與信心<br>ICPC Taipei on Site 加油吧～</li>\n</ul>\n<p><img src=\"https://i.imgur.com/WNIq9bK.jpg\"></p>\n"},{"title":"TIOJ 1152 銀河帝國旅行社","date":"2019-02-22T14:42:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n題目連結:https://tioj.ck.tp.edu.tw/problems/1152\n\n\"樹直徑\"定義:一顆樹上任兩點距離最大\n這是一題裸裸的樹直徑題，不難發現dfs一次找到最遠點，再用那個點當作第二次dfs的根，再找一次最遠點，不外乎就是樹直徑(很greedy的想法(?)。\n\nPS:我的code超爛，ranklist超後面QAQ\n\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\n#define int long long int\n#define pb push_back\n#define po pop_back\n#define F first\n#define S second\n#define CN cout<<\"\\n\"\n#define MAXN 1000005\n#define lson int lson=index*2\n#define rson int rson=index*2+1\n#define mid int mid=(l+r)/2\nusing namespace std;\nvector<int> v[10005];\nint vis[10005],ans_p=0,ans_s=0,root;\nvoid init(int n)\n{\n    fill(vis,vis+n,0);\n}\nvoid dfs(int now,int sum)\n{\n    for(auto x:v[now])\n    {\n        if(vis[x]==0)\n        {\n            vis[x]=1;\n            dfs(x,sum+1);   \n        }\n    }\n    if(sum>ans_s)\n    {\n        ans_p=now;\n        ans_s=sum;\n        //cout << ans_s <<\" \" << ans_p <<\"\\n\";\n    }\n}\nsigned main()\n{\n    jizz;\n    int n,a;\n    cin >> n;\n    init(n);\n    for(int i=0;i<n;i++)\n        while(cin >> a && a!=-1)\n        {\n            v[i].pb(a);\n            v[a].pb(i);\n        }\n    int root=0;\n    vis[root]=1;\n    dfs(root,0);\n    //cout <<\"s=\"<< ans_s <<\" p=\" << ans_p <<\"\\n\";\n    init(n);\n    dfs(ans_p,0);\n    cout << ans_s <<\"\\n\";\n    return 0;\n}\n```","source":"_posts/TIOJ 1152 銀河帝國旅行社.md","raw":"---\ntitle: TIOJ 1152 銀河帝國旅行社\ndate: 2019-02-22 22:42:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- TIOJ\n- 樹直徑\n---\n\n題目連結:https://tioj.ck.tp.edu.tw/problems/1152\n\n\"樹直徑\"定義:一顆樹上任兩點距離最大\n這是一題裸裸的樹直徑題，不難發現dfs一次找到最遠點，再用那個點當作第二次dfs的根，再找一次最遠點，不外乎就是樹直徑(很greedy的想法(?)。\n\nPS:我的code超爛，ranklist超後面QAQ\n\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\n#define int long long int\n#define pb push_back\n#define po pop_back\n#define F first\n#define S second\n#define CN cout<<\"\\n\"\n#define MAXN 1000005\n#define lson int lson=index*2\n#define rson int rson=index*2+1\n#define mid int mid=(l+r)/2\nusing namespace std;\nvector<int> v[10005];\nint vis[10005],ans_p=0,ans_s=0,root;\nvoid init(int n)\n{\n    fill(vis,vis+n,0);\n}\nvoid dfs(int now,int sum)\n{\n    for(auto x:v[now])\n    {\n        if(vis[x]==0)\n        {\n            vis[x]=1;\n            dfs(x,sum+1);   \n        }\n    }\n    if(sum>ans_s)\n    {\n        ans_p=now;\n        ans_s=sum;\n        //cout << ans_s <<\" \" << ans_p <<\"\\n\";\n    }\n}\nsigned main()\n{\n    jizz;\n    int n,a;\n    cin >> n;\n    init(n);\n    for(int i=0;i<n;i++)\n        while(cin >> a && a!=-1)\n        {\n            v[i].pb(a);\n            v[a].pb(i);\n        }\n    int root=0;\n    vis[root]=1;\n    dfs(root,0);\n    //cout <<\"s=\"<< ans_s <<\" p=\" << ans_p <<\"\\n\";\n    init(n);\n    dfs(ans_p,0);\n    cout << ans_s <<\"\\n\";\n    return 0;\n}\n```","slug":"TIOJ 1152 銀河帝國旅行社","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9d80009cdg6a20ihqkq","content":"<p>題目連結:<a href=\"https://tioj.ck.tp.edu.tw/problems/1152\">https://tioj.ck.tp.edu.tw/problems/1152</a></p>\n<p>“樹直徑”定義:一顆樹上任兩點距離最大<br>這是一題裸裸的樹直徑題，不難發現dfs一次找到最遠點，再用那個點當作第二次dfs的根，再找一次最遠點，不外乎就是樹直徑(很greedy的想法(?)。</p>\n<p>PS:我的code超爛，ranklist超後面QAQ</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pb push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">po pop_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CN cout<span class=\"token operator\">&lt;&lt;</span></span><span class=\"token string\">\"\\n\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAXN <span class=\"token number\">1000005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">lson <span class=\"token keyword\">int</span> lson<span class=\"token operator\">=</span>index<span class=\"token operator\">*</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">rson <span class=\"token keyword\">int</span> rson<span class=\"token operator\">=</span>index<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">mid <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans_p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans_s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span>vis<span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x<span class=\"token operator\">:</span>v<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>sum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">></span>ans_s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans_p<span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n        ans_s<span class=\"token operator\">=</span>sum<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//cout &lt;&lt; ans_s &lt;&lt;\" \" &lt;&lt; ans_p &lt;&lt;\"\\n\";</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    jizz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pb</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pb</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> root<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vis<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//cout &lt;&lt;\"s=\"&lt;&lt; ans_s &lt;&lt;\" p=\" &lt;&lt; ans_p &lt;&lt;\"\\n\";</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>ans_p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans_s <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>題目連結:<a href=\"https://tioj.ck.tp.edu.tw/problems/1152\">https://tioj.ck.tp.edu.tw/problems/1152</a></p>\n<p>“樹直徑”定義:一顆樹上任兩點距離最大<br>這是一題裸裸的樹直徑題，不難發現dfs一次找到最遠點，再用那個點當作第二次dfs的根，再找一次最遠點，不外乎就是樹直徑(很greedy的想法(?)。</p>\n<p>PS:我的code超爛，ranklist超後面QAQ</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pb push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">po pop_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CN cout<span class=\"token operator\">&lt;&lt;</span></span><span class=\"token string\">\"\\n\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MAXN <span class=\"token number\">1000005</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">lson <span class=\"token keyword\">int</span> lson<span class=\"token operator\">=</span>index<span class=\"token operator\">*</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">rson <span class=\"token keyword\">int</span> rson<span class=\"token operator\">=</span>index<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">mid <span class=\"token keyword\">int</span> mid<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vis<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans_p<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>ans_s<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>root<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">,</span>vis<span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> now<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> sum<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> x<span class=\"token operator\">:</span>v<span class=\"token punctuation\">[</span>now<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            vis<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>sum<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sum<span class=\"token operator\">></span>ans_s<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans_p<span class=\"token operator\">=</span>now<span class=\"token punctuation\">;</span>\n        ans_s<span class=\"token operator\">=</span>sum<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//cout &lt;&lt; ans_s &lt;&lt;\" \" &lt;&lt; ans_p &lt;&lt;\"\\n\";</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    jizz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> a <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token operator\">!=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pb</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">pb</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> root<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    vis<span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//cout &lt;&lt;\"s=\"&lt;&lt; ans_s &lt;&lt;\" p=\" &lt;&lt; ans_p &lt;&lt;\"\\n\";</span>\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dfs</span><span class=\"token punctuation\">(</span>ans_p<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans_s <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"TIOJ 1312 家族","date":"2018-12-19T03:25:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n雖然有一點煩(連續輸入我看漏了)，但只是裸裸的dsu題(模板+1/0)\n據說我是題目連結(?  https://tioj.ck.tp.edu.tw/problems/1312\n\n```cpp=\n#pragma gcc optimize(\"o2\")\n#include<bits/stdc++.h>\n#define int long long int \n#define IOS ios_base::sync_with_stdio(false)\n#define TO cin.tie(NULL)\nusing namespace std;\nstruct disjointset \n{\n    int mem[10005],rank[10005];\n    void init(int num)\n    {\n        for(int i=0;i<=num;i++)\n        {\n            mem[i]=i;\n            rank[i]=0;\n        }\n    }\n    int find(int N)\n    {\n        if(mem[N]==N) return N;\n        return mem[N]=find(mem[N]);\n    }\n    int same(int a,int b)\n    {\n        return find(a)==find(b);\n    } \n    void Union(int l,int r)\n    {\n        if(!same(l,r))\n        {\n            if(find(l)<find(r)) swap(l,r);\n            mem[find(l)]=find(r);\n            rank[find(l)]+=find(r);\n        }\n    }\n};\nsigned main()\n{\n    IOS;TO;\n    int n,m,a,b,k;\n    struct disjointset dsu;\n    while(cin >> n >> m)\n    {\n        dsu.init(n);\n        for(int i=0;i<m;i++)\n        {\n            cin >> a >> b;\n            dsu.Union(a,b);\n        }\n    cin >> k;\n    cout << dsu.find(k) <<'\\n';\n    }\n} \n```","source":"_posts/TIOJ 1312 家族.md","raw":"---\ntitle: TIOJ 1312 家族\ndate: 2018-12-19 11:25:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- TIOJ\n- 並查集\n---\n\n雖然有一點煩(連續輸入我看漏了)，但只是裸裸的dsu題(模板+1/0)\n據說我是題目連結(?  https://tioj.ck.tp.edu.tw/problems/1312\n\n```cpp=\n#pragma gcc optimize(\"o2\")\n#include<bits/stdc++.h>\n#define int long long int \n#define IOS ios_base::sync_with_stdio(false)\n#define TO cin.tie(NULL)\nusing namespace std;\nstruct disjointset \n{\n    int mem[10005],rank[10005];\n    void init(int num)\n    {\n        for(int i=0;i<=num;i++)\n        {\n            mem[i]=i;\n            rank[i]=0;\n        }\n    }\n    int find(int N)\n    {\n        if(mem[N]==N) return N;\n        return mem[N]=find(mem[N]);\n    }\n    int same(int a,int b)\n    {\n        return find(a)==find(b);\n    } \n    void Union(int l,int r)\n    {\n        if(!same(l,r))\n        {\n            if(find(l)<find(r)) swap(l,r);\n            mem[find(l)]=find(r);\n            rank[find(l)]+=find(r);\n        }\n    }\n};\nsigned main()\n{\n    IOS;TO;\n    int n,m,a,b,k;\n    struct disjointset dsu;\n    while(cin >> n >> m)\n    {\n        dsu.init(n);\n        for(int i=0;i<m;i++)\n        {\n            cin >> a >> b;\n            dsu.Union(a,b);\n        }\n    cin >> k;\n    cout << dsu.find(k) <<'\\n';\n    }\n} \n```","slug":"TIOJ 1312 家族","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9d9000bcdg60rom5yd3","content":"<p>雖然有一點煩(連續輸入我看漏了)，但只是裸裸的dsu題(模板+1/0)<br>據說我是題目連結(?  <a href=\"https://tioj.ck.tp.edu.tw/problems/1312\">https://tioj.ck.tp.edu.tw/problems/1312</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">gcc <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"o2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TO cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rank<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            mem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> N<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mem<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TO<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> dsu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        dsu<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n            dsu<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    cin <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dsu<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>雖然有一點煩(連續輸入我看漏了)，但只是裸裸的dsu題(模板+1/0)<br>據說我是題目連結(?  <a href=\"https://tioj.ck.tp.edu.tw/problems/1312\">https://tioj.ck.tp.edu.tw/problems/1312</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">gcc <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"o2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TO cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> \n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rank<span class=\"token punctuation\">[</span><span class=\"token number\">10005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>num<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            mem<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>N<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> N<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            mem<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TO<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> dsu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        dsu<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n            dsu<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    cin <span class=\"token operator\">>></span> k<span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> dsu<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"ICPC模擬賽 2015 ICPC Singapore Clone","date":"2020-11-05T18:00:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"  \n\n# 校內 ICPC 模擬賽 心得\n## 模擬賽題目：2015 ICPC Singapore \n連結：https://open.kattis.com/contests/niih2v\n\n**之前的我們：我們打競程打健康的。**\n**現在的我們：為了出國一起捨棄GPA OwO**\n\n## 心得\n天使宗哲設錯日期，設到明天晚上，調整後延後10分鐘考www\n比賽時間：2020/11/05 18:10~23:10\n\n開頭小差曲：我們到了一間不是電腦教室的地方上機，原齊想用vim，文元想用sublime，但我的筆電只有vim，所以比賽開始後文元現場直接裝，sad。\n\n一開場我先看pC，第一次知道ICPC的題敘超可怕的長，裡面的劇情用詞超強的 <- (這不是重點XD)\n\npC: n表示接下來有n個食譜，每個食譜有m個數字表示combine在一起，**必定**由上往下的食譜進行合併，合併過後的數字不能單獨跟他沒有合併過的合併，然後合併的條件是\n1. 合併過不得單獨跟沒合併過的合併\n2. 合併過的可以**一起**跟沒有合併過的合併\n3. 呈2，或是可以一起跟合併過的一起合併\n\n看完後跟文元(SAD)、原齊說我的想法，我們同時表示：「裸的DSU啊！」，然後交給DSU刻超快的SAD刻。\n\n中間小插曲：文元突然轉不過來第3點怎麼刻，我就說：沒做過的砍掉，每一個dsu的size總和一定會等於剩下的。C就這樣被首殺掉了。\n\n然後我看pE，看到一半後被抓去想pI，就三種字母，給分別三種的數量，將其排列但相同字母的不能相鄰，我想了一下，資芽算法班貌似在DP那章有紅藍綠著色問題，但我又忘了怎麼轉移，現場推我腦袋燒雞，交給原齊後他也宣告放棄，於是就跟他們說pE想法。\n\n我只說了一半(誰叫我只看一半ㄎㄎ)，順便他們跟我解釋pF，後來發現pE完全就是模擬題(模擬比賽算penalty)(而且一堆人AC了)，他們趕緊刻完AC後交給我寫pF。\n\npF: 每隻細菌都有自己適合的[U,L]，表示溫度範圍，然候有n隻細菌，每個保溫箱有固定的溫度，求最少需要多少保溫箱。\n\n其實pF沒有很難，但一開始原齊想法錯了導致送上去兩次WA，後來他製造了奇怪的測資把自己的想法ban掉OwO，我就重刻。由於我沒有好好維護while導致某些比較大的測資會infinite loop，我又WA了兩次，而且我的code超級不clean，於是原齊打算重刻，果然刻完送上去AC了。\n\n這讓我想起打R6時天兆常跟我說：「不會玩女鬼就不要玩; 不會玩大盾就不要玩！」我現在想：「不會刻while就......好好維護啊！然後code乾淨一點！」(我真是欠譴責OwO)\n\n後來我們pG想不出最優解，原本想說是greedy，但文元說dp才對，可是沒想法。\npG題序如下：\n有一個stack，裡面有一排數字，逐一取出分堆。\n分堆定義：\n1. 取出後可以加起前一個並組成一堆\n2. 依序以左至右的每堆數量必須為非嚴格遞增\n3. 呈1.取出後可以選擇併入前一堆，或是自立一堆\n題目所求：最多分幾堆\n\n最後我們21:45就先離場了，總共打了3hr35m。\n\n總之，ICPC加油啦！我會好好練 clean code的 QAQ\n\n![](https://i.imgur.com/lMG2pH2.jpg)\n","source":"_posts/[ICPC模擬賽] 2015 ICPC Singapore Clone.md","raw":"---\ntitle: ICPC模擬賽 2015 ICPC Singapore Clone\ndate: 2020-11-06 02:00:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- 模擬賽\n- 2020\n---  \n\n# 校內 ICPC 模擬賽 心得\n## 模擬賽題目：2015 ICPC Singapore \n連結：https://open.kattis.com/contests/niih2v\n\n**之前的我們：我們打競程打健康的。**\n**現在的我們：為了出國一起捨棄GPA OwO**\n\n## 心得\n天使宗哲設錯日期，設到明天晚上，調整後延後10分鐘考www\n比賽時間：2020/11/05 18:10~23:10\n\n開頭小差曲：我們到了一間不是電腦教室的地方上機，原齊想用vim，文元想用sublime，但我的筆電只有vim，所以比賽開始後文元現場直接裝，sad。\n\n一開場我先看pC，第一次知道ICPC的題敘超可怕的長，裡面的劇情用詞超強的 <- (這不是重點XD)\n\npC: n表示接下來有n個食譜，每個食譜有m個數字表示combine在一起，**必定**由上往下的食譜進行合併，合併過後的數字不能單獨跟他沒有合併過的合併，然後合併的條件是\n1. 合併過不得單獨跟沒合併過的合併\n2. 合併過的可以**一起**跟沒有合併過的合併\n3. 呈2，或是可以一起跟合併過的一起合併\n\n看完後跟文元(SAD)、原齊說我的想法，我們同時表示：「裸的DSU啊！」，然後交給DSU刻超快的SAD刻。\n\n中間小插曲：文元突然轉不過來第3點怎麼刻，我就說：沒做過的砍掉，每一個dsu的size總和一定會等於剩下的。C就這樣被首殺掉了。\n\n然後我看pE，看到一半後被抓去想pI，就三種字母，給分別三種的數量，將其排列但相同字母的不能相鄰，我想了一下，資芽算法班貌似在DP那章有紅藍綠著色問題，但我又忘了怎麼轉移，現場推我腦袋燒雞，交給原齊後他也宣告放棄，於是就跟他們說pE想法。\n\n我只說了一半(誰叫我只看一半ㄎㄎ)，順便他們跟我解釋pF，後來發現pE完全就是模擬題(模擬比賽算penalty)(而且一堆人AC了)，他們趕緊刻完AC後交給我寫pF。\n\npF: 每隻細菌都有自己適合的[U,L]，表示溫度範圍，然候有n隻細菌，每個保溫箱有固定的溫度，求最少需要多少保溫箱。\n\n其實pF沒有很難，但一開始原齊想法錯了導致送上去兩次WA，後來他製造了奇怪的測資把自己的想法ban掉OwO，我就重刻。由於我沒有好好維護while導致某些比較大的測資會infinite loop，我又WA了兩次，而且我的code超級不clean，於是原齊打算重刻，果然刻完送上去AC了。\n\n這讓我想起打R6時天兆常跟我說：「不會玩女鬼就不要玩; 不會玩大盾就不要玩！」我現在想：「不會刻while就......好好維護啊！然後code乾淨一點！」(我真是欠譴責OwO)\n\n後來我們pG想不出最優解，原本想說是greedy，但文元說dp才對，可是沒想法。\npG題序如下：\n有一個stack，裡面有一排數字，逐一取出分堆。\n分堆定義：\n1. 取出後可以加起前一個並組成一堆\n2. 依序以左至右的每堆數量必須為非嚴格遞增\n3. 呈1.取出後可以選擇併入前一堆，或是自立一堆\n題目所求：最多分幾堆\n\n最後我們21:45就先離場了，總共打了3hr35m。\n\n總之，ICPC加油啦！我會好好練 clean code的 QAQ\n\n![](https://i.imgur.com/lMG2pH2.jpg)\n","slug":"[ICPC模擬賽] 2015 ICPC Singapore Clone","published":1,"updated":"2020-12-03T16:06:54.222Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9db000fcdg6e3ok7w44","content":"<h1 id=\"校內-ICPC-模擬賽-心得\"><a href=\"#校內-ICPC-模擬賽-心得\" class=\"headerlink\" title=\"校內 ICPC 模擬賽 心得\"></a>校內 ICPC 模擬賽 心得</h1><h2 id=\"模擬賽題目：2015-ICPC-Singapore\"><a href=\"#模擬賽題目：2015-ICPC-Singapore\" class=\"headerlink\" title=\"模擬賽題目：2015 ICPC Singapore\"></a>模擬賽題目：2015 ICPC Singapore</h2><p>連結：<a href=\"https://open.kattis.com/contests/niih2v\">https://open.kattis.com/contests/niih2v</a></p>\n<p><strong>之前的我們：我們打競程打健康的。</strong><br><strong>現在的我們：為了出國一起捨棄GPA OwO</strong></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>天使宗哲設錯日期，設到明天晚上，調整後延後10分鐘考www<br>比賽時間：2020/11/05 18:10~23:10</p>\n<p>開頭小差曲：我們到了一間不是電腦教室的地方上機，原齊想用vim，文元想用sublime，但我的筆電只有vim，所以比賽開始後文元現場直接裝，sad。</p>\n<p>一開場我先看pC，第一次知道ICPC的題敘超可怕的長，裡面的劇情用詞超強的 &lt;- (這不是重點XD)</p>\n<p>pC: n表示接下來有n個食譜，每個食譜有m個數字表示combine在一起，<strong>必定</strong>由上往下的食譜進行合併，合併過後的數字不能單獨跟他沒有合併過的合併，然後合併的條件是</p>\n<ol>\n<li>合併過不得單獨跟沒合併過的合併</li>\n<li>合併過的可以<strong>一起</strong>跟沒有合併過的合併</li>\n<li>呈2，或是可以一起跟合併過的一起合併</li>\n</ol>\n<p>看完後跟文元(SAD)、原齊說我的想法，我們同時表示：「裸的DSU啊！」，然後交給DSU刻超快的SAD刻。</p>\n<p>中間小插曲：文元突然轉不過來第3點怎麼刻，我就說：沒做過的砍掉，每一個dsu的size總和一定會等於剩下的。C就這樣被首殺掉了。</p>\n<p>然後我看pE，看到一半後被抓去想pI，就三種字母，給分別三種的數量，將其排列但相同字母的不能相鄰，我想了一下，資芽算法班貌似在DP那章有紅藍綠著色問題，但我又忘了怎麼轉移，現場推我腦袋燒雞，交給原齊後他也宣告放棄，於是就跟他們說pE想法。</p>\n<p>我只說了一半(誰叫我只看一半ㄎㄎ)，順便他們跟我解釋pF，後來發現pE完全就是模擬題(模擬比賽算penalty)(而且一堆人AC了)，他們趕緊刻完AC後交給我寫pF。</p>\n<p>pF: 每隻細菌都有自己適合的[U,L]，表示溫度範圍，然候有n隻細菌，每個保溫箱有固定的溫度，求最少需要多少保溫箱。</p>\n<p>其實pF沒有很難，但一開始原齊想法錯了導致送上去兩次WA，後來他製造了奇怪的測資把自己的想法ban掉OwO，我就重刻。由於我沒有好好維護while導致某些比較大的測資會infinite loop，我又WA了兩次，而且我的code超級不clean，於是原齊打算重刻，果然刻完送上去AC了。</p>\n<p>這讓我想起打R6時天兆常跟我說：「不會玩女鬼就不要玩; 不會玩大盾就不要玩！」我現在想：「不會刻while就……好好維護啊！然後code乾淨一點！」(我真是欠譴責OwO)</p>\n<p>後來我們pG想不出最優解，原本想說是greedy，但文元說dp才對，可是沒想法。<br>pG題序如下：<br>有一個stack，裡面有一排數字，逐一取出分堆。<br>分堆定義：</p>\n<ol>\n<li>取出後可以加起前一個並組成一堆</li>\n<li>依序以左至右的每堆數量必須為非嚴格遞增</li>\n<li>呈1.取出後可以選擇併入前一堆，或是自立一堆<br>題目所求：最多分幾堆</li>\n</ol>\n<p>最後我們21:45就先離場了，總共打了3hr35m。</p>\n<p>總之，ICPC加油啦！我會好好練 clean code的 QAQ</p>\n<p><img src=\"https://i.imgur.com/lMG2pH2.jpg\" loading=\"lazy\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"校內-ICPC-模擬賽-心得\"><a href=\"#校內-ICPC-模擬賽-心得\" class=\"headerlink\" title=\"校內 ICPC 模擬賽 心得\"></a>校內 ICPC 模擬賽 心得</h1><h2 id=\"模擬賽題目：2015-ICPC-Singapore\"><a href=\"#模擬賽題目：2015-ICPC-Singapore\" class=\"headerlink\" title=\"模擬賽題目：2015 ICPC Singapore\"></a>模擬賽題目：2015 ICPC Singapore</h2><p>連結：<a href=\"https://open.kattis.com/contests/niih2v\">https://open.kattis.com/contests/niih2v</a></p>\n<p><strong>之前的我們：我們打競程打健康的。</strong><br><strong>現在的我們：為了出國一起捨棄GPA OwO</strong></p>\n<h2 id=\"心得\"><a href=\"#心得\" class=\"headerlink\" title=\"心得\"></a>心得</h2><p>天使宗哲設錯日期，設到明天晚上，調整後延後10分鐘考www<br>比賽時間：2020/11/05 18:10~23:10</p>\n<p>開頭小差曲：我們到了一間不是電腦教室的地方上機，原齊想用vim，文元想用sublime，但我的筆電只有vim，所以比賽開始後文元現場直接裝，sad。</p>\n<p>一開場我先看pC，第一次知道ICPC的題敘超可怕的長，裡面的劇情用詞超強的 &lt;- (這不是重點XD)</p>\n<p>pC: n表示接下來有n個食譜，每個食譜有m個數字表示combine在一起，<strong>必定</strong>由上往下的食譜進行合併，合併過後的數字不能單獨跟他沒有合併過的合併，然後合併的條件是</p>\n<ol>\n<li>合併過不得單獨跟沒合併過的合併</li>\n<li>合併過的可以<strong>一起</strong>跟沒有合併過的合併</li>\n<li>呈2，或是可以一起跟合併過的一起合併</li>\n</ol>\n<p>看完後跟文元(SAD)、原齊說我的想法，我們同時表示：「裸的DSU啊！」，然後交給DSU刻超快的SAD刻。</p>\n<p>中間小插曲：文元突然轉不過來第3點怎麼刻，我就說：沒做過的砍掉，每一個dsu的size總和一定會等於剩下的。C就這樣被首殺掉了。</p>\n<p>然後我看pE，看到一半後被抓去想pI，就三種字母，給分別三種的數量，將其排列但相同字母的不能相鄰，我想了一下，資芽算法班貌似在DP那章有紅藍綠著色問題，但我又忘了怎麼轉移，現場推我腦袋燒雞，交給原齊後他也宣告放棄，於是就跟他們說pE想法。</p>\n<p>我只說了一半(誰叫我只看一半ㄎㄎ)，順便他們跟我解釋pF，後來發現pE完全就是模擬題(模擬比賽算penalty)(而且一堆人AC了)，他們趕緊刻完AC後交給我寫pF。</p>\n<p>pF: 每隻細菌都有自己適合的[U,L]，表示溫度範圍，然候有n隻細菌，每個保溫箱有固定的溫度，求最少需要多少保溫箱。</p>\n<p>其實pF沒有很難，但一開始原齊想法錯了導致送上去兩次WA，後來他製造了奇怪的測資把自己的想法ban掉OwO，我就重刻。由於我沒有好好維護while導致某些比較大的測資會infinite loop，我又WA了兩次，而且我的code超級不clean，於是原齊打算重刻，果然刻完送上去AC了。</p>\n<p>這讓我想起打R6時天兆常跟我說：「不會玩女鬼就不要玩; 不會玩大盾就不要玩！」我現在想：「不會刻while就……好好維護啊！然後code乾淨一點！」(我真是欠譴責OwO)</p>\n<p>後來我們pG想不出最優解，原本想說是greedy，但文元說dp才對，可是沒想法。<br>pG題序如下：<br>有一個stack，裡面有一排數字，逐一取出分堆。<br>分堆定義：</p>\n<ol>\n<li>取出後可以加起前一個並組成一堆</li>\n<li>依序以左至右的每堆數量必須為非嚴格遞增</li>\n<li>呈1.取出後可以選擇併入前一堆，或是自立一堆<br>題目所求：最多分幾堆</li>\n</ol>\n<p>最後我們21:45就先離場了，總共打了3hr35m。</p>\n<p>總之，ICPC加油啦！我會好好練 clean code的 QAQ</p>\n<p><img src=\"https://i.imgur.com/lMG2pH2.jpg\"></p>\n"},{"title":"For自己競程的解題紀錄","date":"2020-11-30T16:27:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"  \n\n# 紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）\n隊伍網站: [Link](https://ntnu-import-magic.github.io/)\n## Failure Function\n參考資料：\n* [資訊之芽算法班第13週KMP](https://www.csie.ntu.edu.tw/~sprout/algo2018/)\n* [演算法筆記 String Searching](http://web.ntnu.edu.tw/~algo/StringSearching.html#2)\n模板題：[Uva-10298](https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1239)\n這題先做完Failure Function後直接判斷其size-Failure Function最後一個的值的結果是否整除原本的size。\n```cpp=\n#include<bits/stdc++.h>\nusing namespace std; \nint F[1000005];\ninline void fail(string& str){\t\n\tint j=-1; F[0]=-1;\n\tfor(int i=1;i<str.size();i++){\n\t\twhile(j>=0 && str[j+1]!=str[i]) j=F[j];\n\t\tif(str[j+1]==str[i]) j++;\n\t\tF[i]=j;\n\t}\n}\nsigned main(){\n\tstring str;\n\twhile(cin >> str && str!=\".\"){\n\t\tfail(str);\n\t\tint det=str.size()%(str.size()-(F[str.size()-1]+1));\n\t\tint ans=str.size()/(str.size()-(F[str.size()-1]+1));\n\t\tif(det==0) cout << ans <<\"\\n\";\n\t\telse cout << \"1\\n\";\n\t}\n\treturn 0;\n } \n```\n## KMP\n模板題：[Uva-11475](https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=2470)\n參考資料：\n* [資訊之芽算法班第13週KMP](https://www.csie.ntu.edu.tw/~sprout/algo2018/)\n\n題序：利用KMP去產生既定字串的最小的回文字串。\n\n想法：首先把字串倒過來，將它的Failure Function列出來後，利用KMP的方式去尋找失敗值在哪裡，這樣就可以從失敗值的位置倒著輸出即為所求。\n```cpp=\n#include<bits/stdc++.h>\n//#define int long long\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\nusing namespace std;\nint F[1000005];\nvector<int> ans;\ninline void failure(string& str){\n    F[0]=-1;\n    int sz=str.size();\n    for(int i=1,j=-1;i<sz;i++){\n        while(j>=0 && str[j+1]!=str[i]) j=F[j];\n        if(str[j+1]==str[i]) j++;\n        F[i]=j;\n    }\n} \ninline int KMP(string& str, string& rev){\n    failure(rev);\n    int len=str.size(),j=-1;\n    for(int i=0;i<len;i++){\n        while(j>=0 && rev[j+1]!=str[i]) j=F[j];\n        if(rev[j+1]==str[i]) j++;\n    }\n    return j;\n}\nsigned main(){\n    string str,str1,rev;\n    while(cin >> str1 && str[0]!=EOF){\n        int l=str1.size();\n        str=str1;\n        reverse(str1.begin(),str1.end());\n        rev=str1;\n        int j=KMP(str,rev);\n        for(int i=0;i<l;i++) cout << str[i] ;\n        for(int i=l-j-2;i>=0;i--) cout << str[i] ;//也可以這樣寫for(++j;j<l;j++) cout << rev[j];\n        cout << \"\\n\";\n    }\n    return 0;\n}\n```\n## strstr應用\n題目：[Uva-10679](https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1620)\n```cpp=\n#include<bits/stdc++.h>\nusing namespace std;\nchar str[100005],cmp[100005];\nsigned main()\n{\n\tint n,m;\n\tcin >> n;\n\twhile(n--)\n\t{\n\t\tcin >> str;\n\t\tcin >> m;\n\t\twhile(m--)\n\t\t{\n\t\t\tcin >> cmp;\n\t\t\tchar *deter=strstr(str,cmp);\n\t\t\tif(deter==nullptr) cout << \"n\\n\";\n\t\t\telse cout << \"y\\n\";  \n\t\t}\n\t}\n} \n```","source":"_posts/[LifeCP_生活競程] For自己競程的解題紀錄.md","raw":"---\ntitle: For自己競程的解題紀錄\ndate: 2020-12-01 00:27:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: \n- 競程紀錄\ntags: \n- Failure Function\n- KMP\n- 競程\n- 算法\n---  \n\n# 紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）\n隊伍網站: [Link](https://ntnu-import-magic.github.io/)\n## Failure Function\n參考資料：\n* [資訊之芽算法班第13週KMP](https://www.csie.ntu.edu.tw/~sprout/algo2018/)\n* [演算法筆記 String Searching](http://web.ntnu.edu.tw/~algo/StringSearching.html#2)\n模板題：[Uva-10298](https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1239)\n這題先做完Failure Function後直接判斷其size-Failure Function最後一個的值的結果是否整除原本的size。\n```cpp=\n#include<bits/stdc++.h>\nusing namespace std; \nint F[1000005];\ninline void fail(string& str){\t\n\tint j=-1; F[0]=-1;\n\tfor(int i=1;i<str.size();i++){\n\t\twhile(j>=0 && str[j+1]!=str[i]) j=F[j];\n\t\tif(str[j+1]==str[i]) j++;\n\t\tF[i]=j;\n\t}\n}\nsigned main(){\n\tstring str;\n\twhile(cin >> str && str!=\".\"){\n\t\tfail(str);\n\t\tint det=str.size()%(str.size()-(F[str.size()-1]+1));\n\t\tint ans=str.size()/(str.size()-(F[str.size()-1]+1));\n\t\tif(det==0) cout << ans <<\"\\n\";\n\t\telse cout << \"1\\n\";\n\t}\n\treturn 0;\n } \n```\n## KMP\n模板題：[Uva-11475](https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=2470)\n參考資料：\n* [資訊之芽算法班第13週KMP](https://www.csie.ntu.edu.tw/~sprout/algo2018/)\n\n題序：利用KMP去產生既定字串的最小的回文字串。\n\n想法：首先把字串倒過來，將它的Failure Function列出來後，利用KMP的方式去尋找失敗值在哪裡，這樣就可以從失敗值的位置倒著輸出即為所求。\n```cpp=\n#include<bits/stdc++.h>\n//#define int long long\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\nusing namespace std;\nint F[1000005];\nvector<int> ans;\ninline void failure(string& str){\n    F[0]=-1;\n    int sz=str.size();\n    for(int i=1,j=-1;i<sz;i++){\n        while(j>=0 && str[j+1]!=str[i]) j=F[j];\n        if(str[j+1]==str[i]) j++;\n        F[i]=j;\n    }\n} \ninline int KMP(string& str, string& rev){\n    failure(rev);\n    int len=str.size(),j=-1;\n    for(int i=0;i<len;i++){\n        while(j>=0 && rev[j+1]!=str[i]) j=F[j];\n        if(rev[j+1]==str[i]) j++;\n    }\n    return j;\n}\nsigned main(){\n    string str,str1,rev;\n    while(cin >> str1 && str[0]!=EOF){\n        int l=str1.size();\n        str=str1;\n        reverse(str1.begin(),str1.end());\n        rev=str1;\n        int j=KMP(str,rev);\n        for(int i=0;i<l;i++) cout << str[i] ;\n        for(int i=l-j-2;i>=0;i--) cout << str[i] ;//也可以這樣寫for(++j;j<l;j++) cout << rev[j];\n        cout << \"\\n\";\n    }\n    return 0;\n}\n```\n## strstr應用\n題目：[Uva-10679](https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1620)\n```cpp=\n#include<bits/stdc++.h>\nusing namespace std;\nchar str[100005],cmp[100005];\nsigned main()\n{\n\tint n,m;\n\tcin >> n;\n\twhile(n--)\n\t{\n\t\tcin >> str;\n\t\tcin >> m;\n\t\twhile(m--)\n\t\t{\n\t\t\tcin >> cmp;\n\t\t\tchar *deter=strstr(str,cmp);\n\t\t\tif(deter==nullptr) cout << \"n\\n\";\n\t\t\telse cout << \"y\\n\";  \n\t\t}\n\t}\n} \n```","slug":"[LifeCP_生活競程] For自己競程的解題紀錄","published":1,"updated":"2020-12-10T14:45:02.583Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dc000hcdg6arf24kfg","content":"<h1 id=\"紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）\"><a href=\"#紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）\" class=\"headerlink\" title=\"紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）\"></a>紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）</h1><p>隊伍網站: <a href=\"https://ntnu-import-magic.github.io/\">Link</a></p>\n<h2 id=\"Failure-Function\"><a href=\"#Failure-Function\" class=\"headerlink\" title=\"Failure Function\"></a>Failure Function</h2><p>參考資料：</p>\n<ul>\n<li><a href=\"https://www.csie.ntu.edu.tw/~sprout/algo2018/\">資訊之芽算法班第13週KMP</a></li>\n<li><a href=\"http://web.ntnu.edu.tw/~algo/StringSearching.html#2\">演算法筆記 String Searching</a><br>模板題：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1239\">Uva-10298</a><br>這題先做完Failure Function後直接判斷其size-Failure Function最後一個的值的結果是否整除原本的size。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tF<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstring str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> str <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token operator\">!=</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> det<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>det<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2>模板題：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=2470\">Uva-11475</a><br>參考資料：</li>\n<li><a href=\"https://www.csie.ntu.edu.tw/~sprout/algo2018/\">資訊之芽算法班第13週KMP</a></li>\n</ul>\n<p>題序：利用KMP去產生既定字串的最小的回文字串。</p>\n<p>想法：首先把字串倒過來，將它的Failure Function列出來後，利用KMP的方式去尋找失敗值在哪裡，這樣就可以從失敗值的位置倒著輸出即為所求。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token comment\">//#define int long long</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sz<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        F<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> rev<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">,</span>rev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> str1 <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rev<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以這樣寫for(++j;j&lt;l;j++) cout &lt;&lt; rev[j];</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"strstr應用\"><a href=\"#strstr應用\" class=\"headerlink\" title=\"strstr應用\"></a>strstr應用</h2><p>題目：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1620\">Uva-10679</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin <span class=\"token operator\">>></span> cmp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>deter<span class=\"token operator\">=</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deter<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"n\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"y\\n\"</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）\"><a href=\"#紀錄大學競程隊伍我所負責解題的領域（字串-序列-一些雜題）\" class=\"headerlink\" title=\"紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）\"></a>紀錄大學競程隊伍我所負責解題的領域（字串,序列,一些雜題）</h1><p>隊伍網站: <a href=\"https://ntnu-import-magic.github.io/\">Link</a></p>\n<h2 id=\"Failure-Function\"><a href=\"#Failure-Function\" class=\"headerlink\" title=\"Failure Function\"></a>Failure Function</h2><p>參考資料：</p>\n<ul>\n<li><a href=\"https://www.csie.ntu.edu.tw/~sprout/algo2018/\">資訊之芽算法班第13週KMP</a></li>\n<li><a href=\"http://web.ntnu.edu.tw/~algo/StringSearching.html#2\">演算法筆記 String Searching</a><br>模板題：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1239\">Uva-10298</a><br>這題先做完Failure Function後直接判斷其size-Failure Function最後一個的值的結果是否整除原本的size。<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">int</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n\t<span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t\tF<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\tstring str<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> str <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token operator\">!=</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> det<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">[</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>det<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"1\\n\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"KMP\"><a href=\"#KMP\" class=\"headerlink\" title=\"KMP\"></a>KMP</h2>模板題：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&Itemid=8&page=show_problem&problem=2470\">Uva-11475</a><br>參考資料：</li>\n<li><a href=\"https://www.csie.ntu.edu.tw/~sprout/algo2018/\">資訊之芽算法班第13週KMP</a></li>\n</ul>\n<p>題序：利用KMP去產生既定字串的最小的回文字串。</p>\n<p>想法：首先把字串倒過來，將它的Failure Function列出來後，利用KMP的方式去尋找失敗值在哪裡，這樣就可以從失敗值的位置倒著輸出即為所求。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token comment\">//#define int long long</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> F<span class=\"token punctuation\">[</span><span class=\"token number\">1000005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    F<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> sz<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>sz<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        F<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> \n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span>string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">,</span> string<span class=\"token operator\">&amp;</span> rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">failure</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> rev<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">=</span>F<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rev<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> j<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    string str<span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">,</span>rev<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> str1 <span class=\"token operator\">&amp;&amp;</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> l<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        str<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>str1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rev<span class=\"token operator\">=</span>str1<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token function\">KMP</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">-</span>j<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span><span class=\"token comment\">//也可以這樣寫for(++j;j&lt;l;j++) cout &lt;&lt; rev[j];</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"strstr應用\"><a href=\"#strstr應用\" class=\"headerlink\" title=\"strstr應用\"></a>strstr應用</h2><p>題目：<a href=\"https://onlinejudge.org/index.php?option=onlinejudge&page=show_problem&problem=1620\">Uva-10679</a></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">;</span>\n\t\tcin <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">&#123;</span>\n\t\t\tcin <span class=\"token operator\">>></span> cmp<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>deter<span class=\"token operator\">=</span><span class=\"token function\">strstr</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span>cmp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>deter<span class=\"token operator\">==</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"n\\n\"</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"y\\n\"</span><span class=\"token punctuation\">;</span>  \n\t\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"NTHU 10322 PC 費式數列與矩陣快速冪","date":"2019-02-21T06:30:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"  \n題目連結:https://acm.cs.nthu.edu.tw/problem/10322/\n\n一題矩陣快速冪裸題(題目就表明(?)\n\n當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。><\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define jizz ios_base::sync_with_stdio(false) , cin.tie(NULL) , cout.tie(NULL);\n#define pb push_back\n#define po pop_back;\n#define F first\n#define S second\n#define CN cout<<\"\\n\"\n#define m 100000007\nusing namespace std;\ntypedef array<array<int,2>,2> Matrix;\nMatrix operator*(Matrix A , Matrix B)\n{\n    Matrix C;\n    for(int i=0;i<2;i++)\n    {\n        for(int j=0;j<2;j++)\n        {\n            C[i][j]=0;\n            for(int k=0;k<2;k++)\n                C[i][j]=(C[i][j]%m+(A[i][k]%m*B[k][j]%m)%m)%m;\n        }\n    }\n    return C;\n}\nMatrix power(Matrix A,int n)\n{\n    Matrix ans={{{1,0},{0,1}}};\n    while(n)\n    {\n        if(n&1)\n            ans=ans*A;\n        n>>=1;\n        A=A*A;\n    }\n    return ans;\n}\nsigned main()\n{\n    jizz;\n    int num;\n    while(cin >> num || num==0)\n    { \n        if(num==0)\n        {\n            cout << 0 <<\"\\n\";\n            continue;\n        }\n        else if(num==-1)\n            break;\n        else\n        {\n            Matrix A={{{1,1},{1,0}}};\n            Matrix C=power(A,num-1);\n            cout << C[0][0] <<\"\\n\";\n        }\n    }\n    return 0;\n}\n```","source":"_posts/[NTHU]10322 PC 費式數列與矩陣快速冪.md","raw":"---\ntitle: NTHU 10322 PC 費式數列與矩陣快速冪\ndate: 2019-02-21 14:30:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- NTHU\n- 矩陣快速冪\n- 數論\n---  \n題目連結:https://acm.cs.nthu.edu.tw/problem/10322/\n\n一題矩陣快速冪裸題(題目就表明(?)\n\n當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。><\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define jizz ios_base::sync_with_stdio(false) , cin.tie(NULL) , cout.tie(NULL);\n#define pb push_back\n#define po pop_back;\n#define F first\n#define S second\n#define CN cout<<\"\\n\"\n#define m 100000007\nusing namespace std;\ntypedef array<array<int,2>,2> Matrix;\nMatrix operator*(Matrix A , Matrix B)\n{\n    Matrix C;\n    for(int i=0;i<2;i++)\n    {\n        for(int j=0;j<2;j++)\n        {\n            C[i][j]=0;\n            for(int k=0;k<2;k++)\n                C[i][j]=(C[i][j]%m+(A[i][k]%m*B[k][j]%m)%m)%m;\n        }\n    }\n    return C;\n}\nMatrix power(Matrix A,int n)\n{\n    Matrix ans={{{1,0},{0,1}}};\n    while(n)\n    {\n        if(n&1)\n            ans=ans*A;\n        n>>=1;\n        A=A*A;\n    }\n    return ans;\n}\nsigned main()\n{\n    jizz;\n    int num;\n    while(cin >> num || num==0)\n    { \n        if(num==0)\n        {\n            cout << 0 <<\"\\n\";\n            continue;\n        }\n        else if(num==-1)\n            break;\n        else\n        {\n            Matrix A={{{1,1},{1,0}}};\n            Matrix C=power(A,num-1);\n            cout << C[0][0] <<\"\\n\";\n        }\n    }\n    return 0;\n}\n```","slug":"[NTHU]10322 PC 費式數列與矩陣快速冪","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9de000lcdg6bexccil0","content":"<p>題目連結:<a href=\"https://acm.cs.nthu.edu.tw/problem/10322/\">https://acm.cs.nthu.edu.tw/problem/10322/</a></p>\n<p>一題矩陣快速冪裸題(題目就表明(?)</p>\n<p>當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。&gt;&lt;</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pb push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">po pop_back<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CN cout<span class=\"token operator\">&lt;&lt;</span></span><span class=\"token string\">\"\\n\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">m <span class=\"token number\">100000007</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> array<span class=\"token operator\">&lt;</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">></span> Matrix<span class=\"token punctuation\">;</span>\nMatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Matrix A <span class=\"token punctuation\">,</span> Matrix B<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Matrix C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token operator\">*</span>B<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nMatrix <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>Matrix A<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Matrix ans<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n        n<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        A<span class=\"token operator\">=</span>A<span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    jizz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> num <span class=\"token operator\">||</span> num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Matrix A<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            Matrix C<span class=\"token operator\">=</span><span class=\"token function\">power</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> C<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>題目連結:<a href=\"https://acm.cs.nthu.edu.tw/problem/10322/\">https://acm.cs.nthu.edu.tw/problem/10322/</a></p>\n<p>一題矩陣快速冪裸題(題目就表明(?)</p>\n<p>當然是好好地把矩陣的乘法定義定好，注意一些0/1擺放的細節，把其套上快速冪的模板，就大功告成了。&gt;&lt;</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">pb push_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">po pop_back<span class=\"token punctuation\">;</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">CN cout<span class=\"token operator\">&lt;&lt;</span></span><span class=\"token string\">\"\\n\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">m <span class=\"token number\">100000007</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> array<span class=\"token operator\">&lt;</span>array<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token operator\">></span> Matrix<span class=\"token punctuation\">;</span>\nMatrix <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Matrix A <span class=\"token punctuation\">,</span> Matrix B<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Matrix C<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n                C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>C<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token operator\">*</span>B<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span>m<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nMatrix <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>Matrix A<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    Matrix ans<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n        n<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        A<span class=\"token operator\">=</span>A<span class=\"token operator\">*</span>A<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    jizz<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> num <span class=\"token operator\">||</span> num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span> \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">&#123;</span>\n            Matrix A<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n            Matrix C<span class=\"token operator\">=</span><span class=\"token function\">power</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> C<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Sprout OJ RMQ練習","date":"2018-12-26T13:58:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"題目來源:https://neoj.sprout.tw/problem/80/\n參考: https://slides.com/sylveon/2017wds#/2\n```c=\n#pragma GCC optimize (\"O2\")\n#include<bits/stdc++.h>\n//#define int long long\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\n#define id1(X) (X)*2+1 \n#define id2(X) (X)*2+2\n#define F first\n#define S second\n#define max_n 1000000\nusing namespace std;\nint str[max_n+5];\nstruct node\n{\n\tint val;\t\n}seg[4*max_n+5];\nnode pull(const node &x, const node &y)\n{\n\tnode tmp;\n\ttmp.val=min(x.val, y.val);\n\treturn tmp;\n}\nvoid build(int l,int r, int id)\n{\n\t//cout << l << \" \" << r << \"\\n\";\n\tif(l==r) \n\t{\n\t\tseg[id].val=str[l];\n\t\treturn;\n\t}\n\tint m=(l+r)/2;\n\tbuild(l,m,id1(id));\n\tbuild(m+1,r,id2(id));\n\tseg[id]=pull(seg[id1(id)],seg[id2(id)]);\n}\nnode query(int l, int r, int L, int R, int id)\n{\n\t//cout << l << \" \" << r << \" \" << L << \" \" << R << \" \" << id <<\"\\n\";\n\tif(l==L && r==R) return seg[id];\n\tint M=(L+R)/2;\n\tif(r<=M) return query(l,r,L,M,id1(id));\n\tif(M<l) return query(l,r,M+1,R,id2(id));\n\treturn pull(\n\t\tquery(l,M,L,M,id1(id)),\n\t\tquery(M+1,r,M+1,R,id2(id))\n\t);\n}\nvoid modify(int i, int v, int L, int R, int id)\n{\n\tif(L==R)\n\t{\n\t\tseg[id].val=v;\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tint M=(L+R)/2;\n\t\tif(i<=M) modify(i,v,L,M,id1(id));\n\t\telse if(i>M) modify(i,v,M+1,R,id2(id));\n\t}\n\tseg[id]=pull(seg[id1(id)],seg[id2(id)]);\n}\nsigned main()\n{\n\tjizz;\n\tint T,N,de,x,y;\n\tcin >> T >> N;\n\tfor(int i=0;i<N;i++) cin >> str[i];\n\tbuild(0,N-1,0);\n\twhile(T--)\n\t{\n\t\tcin >> de >> x >> y;\n\t\tif(de&1) cout << query(x,y,0,N-1,0).val << '\\n';\n\t\telse modify(x,y,0,N-1,0);\n\t}\n\treturn 0;\n}\n```","source":"_posts/[Sprout OJ] No.80 RMQ練習.md","raw":"---\ntitle: Sprout OJ RMQ練習\ndate: 2018-12-26 21:58:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 資料結構\ntags: \n- SPOJ\n- 線段樹\n---\n題目來源:https://neoj.sprout.tw/problem/80/\n參考: https://slides.com/sylveon/2017wds#/2\n```c=\n#pragma GCC optimize (\"O2\")\n#include<bits/stdc++.h>\n//#define int long long\n#define jizz ios_base::sync_with_stdio(false),cin.tie(NULL)\n#define id1(X) (X)*2+1 \n#define id2(X) (X)*2+2\n#define F first\n#define S second\n#define max_n 1000000\nusing namespace std;\nint str[max_n+5];\nstruct node\n{\n\tint val;\t\n}seg[4*max_n+5];\nnode pull(const node &x, const node &y)\n{\n\tnode tmp;\n\ttmp.val=min(x.val, y.val);\n\treturn tmp;\n}\nvoid build(int l,int r, int id)\n{\n\t//cout << l << \" \" << r << \"\\n\";\n\tif(l==r) \n\t{\n\t\tseg[id].val=str[l];\n\t\treturn;\n\t}\n\tint m=(l+r)/2;\n\tbuild(l,m,id1(id));\n\tbuild(m+1,r,id2(id));\n\tseg[id]=pull(seg[id1(id)],seg[id2(id)]);\n}\nnode query(int l, int r, int L, int R, int id)\n{\n\t//cout << l << \" \" << r << \" \" << L << \" \" << R << \" \" << id <<\"\\n\";\n\tif(l==L && r==R) return seg[id];\n\tint M=(L+R)/2;\n\tif(r<=M) return query(l,r,L,M,id1(id));\n\tif(M<l) return query(l,r,M+1,R,id2(id));\n\treturn pull(\n\t\tquery(l,M,L,M,id1(id)),\n\t\tquery(M+1,r,M+1,R,id2(id))\n\t);\n}\nvoid modify(int i, int v, int L, int R, int id)\n{\n\tif(L==R)\n\t{\n\t\tseg[id].val=v;\n\t\treturn;\n\t}\n\telse\n\t{\n\t\tint M=(L+R)/2;\n\t\tif(i<=M) modify(i,v,L,M,id1(id));\n\t\telse if(i>M) modify(i,v,M+1,R,id2(id));\n\t}\n\tseg[id]=pull(seg[id1(id)],seg[id2(id)]);\n}\nsigned main()\n{\n\tjizz;\n\tint T,N,de,x,y;\n\tcin >> T >> N;\n\tfor(int i=0;i<N;i++) cin >> str[i];\n\tbuild(0,N-1,0);\n\twhile(T--)\n\t{\n\t\tcin >> de >> x >> y;\n\t\tif(de&1) cout << query(x,y,0,N-1,0).val << '\\n';\n\t\telse modify(x,y,0,N-1,0);\n\t}\n\treturn 0;\n}\n```","slug":"[Sprout OJ] No.80 RMQ練習","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9df000ncdg6htos1y00","content":"<p>題目來源:<a href=\"https://neoj.sprout.tw/problem/80/\">https://neoj.sprout.tw/problem/80/</a><br>參考: <a href=\"https://slides.com/sylveon/2017wds#/2\">https://slides.com/sylveon/2017wds#/2</a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span> <span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token comment\">//#define int long long</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">max_n <span class=\"token number\">1000000</span></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> str<span class=\"token punctuation\">[</span>max_n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>seg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>max_n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnode <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tnode tmp<span class=\"token punctuation\">;</span>\n\ttmp<span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; \"\\n\";</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; \" \" &lt;&lt; L &lt;&lt; \" \" &lt;&lt; R &lt;&lt; \" \" &lt;&lt; id &lt;&lt;\"\\n\";</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>L <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">query</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">)</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>M<span class=\"token punctuation\">)</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tjizz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>de<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> T <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin <span class=\"token operator\">>></span> de <span class=\"token operator\">>></span> x <span class=\"token operator\">>></span> y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>de<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>題目來源:<a href=\"https://neoj.sprout.tw/problem/80/\">https://neoj.sprout.tw/problem/80/</a><br>參考: <a href=\"https://slides.com/sylveon/2017wds#/2\">https://slides.com/sylveon/2017wds#/2</a></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span> <span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token comment\">//#define int long long</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">jizz ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span>false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">2</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">F first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">S second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">max_n <span class=\"token number\">1000000</span></span></span>\nusing namespace std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> str<span class=\"token punctuation\">[</span>max_n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">node</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">int</span> val<span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">&#125;</span>seg<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token operator\">*</span>max_n<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nnode <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> node <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tnode tmp<span class=\"token punctuation\">;</span>\n\ttmp<span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; \"\\n\";</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>r<span class=\"token punctuation\">)</span> \n\t<span class=\"token punctuation\">&#123;</span>\n\t\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span>str<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">int</span> m<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nnode <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//cout &lt;&lt; l &lt;&lt; \" \" &lt;&lt; r &lt;&lt; \" \" &lt;&lt; L &lt;&lt; \" \" &lt;&lt; R &lt;&lt; \" \" &lt;&lt; id &lt;&lt;\"\\n\";</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">==</span>L <span class=\"token operator\">&amp;&amp;</span> r<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> seg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">&lt;</span>l<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>\n\t\t<span class=\"token function\">query</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t<span class=\"token function\">query</span><span class=\"token punctuation\">(</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> v<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> L<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> R<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">==</span>R<span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token operator\">=</span>v<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">else</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token keyword\">int</span> M<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>L<span class=\"token operator\">+</span>R<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>M<span class=\"token punctuation\">)</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>L<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>M<span class=\"token punctuation\">)</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">,</span>M<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>R<span class=\"token punctuation\">,</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\tseg<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">pull</span><span class=\"token punctuation\">(</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id1</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>seg<span class=\"token punctuation\">[</span><span class=\"token function\">id2</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n\tjizz<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>N<span class=\"token punctuation\">,</span>de<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">;</span>\n\tcin <span class=\"token operator\">>></span> T <span class=\"token operator\">>></span> N<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">&#123;</span>\n\t\tcin <span class=\"token operator\">>></span> de <span class=\"token operator\">>></span> x <span class=\"token operator\">>></span> y<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>de<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>val <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>N<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"SOJ 43 Lacy 路網","date":"2018-08-16T07:46:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n題目URL:https://pc2.tfcis.org/dev/index.php/problem/view/43/\n\nMST的裸題，簡單來說只要把operator的比較換一下，就變最大生成樹了，然後順便善用dsu並且小複習。(清大營隊進修ing)\n\n```cpp=\n#pragma GCC osptimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define IOS ios_base::sync_with_stdio(false)\n#define TI cin.tie(NULL)\nusing namespace std;\nconst int MI=100005;\nint num,a,b,w;\nstruct edge{\n    int from,to,weight;\n};\nbool operator < (edge &a,edge &b)\n{\n    return a.weight > b.weight;\n}\nvector<edge> v;\nint vnum,vedge;\nstruct disjointset{\n    int f[MI],rank[MI];\n    void init(int N)\n    {\n        for(int i=0;i<=N;i++)\n        {\n            f[i]=i;\n            rank[i]=0;\n        } \n    }\n    int find(int val)\n    {\n        if(f[val]==val) return val;\n        return f[val]=find(f[val]);\n    }\n    bool same(int a,int b)\n    {\n        return find(a)==find(b);\n    }\n    void Union(int l,int r)\n    {\n        if(!same(l,r))\n        {\n            if(rank[l]<rank[r]) swap(l,r);\n            f[f[r]]=f[l];\n            rank[l]++;\n        }\n    }\n};\nint kruskal(void)\n{\n    sort(v.begin(),v.end());\n    struct disjointset dsu;\n    dsu.init(vnum);\n    int total=0;\n    for(int i=0,cou=0; i<vedge && cou<vnum ;i++)\n    {\n        int x=v[i].from,y=v[i].to;\n        //cout << \"x=\" <<x << \"y=\" << y <<endl;\n        if(!dsu.same(x,y))\n        {  \n            total+=v[i].weight;\n            cou++;\n            dsu.Union(x,y);\n        }\n    }\n    //cout <<\"total=\"<<total <<endl;\n    return total;\n}\nmain()\n{\n    IOS;TI;\n    cin >> num;\n    while(num--)\n    {\n        cin >> vnum >> vedge;\n        struct edge cpy;\n        for(int i=0;i<vedge;i++)\n        {\n            cin >> a >> b >> w;\n            cpy.from=a;\n            cpy.to=b;\n            cpy.weight=w;\n            v.push_back(cpy);\n        }\n    int ans=kruskal();\n    cout << ans << endl;\n    while(!v.empty())\n        v.pop_back();\n    }\n    return 0;\n}\n```","source":"_posts/[SOJ] 43 Lacy 路網.md","raw":"---\ntitle: SOJ 43 Lacy 路網\ndate: 2018-08-16 15:46:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- SOJ\n- MST\n- 並查集\n---\n\n題目URL:https://pc2.tfcis.org/dev/index.php/problem/view/43/\n\nMST的裸題，簡單來說只要把operator的比較換一下，就變最大生成樹了，然後順便善用dsu並且小複習。(清大營隊進修ing)\n\n```cpp=\n#pragma GCC osptimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define IOS ios_base::sync_with_stdio(false)\n#define TI cin.tie(NULL)\nusing namespace std;\nconst int MI=100005;\nint num,a,b,w;\nstruct edge{\n    int from,to,weight;\n};\nbool operator < (edge &a,edge &b)\n{\n    return a.weight > b.weight;\n}\nvector<edge> v;\nint vnum,vedge;\nstruct disjointset{\n    int f[MI],rank[MI];\n    void init(int N)\n    {\n        for(int i=0;i<=N;i++)\n        {\n            f[i]=i;\n            rank[i]=0;\n        } \n    }\n    int find(int val)\n    {\n        if(f[val]==val) return val;\n        return f[val]=find(f[val]);\n    }\n    bool same(int a,int b)\n    {\n        return find(a)==find(b);\n    }\n    void Union(int l,int r)\n    {\n        if(!same(l,r))\n        {\n            if(rank[l]<rank[r]) swap(l,r);\n            f[f[r]]=f[l];\n            rank[l]++;\n        }\n    }\n};\nint kruskal(void)\n{\n    sort(v.begin(),v.end());\n    struct disjointset dsu;\n    dsu.init(vnum);\n    int total=0;\n    for(int i=0,cou=0; i<vedge && cou<vnum ;i++)\n    {\n        int x=v[i].from,y=v[i].to;\n        //cout << \"x=\" <<x << \"y=\" << y <<endl;\n        if(!dsu.same(x,y))\n        {  \n            total+=v[i].weight;\n            cou++;\n            dsu.Union(x,y);\n        }\n    }\n    //cout <<\"total=\"<<total <<endl;\n    return total;\n}\nmain()\n{\n    IOS;TI;\n    cin >> num;\n    while(num--)\n    {\n        cin >> vnum >> vedge;\n        struct edge cpy;\n        for(int i=0;i<vedge;i++)\n        {\n            cin >> a >> b >> w;\n            cpy.from=a;\n            cpy.to=b;\n            cpy.weight=w;\n            v.push_back(cpy);\n        }\n    int ans=kruskal();\n    cout << ans << endl;\n    while(!v.empty())\n        v.pop_back();\n    }\n    return 0;\n}\n```","slug":"[SOJ] 43 Lacy 路網","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dg000scdg6folqee5l","content":"<p>題目URL:<a href=\"https://pc2.tfcis.org/dev/index.php/problem/view/43/\">https://pc2.tfcis.org/dev/index.php/problem/view/43/</a></p>\n<p>MST的裸題，簡單來說只要把operator的比較換一下，就變最大生成樹了，然後順便善用dsu並且小複習。(清大營隊進修ing)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">osptimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TI cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MI<span class=\"token operator\">=</span><span class=\"token number\">100005</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>weight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>edge <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>edge <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nvector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vnum<span class=\"token punctuation\">,</span>vedge<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>MI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rank<span class=\"token punctuation\">[</span>MI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>rank<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> dsu<span class=\"token punctuation\">;</span>\n    dsu<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>vnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> total<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cou<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>vedge <span class=\"token operator\">&amp;&amp;</span> cou<span class=\"token operator\">&lt;</span>vnum <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//cout &lt;&lt; \"x=\" &lt;&lt;x &lt;&lt; \"y=\" &lt;&lt; y &lt;&lt;endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dsu<span class=\"token punctuation\">.</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>  \n            total<span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            cou<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            dsu<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//cout &lt;&lt;\"total=\"&lt;&lt;total &lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TI<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> vnum <span class=\"token operator\">>></span> vedge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span> cpy<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>vedge<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>from<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>to<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>題目URL:<a href=\"https://pc2.tfcis.org/dev/index.php/problem/view/43/\">https://pc2.tfcis.org/dev/index.php/problem/view/43/</a></p>\n<p>MST的裸題，簡單來說只要把operator的比較換一下，就變最大生成樹了，然後順便善用dsu並且小複習。(清大營隊進修ing)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">osptimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TI cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> MI<span class=\"token operator\">=</span><span class=\"token number\">100005</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> from<span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>weight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span> <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>edge <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span>edge <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">.</span>weight <span class=\"token operator\">></span> b<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nvector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span> v<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vnum<span class=\"token punctuation\">,</span>vedge<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">[</span>MI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>rank<span class=\"token punctuation\">[</span>MI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>N<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            f<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span> \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>val<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> val<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">same</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">Union</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>rank<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>rank<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            f<span class=\"token punctuation\">[</span>f<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>f<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            rank<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">disjointset</span> dsu<span class=\"token punctuation\">;</span>\n    dsu<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>vnum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> total<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>cou<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>vedge <span class=\"token operator\">&amp;&amp;</span> cou<span class=\"token operator\">&lt;</span>vnum <span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>y<span class=\"token operator\">=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">//cout &lt;&lt; \"x=\" &lt;&lt;x &lt;&lt; \"y=\" &lt;&lt; y &lt;&lt;endl;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dsu<span class=\"token punctuation\">.</span><span class=\"token function\">same</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>  \n            total<span class=\"token operator\">+=</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n            cou<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            dsu<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//cout &lt;&lt;\"total=\"&lt;&lt;total &lt;&lt;endl;</span>\n    <span class=\"token keyword\">return</span> total<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TI<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> vnum <span class=\"token operator\">>></span> vedge<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">edge</span> cpy<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>vedge<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>from<span class=\"token operator\">=</span>a<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>to<span class=\"token operator\">=</span>b<span class=\"token punctuation\">;</span>\n            cpy<span class=\"token punctuation\">.</span>weight<span class=\"token operator\">=</span>w<span class=\"token punctuation\">;</span>\n            v<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>cpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> ans<span class=\"token operator\">=</span><span class=\"token function\">kruskal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        v<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"SOJ 41 大顆壽司","date":"2018-08-16T02:12:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n題目URL:https://pc2.tfcis.org/dev/index.php/problem/view/41/\n來到了清大的營隊，回顧一下最短路徑的裸題~\ndebug到死才發現我是垃圾~(因為我忘了把adj clear掉)\n\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define weight first\n#define index second\n#define IOS ios_base::sync_with_stdio(false)\n#define TI cin.tie(NULL)\nusing namespace std;\nusing edge=pair<int,int>;\nconst int INF=2147483647;\nint vnum,dist[400005];\nint num,M,st,t,a,b,w;\nvector<edge> adj[400005];\nvoid dijkstra(int s)\n{\n    vector<bool> vis(vnum,false);\n    fill(dist,dist+vnum+5,INF);\n    dist[s]=0;\n    priority_queue<edge,vector<edge>,greater<edge>> pq;\n    pq.emplace(0,s);\n    while(!pq.empty())\n    {\n        int u=pq.top().index;\n        pq.pop();\n        if(vis[u]) continue;\n        vis[u]=true;\n        for(auto v:adj[u])\n        {\n            if(dist[v.index] > dist[u]+v.weight)\n            {\n                dist[v.index]=dist[u]+v.weight;\n                pq.emplace(dist[v.index],v.index);\n            }\n        }\n    }\n    //for(int i=1;i<=vnum;i++)\n    // cout << \"dist[\" << i  << \"]\" << dist[i] <<endl;\n}\nsigned main()\n{\n    IOS;TI;\n    cin >> num;\n    for(int k=0;k<num;k++)\n    {\n        cin >> vnum >> M >> st >> t;\n        for(int i=0;i<M;i++)\n        {\n            cin >> a >> b >> w;\n            adj[a].emplace_back(w,b);//a to b\n            adj[b].emplace_back(w,a);//b to a\n        }\n        dijkstra(st);\n        cout << dist[t] << endl;\n        for(int i=0;i<=vnum;i++)\n            adj[i].clear();\n    }\n    return 0;\n}\n```","source":"_posts/[SOJ] 41 大顆壽司.md","raw":"---\ntitle: SOJ 41 大顆壽司\ndate: 2018-08-16 10:12:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- SOJ\n- djijkstra\n- 最短路徑\n---\n\n題目URL:https://pc2.tfcis.org/dev/index.php/problem/view/41/\n來到了清大的營隊，回顧一下最短路徑的裸題~\ndebug到死才發現我是垃圾~(因為我忘了把adj clear掉)\n\n```cpp=\n#pragma GCC optimize(\"O2\")\n#include<bits/stdc++.h>\n#define int long long int\n#define weight first\n#define index second\n#define IOS ios_base::sync_with_stdio(false)\n#define TI cin.tie(NULL)\nusing namespace std;\nusing edge=pair<int,int>;\nconst int INF=2147483647;\nint vnum,dist[400005];\nint num,M,st,t,a,b,w;\nvector<edge> adj[400005];\nvoid dijkstra(int s)\n{\n    vector<bool> vis(vnum,false);\n    fill(dist,dist+vnum+5,INF);\n    dist[s]=0;\n    priority_queue<edge,vector<edge>,greater<edge>> pq;\n    pq.emplace(0,s);\n    while(!pq.empty())\n    {\n        int u=pq.top().index;\n        pq.pop();\n        if(vis[u]) continue;\n        vis[u]=true;\n        for(auto v:adj[u])\n        {\n            if(dist[v.index] > dist[u]+v.weight)\n            {\n                dist[v.index]=dist[u]+v.weight;\n                pq.emplace(dist[v.index],v.index);\n            }\n        }\n    }\n    //for(int i=1;i<=vnum;i++)\n    // cout << \"dist[\" << i  << \"]\" << dist[i] <<endl;\n}\nsigned main()\n{\n    IOS;TI;\n    cin >> num;\n    for(int k=0;k<num;k++)\n    {\n        cin >> vnum >> M >> st >> t;\n        for(int i=0;i<M;i++)\n        {\n            cin >> a >> b >> w;\n            adj[a].emplace_back(w,b);//a to b\n            adj[b].emplace_back(w,a);//b to a\n        }\n        dijkstra(st);\n        cout << dist[t] << endl;\n        for(int i=0;i<=vnum;i++)\n            adj[i].clear();\n    }\n    return 0;\n}\n```","slug":"[SOJ] 41 大顆壽司","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dh000ucdg609baa0gg","content":"<p>題目URL:<a href=\"https://pc2.tfcis.org/dev/index.php/problem/view/41/\">https://pc2.tfcis.org/dev/index.php/problem/view/41/</a><br>來到了清大的營隊，回顧一下最短路徑的裸題~<br>debug到死才發現我是垃圾~(因為我忘了把adj clear掉)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">weight first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">index second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TI cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> edge<span class=\"token operator\">=</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF<span class=\"token operator\">=</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vnum<span class=\"token punctuation\">,</span>dist<span class=\"token punctuation\">[</span><span class=\"token number\">400005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span> adj<span class=\"token punctuation\">[</span><span class=\"token number\">400005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>vnum<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">,</span>dist<span class=\"token operator\">+</span>vnum<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dist<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    priority_queue<span class=\"token operator\">&lt;</span>edge<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>greater<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span>\n    pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token operator\">=</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        vis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//for(int i=1;i&lt;=vnum;i++)</span>\n    <span class=\"token comment\">// cout &lt;&lt; \"dist[\" &lt;&lt; i  &lt;&lt; \"]\" &lt;&lt; dist[i] &lt;&lt;endl;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TI<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> vnum <span class=\"token operator\">>></span> M <span class=\"token operator\">>></span> st <span class=\"token operator\">>></span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n            adj<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a to b</span>\n            adj<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//b to a</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>vnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            adj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{}},"excerpt":"","more":"<p>題目URL:<a href=\"https://pc2.tfcis.org/dev/index.php/problem/view/41/\">https://pc2.tfcis.org/dev/index.php/problem/view/41/</a><br>來到了清大的營隊，回顧一下最短路徑的裸題~<br>debug到死才發現我是垃圾~(因為我忘了把adj clear掉)</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"O2\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">weight first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">index second</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TI cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> edge<span class=\"token operator\">=</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> INF<span class=\"token operator\">=</span><span class=\"token number\">2147483647</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> vnum<span class=\"token punctuation\">,</span>dist<span class=\"token punctuation\">[</span><span class=\"token number\">400005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span>M<span class=\"token punctuation\">,</span>st<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span> adj<span class=\"token punctuation\">[</span><span class=\"token number\">400005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token operator\">></span> <span class=\"token function\">vis</span><span class=\"token punctuation\">(</span>vnum<span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fill</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">,</span>dist<span class=\"token operator\">+</span>vnum<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span>INF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dist<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    priority_queue<span class=\"token operator\">&lt;</span>edge<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>greater<span class=\"token operator\">&lt;</span>edge<span class=\"token operator\">>></span> pq<span class=\"token punctuation\">;</span>\n    pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> u<span class=\"token operator\">=</span>pq<span class=\"token punctuation\">.</span><span class=\"token function\">top</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span>\n        pq<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>vis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        vis<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> v<span class=\"token operator\">:</span>adj<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">&#123;</span>\n                dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>dist<span class=\"token punctuation\">[</span>u<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span>v<span class=\"token punctuation\">.</span>weight<span class=\"token punctuation\">;</span>\n                pq<span class=\"token punctuation\">.</span><span class=\"token function\">emplace</span><span class=\"token punctuation\">(</span>dist<span class=\"token punctuation\">[</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//for(int i=1;i&lt;=vnum;i++)</span>\n    <span class=\"token comment\">// cout &lt;&lt; \"dist[\" &lt;&lt; i  &lt;&lt; \"]\" &lt;&lt; dist[i] &lt;&lt;endl;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TI<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>num<span class=\"token punctuation\">;</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> vnum <span class=\"token operator\">>></span> M <span class=\"token operator\">>></span> st <span class=\"token operator\">>></span> t<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b <span class=\"token operator\">>></span> w<span class=\"token punctuation\">;</span>\n            adj<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a to b</span>\n            adj<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">emplace_back</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//b to a</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token function\">dijkstra</span><span class=\"token punctuation\">(</span>st<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> dist<span class=\"token punctuation\">[</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>vnum<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            adj<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"TIOJ 1410. Comiket","date":"2018-12-22T04:20:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n\n題目來源：https://tioj.ck.tp.edu.tw/problems/1410\n我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。\n\nPS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m\n```cpp=\n#pragma gcc optimize(o2)\n#include<bits/stdc++.h>\n#define int long long int \n#define IOS ios_base::sync_with_stdio(false)\n#define TO cin.tie(NULL)\nusing namespace std;\nint str[100005];\nsigned main()\n{\n    IOS;TO;\n    int range=0,a,b,n,maxu,ans;\n    while(cin >> n)\n    {\n        ans=0;maxu=0;\n        while(n--)\n        {\n            cin >> a >> b;\n            str[a]++;\n            b+=1;\n            str[b]--;\n            range=max(range,b);\n        }\n        for(int i=0;i<=range;i++)\n        {\n            maxu+=str[i];\n            ans=max(maxu,ans);\n        }\n        cout << ans <<endl;\n    }\n    return 0;\n}\n```\n","source":"_posts/[TIOJ] 1410. Comiket.md","raw":"---\ntitle: TIOJ 1410. Comiket\ndate: 2018-12-22 12:20:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 演算法\ntags: \n- TIOJ\n- 時間標記\n- 前綴和\n---\n\n\n題目來源：https://tioj.ck.tp.edu.tw/problems/1410\n我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。\n\nPS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m\n```cpp=\n#pragma gcc optimize(o2)\n#include<bits/stdc++.h>\n#define int long long int \n#define IOS ios_base::sync_with_stdio(false)\n#define TO cin.tie(NULL)\nusing namespace std;\nint str[100005];\nsigned main()\n{\n    IOS;TO;\n    int range=0,a,b,n,maxu,ans;\n    while(cin >> n)\n    {\n        ans=0;maxu=0;\n        while(n--)\n        {\n            cin >> a >> b;\n            str[a]++;\n            b+=1;\n            str[b]--;\n            range=max(range,b);\n        }\n        for(int i=0;i<=range;i++)\n        {\n            maxu+=str[i];\n            ans=max(maxu,ans);\n        }\n        cout << ans <<endl;\n    }\n    return 0;\n}\n```\n","slug":"[TIOJ] 1410. Comiket","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dj000ycdg61fun2dzq","content":"<p>題目來源：<a href=\"https://tioj.ck.tp.edu.tw/problems/1410\">https://tioj.ck.tp.edu.tw/problems/1410</a><br>我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。</p>\n<p>PS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">gcc <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TO cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TO<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> range<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>maxu<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>maxu<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n            str<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            str<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            range<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>range<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            maxu<span class=\"token operator\">+=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxu<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{}},"excerpt":"","more":"<p>題目來源：<a href=\"https://tioj.ck.tp.edu.tw/problems/1410\">https://tioj.ck.tp.edu.tw/problems/1410</a><br>我的想法很直觀，就是用array儲存入和出的人(記得出的時間點也算，所以要加1)，然後掃過去紀錄時間軸的max值。</p>\n<p>PS:我最後發現我這樣寫不管是時間上還是空間上都很爛，所以我去看了幾位大神的寫法才發現這題可以用離散化或是用map揍掉 m(_ _)m</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">gcc <span class=\"token function\">optimize</span><span class=\"token punctuation\">(</span>o2<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">IOS ios_base<span class=\"token operator\">::</span><span class=\"token function\">sync_with_stdio</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">TO cin<span class=\"token punctuation\">.</span><span class=\"token function\">tie</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    IOS<span class=\"token punctuation\">;</span>TO<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> range<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>maxu<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> n<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        ans<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>maxu<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n            str<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            b<span class=\"token operator\">+=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            str<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            range<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>range<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            maxu<span class=\"token operator\">+=</span>str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            ans<span class=\"token operator\">=</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxu<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> ans <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"利用Hexo架出第一個Blog","date":"2020-10-10T21:07:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n\n我之前都是用google的Blogger，如今我想架出自由度高的Blog（~~好啦，就是想要很油很宅的Blog啦~~），於是就被我[學長](https://theriseofdavid.github.io/)推坑用Hexo。\n\n[關於Hexo](https://hexo.io/zh-tw/)\n\n## 美中不足之處\n\n我用的themes是Diaspora(~~一個很適合放很多油圖的themes~~)，但是有些小缺陷如下：\n\n1. Markdown的**語法行號**和**粗體字**無法好好的顯示。\n2. hitokoto(一言)需要手動去```diaspora.js```自行調整，首先要對javascript的string用法要熟悉。\n3. 如果是繁體字使用者，需要去很多地方改成繁體字-> ```themes/diaspora/layout/```\n\n### 解決方法如下\n\n1. * **行號不出現的問題** -> 到 ```source/css/diaspora.css``` 裡把 ```.content .gutter {display:none;}``` 改成 ```.content .gutter {display:table;}```\n   * **無法粗體字**->```source/css/diaspora.css```裡把```.content strong {font-weight:500;}```刪掉。\n2. * **hitokoto** -> 直接去```source/js/diaspora.js```裡改他的string。\n\n\n## 有關Diaspora的套用\n\n相信我，沒有什麼比看原作的流程更詳細的。\n\n[Diaspora連結](https://github.com/Fechin/hexo-theme-diaspora)\n\n\n## 有關架網站的總過程\n\n我大多是看這篇學的 -> [如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n\n如果想把 ```favicon``` 跟 ```logo``` 換成自己的話，我個人是用[這個網站](http://www.akuziti.com/)生成自己想要的字體圖檔，然後再去 ```themes/diaspora/source/css/diaspora.css``` 把 ```.image-logo``` 的px改成自己所需的，但理論上 ```favicon``` 64px就行了，logo則是要去css檔裡修改（看你的logo多長啦）。\n\n還有，如果想在每一篇文章都放圖片的話，那就在```_posts```的```md```檔裡的```yaml```部份加上```cover: /img/....jpg```\n\n舉例：\n```yml=\n---\ntitle: SOJ 43 Lacy 路網\ndate: 2018-08-16 15:46:00\ncategories: 演算法\nwelcome_cover: false\ncover: /img/SOJ43.jpg\ntags: \n- SOJ\n- MST\n- 並查集\n---\n```\n\n如果想要讓首頁圖片跟著分類一起片換的話（也就是當那篇文章是第一個時，以那一篇cover為當前封面）\n\n那就把```themes/_config.yml```裡的```welcome_cover: .../```給註記掉```#welcome_cover: .../```\n\n另外，記得每個```md```的```yaml```的```title```部份，名字絕對不要有```[ ]```符號，不然會出錯。\n## 如何將你的 Hexo + Github Pages\n\n我是看這篇的。\n\n[使用 GitHub Pages + Hexo 來架設個人部落格](https://ed521.github.io/2019/07/hexo-install/)\n\n**但切記：我犯了一個重大的錯誤，就是建repo時一定要```<username>.github.io```，我就是因為取錯repo的名字導致我的網站爛掉。**\n\n## 當你要```npm install hexo-deployer-git --save```時吃了Warning\n\n這篇一定可以幫助到你。\n\n[為什麼npminstall的時候會顯示嚴重漏洞](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/682735/)","source":"_posts/利用Hexo架出第一個Blog.md","raw":"---\ntitle: 利用Hexo架出第一個Blog\ndate: 2020-10-11 05:07:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- Blog\n- 2020\n- Hexo\n---\n\n\n我之前都是用google的Blogger，如今我想架出自由度高的Blog（~~好啦，就是想要很油很宅的Blog啦~~），於是就被我[學長](https://theriseofdavid.github.io/)推坑用Hexo。\n\n[關於Hexo](https://hexo.io/zh-tw/)\n\n## 美中不足之處\n\n我用的themes是Diaspora(~~一個很適合放很多油圖的themes~~)，但是有些小缺陷如下：\n\n1. Markdown的**語法行號**和**粗體字**無法好好的顯示。\n2. hitokoto(一言)需要手動去```diaspora.js```自行調整，首先要對javascript的string用法要熟悉。\n3. 如果是繁體字使用者，需要去很多地方改成繁體字-> ```themes/diaspora/layout/```\n\n### 解決方法如下\n\n1. * **行號不出現的問題** -> 到 ```source/css/diaspora.css``` 裡把 ```.content .gutter {display:none;}``` 改成 ```.content .gutter {display:table;}```\n   * **無法粗體字**->```source/css/diaspora.css```裡把```.content strong {font-weight:500;}```刪掉。\n2. * **hitokoto** -> 直接去```source/js/diaspora.js```裡改他的string。\n\n\n## 有關Diaspora的套用\n\n相信我，沒有什麼比看原作的流程更詳細的。\n\n[Diaspora連結](https://github.com/Fechin/hexo-theme-diaspora)\n\n\n## 有關架網站的總過程\n\n我大多是看這篇學的 -> [如何搭建個人 Blog 使用 Hexo + Gitpage](https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db)\n\n如果想把 ```favicon``` 跟 ```logo``` 換成自己的話，我個人是用[這個網站](http://www.akuziti.com/)生成自己想要的字體圖檔，然後再去 ```themes/diaspora/source/css/diaspora.css``` 把 ```.image-logo``` 的px改成自己所需的，但理論上 ```favicon``` 64px就行了，logo則是要去css檔裡修改（看你的logo多長啦）。\n\n還有，如果想在每一篇文章都放圖片的話，那就在```_posts```的```md```檔裡的```yaml```部份加上```cover: /img/....jpg```\n\n舉例：\n```yml=\n---\ntitle: SOJ 43 Lacy 路網\ndate: 2018-08-16 15:46:00\ncategories: 演算法\nwelcome_cover: false\ncover: /img/SOJ43.jpg\ntags: \n- SOJ\n- MST\n- 並查集\n---\n```\n\n如果想要讓首頁圖片跟著分類一起片換的話（也就是當那篇文章是第一個時，以那一篇cover為當前封面）\n\n那就把```themes/_config.yml```裡的```welcome_cover: .../```給註記掉```#welcome_cover: .../```\n\n另外，記得每個```md```的```yaml```的```title```部份，名字絕對不要有```[ ]```符號，不然會出錯。\n## 如何將你的 Hexo + Github Pages\n\n我是看這篇的。\n\n[使用 GitHub Pages + Hexo 來架設個人部落格](https://ed521.github.io/2019/07/hexo-install/)\n\n**但切記：我犯了一個重大的錯誤，就是建repo時一定要```<username>.github.io```，我就是因為取錯repo的名字導致我的網站爛掉。**\n\n## 當你要```npm install hexo-deployer-git --save```時吃了Warning\n\n這篇一定可以幫助到你。\n\n[為什麼npminstall的時候會顯示嚴重漏洞](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/682735/)","slug":"利用Hexo架出第一個Blog","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dk0010cdg6hry37z20","content":"<p>我之前都是用google的Blogger，如今我想架出自由度高的Blog（<del>好啦，就是想要很油很宅的Blog啦</del>），於是就被我<a href=\"https://theriseofdavid.github.io/\">學長</a>推坑用Hexo。</p>\n<p><a href=\"https://hexo.io/zh-tw/\">關於Hexo</a></p>\n<h2 id=\"美中不足之處\"><a href=\"#美中不足之處\" class=\"headerlink\" title=\"美中不足之處\"></a>美中不足之處</h2><p>我用的themes是Diaspora(<del>一個很適合放很多油圖的themes</del>)，但是有些小缺陷如下：</p>\n<ol>\n<li>Markdown的<strong>語法行號</strong>和<strong>粗體字</strong>無法好好的顯示。</li>\n<li>hitokoto(一言)需要手動去<code>diaspora.js</code>自行調整，首先要對javascript的string用法要熟悉。</li>\n<li>如果是繁體字使用者，需要去很多地方改成繁體字-&gt; <code>themes/diaspora/layout/</code></li>\n</ol>\n<h3 id=\"解決方法如下\"><a href=\"#解決方法如下\" class=\"headerlink\" title=\"解決方法如下\"></a>解決方法如下</h3><ol>\n<li><ul>\n<li><strong>行號不出現的問題</strong> -&gt; 到 <code>source/css/diaspora.css</code> 裡把 <code>.content .gutter &#123;display:none;&#125;</code> 改成 <code>.content .gutter &#123;display:table;&#125;</code></li>\n<li><strong>無法粗體字</strong>-&gt;<code>source/css/diaspora.css</code>裡把<code>.content strong &#123;font-weight:500;&#125;</code>刪掉。</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>hitokoto</strong> -&gt; 直接去<code>source/js/diaspora.js</code>裡改他的string。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"有關Diaspora的套用\"><a href=\"#有關Diaspora的套用\" class=\"headerlink\" title=\"有關Diaspora的套用\"></a>有關Diaspora的套用</h2><p>相信我，沒有什麼比看原作的流程更詳細的。</p>\n<p><a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora連結</a></p>\n<h2 id=\"有關架網站的總過程\"><a href=\"#有關架網站的總過程\" class=\"headerlink\" title=\"有關架網站的總過程\"></a>有關架網站的總過程</h2><p>我大多是看這篇學的 -&gt; <a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a></p>\n<p>如果想把 <code>favicon</code> 跟 <code>logo</code> 換成自己的話，我個人是用<a href=\"http://www.akuziti.com/\">這個網站</a>生成自己想要的字體圖檔，然後再去 <code>themes/diaspora/source/css/diaspora.css</code> 把 <code>.image-logo</code> 的px改成自己所需的，但理論上 <code>favicon</code> 64px就行了，logo則是要去css檔裡修改（看你的logo多長啦）。</p>\n<p>還有，如果想在每一篇文章都放圖片的話，那就在<code>_posts</code>的<code>md</code>檔裡的<code>yaml</code>部份加上<code>cover: /img/....jpg</code></p>\n<p>舉例：</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">---\ntitle: SOJ 43 Lacy 路網\ndate: 2018-08-16 15:46:00\ncategories: 演算法\nwelcome_cover: false\ncover: &#x2F;img&#x2F;SOJ43.jpg\ntags: \n- SOJ\n- MST\n- 並查集\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果想要讓首頁圖片跟著分類一起片換的話（也就是當那篇文章是第一個時，以那一篇cover為當前封面）</p>\n<p>那就把<code>themes/_config.yml</code>裡的<code>welcome_cover: .../</code>給註記掉<code>#welcome_cover: .../</code></p>\n<p>另外，記得每個<code>md</code>的<code>yaml</code>的<code>title</code>部份，名字絕對不要有<code>[ ]</code>符號，不然會出錯。</p>\n<h2 id=\"如何將你的-Hexo-Github-Pages\"><a href=\"#如何將你的-Hexo-Github-Pages\" class=\"headerlink\" title=\"如何將你的 Hexo + Github Pages\"></a>如何將你的 Hexo + Github Pages</h2><p>我是看這篇的。</p>\n<p><a href=\"https://ed521.github.io/2019/07/hexo-install/\">使用 GitHub Pages + Hexo 來架設個人部落格</a></p>\n<p><strong>但切記：我犯了一個重大的錯誤，就是建repo時一定要<code>&lt;username&gt;.github.io</code>，我就是因為取錯repo的名字導致我的網站爛掉。</strong></p>\n<h2 id=\"當你要npm-install-hexo-deployer-git-save時吃了Warning\"><a href=\"#當你要npm-install-hexo-deployer-git-save時吃了Warning\" class=\"headerlink\" title=\"當你要npm install hexo-deployer-git --save時吃了Warning\"></a>當你要<code>npm install hexo-deployer-git --save</code>時吃了Warning</h2><p>這篇一定可以幫助到你。</p>\n<p><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/682735/\">為什麼npminstall的時候會顯示嚴重漏洞</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>我之前都是用google的Blogger，如今我想架出自由度高的Blog（<del>好啦，就是想要很油很宅的Blog啦</del>），於是就被我<a href=\"https://theriseofdavid.github.io/\">學長</a>推坑用Hexo。</p>\n<p><a href=\"https://hexo.io/zh-tw/\">關於Hexo</a></p>\n<h2 id=\"美中不足之處\"><a href=\"#美中不足之處\" class=\"headerlink\" title=\"美中不足之處\"></a>美中不足之處</h2><p>我用的themes是Diaspora(<del>一個很適合放很多油圖的themes</del>)，但是有些小缺陷如下：</p>\n<ol>\n<li>Markdown的<strong>語法行號</strong>和<strong>粗體字</strong>無法好好的顯示。</li>\n<li>hitokoto(一言)需要手動去<code>diaspora.js</code>自行調整，首先要對javascript的string用法要熟悉。</li>\n<li>如果是繁體字使用者，需要去很多地方改成繁體字-&gt; <code>themes/diaspora/layout/</code></li>\n</ol>\n<h3 id=\"解決方法如下\"><a href=\"#解決方法如下\" class=\"headerlink\" title=\"解決方法如下\"></a>解決方法如下</h3><ol>\n<li><ul>\n<li><strong>行號不出現的問題</strong> -&gt; 到 <code>source/css/diaspora.css</code> 裡把 <code>.content .gutter &#123;display:none;&#125;</code> 改成 <code>.content .gutter &#123;display:table;&#125;</code></li>\n<li><strong>無法粗體字</strong>-&gt;<code>source/css/diaspora.css</code>裡把<code>.content strong &#123;font-weight:500;&#125;</code>刪掉。</li>\n</ul>\n</li>\n<li><ul>\n<li><strong>hitokoto</strong> -&gt; 直接去<code>source/js/diaspora.js</code>裡改他的string。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"有關Diaspora的套用\"><a href=\"#有關Diaspora的套用\" class=\"headerlink\" title=\"有關Diaspora的套用\"></a>有關Diaspora的套用</h2><p>相信我，沒有什麼比看原作的流程更詳細的。</p>\n<p><a href=\"https://github.com/Fechin/hexo-theme-diaspora\">Diaspora連結</a></p>\n<h2 id=\"有關架網站的總過程\"><a href=\"#有關架網站的總過程\" class=\"headerlink\" title=\"有關架網站的總過程\"></a>有關架網站的總過程</h2><p>我大多是看這篇學的 -&gt; <a href=\"https://medium.com/@bebebobohaha/%E4%BD%BF%E7%94%A8-hexo-gitpage-%E6%90%AD%E5%BB%BA%E5%80%8B%E4%BA%BA-blog-5c6ed52f23db\">如何搭建個人 Blog 使用 Hexo + Gitpage</a></p>\n<p>如果想把 <code>favicon</code> 跟 <code>logo</code> 換成自己的話，我個人是用<a href=\"http://www.akuziti.com/\">這個網站</a>生成自己想要的字體圖檔，然後再去 <code>themes/diaspora/source/css/diaspora.css</code> 把 <code>.image-logo</code> 的px改成自己所需的，但理論上 <code>favicon</code> 64px就行了，logo則是要去css檔裡修改（看你的logo多長啦）。</p>\n<p>還有，如果想在每一篇文章都放圖片的話，那就在<code>_posts</code>的<code>md</code>檔裡的<code>yaml</code>部份加上<code>cover: /img/....jpg</code></p>\n<p>舉例：</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">---\ntitle: SOJ 43 Lacy 路網\ndate: 2018-08-16 15:46:00\ncategories: 演算法\nwelcome_cover: false\ncover: &#x2F;img&#x2F;SOJ43.jpg\ntags: \n- SOJ\n- MST\n- 並查集\n---<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果想要讓首頁圖片跟著分類一起片換的話（也就是當那篇文章是第一個時，以那一篇cover為當前封面）</p>\n<p>那就把<code>themes/_config.yml</code>裡的<code>welcome_cover: .../</code>給註記掉<code>#welcome_cover: .../</code></p>\n<p>另外，記得每個<code>md</code>的<code>yaml</code>的<code>title</code>部份，名字絕對不要有<code>[ ]</code>符號，不然會出錯。</p>\n<h2 id=\"如何將你的-Hexo-Github-Pages\"><a href=\"#如何將你的-Hexo-Github-Pages\" class=\"headerlink\" title=\"如何將你的 Hexo + Github Pages\"></a>如何將你的 Hexo + Github Pages</h2><p>我是看這篇的。</p>\n<p><a href=\"https://ed521.github.io/2019/07/hexo-install/\">使用 GitHub Pages + Hexo 來架設個人部落格</a></p>\n<p><strong>但切記：我犯了一個重大的錯誤，就是建repo時一定要<code>&lt;username&gt;.github.io</code>，我就是因為取錯repo的名字導致我的網站爛掉。</strong></p>\n<h2 id=\"當你要npm-install-hexo-deployer-git-save時吃了Warning\"><a href=\"#當你要npm-install-hexo-deployer-git-save時吃了Warning\" class=\"headerlink\" title=\"當你要npm install hexo-deployer-git --save時吃了Warning\"></a>當你要<code>npm install hexo-deployer-git --save</code>時吃了Warning</h2><p>這篇一定可以幫助到你。</p>\n<p><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/682735/\">為什麼npminstall的時候會顯示嚴重漏洞</a></p>\n"},{"title":"大學面試總心得","date":"2020-04-26T00:30:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"\n![](https://i.imgur.com/IeHQ56h.jpg)\n\n## 交大資工(APCS組)(面試&心得)(4/23)\n這是我的備審\n連結：https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv\n備註我的學測成績(國11 數14 英14 自11)\n\n由左到右ABC三個教授，B是主面試官，也是競賽指導的教授，C聽說是資安的教授。\n自介1分鐘，但我介紹1分半。\n\n---\n教授A ：你接觸演算法時所運用的讀書方法。\n\n教授 B ：請說明在資訊之芽學習最深刻的演算法。\n\n教授 B ：請說具體的題目。\n\n教授 B ：那你覺得你不擅長的是什麼？\n\n我        ：是指哪個方面的？\n\n教授 B ：在資訊之芽時的演算法。\n\n教授 C ：請說明一下你發現app store 的付費漏洞。\n\n教授 B ：你是怎麼發現這個漏洞的？\n\n教授 B ：你有打Codeforces喔？目前如何？\n\n我         ：我綠人\n\n教授 B ：為什麼這樣？\n\n我         ：英文讀題比較慢，別人兩三分鐘一題，我要十幾分鐘\n\n教授B  ：可是題目很短（？\n\n我         ：我近期打的比賽是長的QAQ\n\n教授 A ：考APCS有先做準備嗎？\n\n回答完後七分鐘剛好到，被敲門了。\n\n教授B  ：好，按右邊的按鈕開門\n\n---\n\n嘛......教授A的第一題我回答到腦袋空掉，突然想起陳威達學長說的『不要太緊張，不然面試時腦袋會空白，然後就會覺得越來越可怕』，此時輪到教授B時我就回歸正常，後面都回答得蠻順的，但是有一點尬聊，因為每次回答完一個問題，就會安靜個十幾秒(因為教授們在翻備審找題目問我，面試後聽說其他人也有)。面完試後跟吳邦寧、韋詠祥(Sean)等人聊天吃飯。有被問家裡住所的 ; 有被電的，我好想被電啊，被電都會入取 ><。然後等客運時遇到一位媽媽帶女兒來面試，聊一聊發現她也是來交大資工APCS的面試，聽她媽說她是唯一女的(? 為啥我去哪面試都會遇到女的OAO\n\n---\n5/1附記：備取13 QAQ\n\n---\n\n## 臺師大 (APCS組)(面試)(4/26)\n這是我的備審\n連結：https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt\n備註我的學測成績(國11 數14 英14 自11)\n\n因為臺師大校園內疫情的關係，所以改為不面試並調整分數的比例\n(學測：45%，書審：25%，APCS：30%)\n\n至於面試的部分，以下我會放面試前我跟108學年有參加臺師大資工(APCS組)的學長姐請教的問題與回答。\n\n這是我給學長姐們的問題：\n       你好，我是來自新北市時雨高中的蘇子權，懇請讓我借用你一些時間問一些關於臺師大APCS口試的準備指引。\n       我希望能透過你了解一些面試時的「注意狀況與細節」和「問題導向」，因為我不確定口試時是會問關於「備審的內容」還是「演算法的問題」還是「單純像一些大學的資工乙組的聊聊天，用學測與在校成績評斷」（我認為應該不會是後者）。\n       我們學校的老師一直說前面的大學注重的是課業（我的老師認為簡章上只是形式上寫寫的）。\n       我的學測成績不好、數學也只有14、在校成績也不是很好，只有資訊競賽跟相關活動比較豐富（可是我資奧也不是打得很好），因此我想請教一下大致上口試的狀況，並且設法在口試時翻身。非常的謝謝你。\n\n其中一位學長給我這篇文章\n連結：https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc\n\n其中一位學姊提供她的經驗\n        我覺得照你說的你的條件是比我好的。\n        我學測自然四科48 數學12 英文11 在校就普普 資訊競賽雖然看起來很多 但沒甚麼成績 資奧我那時候只有壓線拿到去考初選的資格而已。\n        然後師大面試整體我覺得是比較輕鬆的 聽我同學說 一般組的還會有一些小測驗 類似海貍那種題目。\n        但APCS完全沒有。\n        那時候就是第一間進去有兩個教授 會問一些備審上面的問題然後叫你自介 但不是學術向問題 比較像是認識你那種。\n        第二間就是跟教授聊聊天的感覺。\n        \n---\n5/7更新放榜結果：正取1\n\n---\n\n## 長庚資工(面試)(4/18)\n這是我的備審\n連結 : https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW\n備註我的學測成績(國11 數14 英14 自11)\n\n面試時間大概10-12分鐘\n\n教授：請各位大概用3-4分鐘自介\n以下依序為教授問的題目\n\n1. 程式語言是什麼？如果沒有程式人類會變得怎麼樣？(這題是搶答)\n2. 你學過哪些程式，如何1加到100？ (這題是教授想從左往右答)\n3. 有什麼問題想問教授？(最後只有我問)\n    我：請問有沒有icpc競賽和校內培訓\n\n結論：\n        我跟三個女的一起面試，可能是因為這樣，所以被問到的題目非常簡單(沒有性別歧視的意味，只是去年都問很多思考性的問題，但今年卻都是問題庫的題目，所以這只是我單方面的結論。)\n\n---\n5/1附記：正取8\n\n---\n\n## 長庚電機 (面試)(4/25)\n\n這是我的備審：\n連結：https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g\n備註我的學測成績(國11 數14 英14 自11)\n\n（沒有自介）\n有三間教室（各一個教授，有點像跑班的概念）\n第一間教室（聊天教室）\n就是問很多個人狀況，先問一些基本的資料，反正就是想認識你；想了解你有沒有在打程式；想知道你有沒有考APCS；想知道你有沒有在玩資訊相關的社團，人很友善。\n第二間教室（專業題一題）\n我被問到「電話是如何運作，並如何將聲音與訊號互相轉換？」\n第三間教室（考英文聽說讀這三個）\n1. 先看投影片上三句英文10秒，再用15秒內的時間念投影片上三句英文。\n2. 再來聽不到10秒的英文錄音檔。\n   （錄音檔聲音超模糊，但不用緊張，教授會一段一段跟你解釋）\n3. 5題選一題文章，看15秒，然後翻譯整篇。\n\n---\n5/1附記：正取25\n","source":"_posts/大學面試總心得.md","raw":"---\ntitle: 大學面試總心得\ndate: 2020-04-26 08:30:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- 面試\n- 高中\n---\n\n![](https://i.imgur.com/IeHQ56h.jpg)\n\n## 交大資工(APCS組)(面試&心得)(4/23)\n這是我的備審\n連結：https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv\n備註我的學測成績(國11 數14 英14 自11)\n\n由左到右ABC三個教授，B是主面試官，也是競賽指導的教授，C聽說是資安的教授。\n自介1分鐘，但我介紹1分半。\n\n---\n教授A ：你接觸演算法時所運用的讀書方法。\n\n教授 B ：請說明在資訊之芽學習最深刻的演算法。\n\n教授 B ：請說具體的題目。\n\n教授 B ：那你覺得你不擅長的是什麼？\n\n我        ：是指哪個方面的？\n\n教授 B ：在資訊之芽時的演算法。\n\n教授 C ：請說明一下你發現app store 的付費漏洞。\n\n教授 B ：你是怎麼發現這個漏洞的？\n\n教授 B ：你有打Codeforces喔？目前如何？\n\n我         ：我綠人\n\n教授 B ：為什麼這樣？\n\n我         ：英文讀題比較慢，別人兩三分鐘一題，我要十幾分鐘\n\n教授B  ：可是題目很短（？\n\n我         ：我近期打的比賽是長的QAQ\n\n教授 A ：考APCS有先做準備嗎？\n\n回答完後七分鐘剛好到，被敲門了。\n\n教授B  ：好，按右邊的按鈕開門\n\n---\n\n嘛......教授A的第一題我回答到腦袋空掉，突然想起陳威達學長說的『不要太緊張，不然面試時腦袋會空白，然後就會覺得越來越可怕』，此時輪到教授B時我就回歸正常，後面都回答得蠻順的，但是有一點尬聊，因為每次回答完一個問題，就會安靜個十幾秒(因為教授們在翻備審找題目問我，面試後聽說其他人也有)。面完試後跟吳邦寧、韋詠祥(Sean)等人聊天吃飯。有被問家裡住所的 ; 有被電的，我好想被電啊，被電都會入取 ><。然後等客運時遇到一位媽媽帶女兒來面試，聊一聊發現她也是來交大資工APCS的面試，聽她媽說她是唯一女的(? 為啥我去哪面試都會遇到女的OAO\n\n---\n5/1附記：備取13 QAQ\n\n---\n\n## 臺師大 (APCS組)(面試)(4/26)\n這是我的備審\n連結：https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt\n備註我的學測成績(國11 數14 英14 自11)\n\n因為臺師大校園內疫情的關係，所以改為不面試並調整分數的比例\n(學測：45%，書審：25%，APCS：30%)\n\n至於面試的部分，以下我會放面試前我跟108學年有參加臺師大資工(APCS組)的學長姐請教的問題與回答。\n\n這是我給學長姐們的問題：\n       你好，我是來自新北市時雨高中的蘇子權，懇請讓我借用你一些時間問一些關於臺師大APCS口試的準備指引。\n       我希望能透過你了解一些面試時的「注意狀況與細節」和「問題導向」，因為我不確定口試時是會問關於「備審的內容」還是「演算法的問題」還是「單純像一些大學的資工乙組的聊聊天，用學測與在校成績評斷」（我認為應該不會是後者）。\n       我們學校的老師一直說前面的大學注重的是課業（我的老師認為簡章上只是形式上寫寫的）。\n       我的學測成績不好、數學也只有14、在校成績也不是很好，只有資訊競賽跟相關活動比較豐富（可是我資奧也不是打得很好），因此我想請教一下大致上口試的狀況，並且設法在口試時翻身。非常的謝謝你。\n\n其中一位學長給我這篇文章\n連結：https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc\n\n其中一位學姊提供她的經驗\n        我覺得照你說的你的條件是比我好的。\n        我學測自然四科48 數學12 英文11 在校就普普 資訊競賽雖然看起來很多 但沒甚麼成績 資奧我那時候只有壓線拿到去考初選的資格而已。\n        然後師大面試整體我覺得是比較輕鬆的 聽我同學說 一般組的還會有一些小測驗 類似海貍那種題目。\n        但APCS完全沒有。\n        那時候就是第一間進去有兩個教授 會問一些備審上面的問題然後叫你自介 但不是學術向問題 比較像是認識你那種。\n        第二間就是跟教授聊聊天的感覺。\n        \n---\n5/7更新放榜結果：正取1\n\n---\n\n## 長庚資工(面試)(4/18)\n這是我的備審\n連結 : https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW\n備註我的學測成績(國11 數14 英14 自11)\n\n面試時間大概10-12分鐘\n\n教授：請各位大概用3-4分鐘自介\n以下依序為教授問的題目\n\n1. 程式語言是什麼？如果沒有程式人類會變得怎麼樣？(這題是搶答)\n2. 你學過哪些程式，如何1加到100？ (這題是教授想從左往右答)\n3. 有什麼問題想問教授？(最後只有我問)\n    我：請問有沒有icpc競賽和校內培訓\n\n結論：\n        我跟三個女的一起面試，可能是因為這樣，所以被問到的題目非常簡單(沒有性別歧視的意味，只是去年都問很多思考性的問題，但今年卻都是問題庫的題目，所以這只是我單方面的結論。)\n\n---\n5/1附記：正取8\n\n---\n\n## 長庚電機 (面試)(4/25)\n\n這是我的備審：\n連結：https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g\n備註我的學測成績(國11 數14 英14 自11)\n\n（沒有自介）\n有三間教室（各一個教授，有點像跑班的概念）\n第一間教室（聊天教室）\n就是問很多個人狀況，先問一些基本的資料，反正就是想認識你；想了解你有沒有在打程式；想知道你有沒有考APCS；想知道你有沒有在玩資訊相關的社團，人很友善。\n第二間教室（專業題一題）\n我被問到「電話是如何運作，並如何將聲音與訊號互相轉換？」\n第三間教室（考英文聽說讀這三個）\n1. 先看投影片上三句英文10秒，再用15秒內的時間念投影片上三句英文。\n2. 再來聽不到10秒的英文錄音檔。\n   （錄音檔聲音超模糊，但不用緊張，教授會一段一段跟你解釋）\n3. 5題選一題文章，看15秒，然後翻譯整篇。\n\n---\n5/1附記：正取25\n","slug":"大學面試總心得","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dl0014cdg6dhtma41k","content":"<p><img src=\"https://i.imgur.com/IeHQ56h.jpg\" loading=\"lazy\"></p>\n<h2 id=\"交大資工-APCS組-面試-amp-心得-4-23\"><a href=\"#交大資工-APCS組-面試-amp-心得-4-23\" class=\"headerlink\" title=\"交大資工(APCS組)(面試&amp;心得)(4/23)\"></a>交大資工(APCS組)(面試&amp;心得)(4/23)</h2><p>這是我的備審<br>連結：<a href=\"https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv\">https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>由左到右ABC三個教授，B是主面試官，也是競賽指導的教授，C聽說是資安的教授。<br>自介1分鐘，但我介紹1分半。</p>\n<hr>\n<p>教授A ：你接觸演算法時所運用的讀書方法。</p>\n<p>教授 B ：請說明在資訊之芽學習最深刻的演算法。</p>\n<p>教授 B ：請說具體的題目。</p>\n<p>教授 B ：那你覺得你不擅長的是什麼？</p>\n<p>我        ：是指哪個方面的？</p>\n<p>教授 B ：在資訊之芽時的演算法。</p>\n<p>教授 C ：請說明一下你發現app store 的付費漏洞。</p>\n<p>教授 B ：你是怎麼發現這個漏洞的？</p>\n<p>教授 B ：你有打Codeforces喔？目前如何？</p>\n<p>我         ：我綠人</p>\n<p>教授 B ：為什麼這樣？</p>\n<p>我         ：英文讀題比較慢，別人兩三分鐘一題，我要十幾分鐘</p>\n<p>教授B  ：可是題目很短（？</p>\n<p>我         ：我近期打的比賽是長的QAQ</p>\n<p>教授 A ：考APCS有先做準備嗎？</p>\n<p>回答完後七分鐘剛好到，被敲門了。</p>\n<p>教授B  ：好，按右邊的按鈕開門</p>\n<hr>\n<p>嘛……教授A的第一題我回答到腦袋空掉，突然想起陳威達學長說的『不要太緊張，不然面試時腦袋會空白，然後就會覺得越來越可怕』，此時輪到教授B時我就回歸正常，後面都回答得蠻順的，但是有一點尬聊，因為每次回答完一個問題，就會安靜個十幾秒(因為教授們在翻備審找題目問我，面試後聽說其他人也有)。面完試後跟吳邦寧、韋詠祥(Sean)等人聊天吃飯。有被問家裡住所的 ; 有被電的，我好想被電啊，被電都會入取 &gt;&lt;。然後等客運時遇到一位媽媽帶女兒來面試，聊一聊發現她也是來交大資工APCS的面試，聽她媽說她是唯一女的(? 為啥我去哪面試都會遇到女的OAO</p>\n<hr>\n<p>5/1附記：備取13 QAQ</p>\n<hr>\n<h2 id=\"臺師大-APCS組-面試-4-26\"><a href=\"#臺師大-APCS組-面試-4-26\" class=\"headerlink\" title=\"臺師大 (APCS組)(面試)(4/26)\"></a>臺師大 (APCS組)(面試)(4/26)</h2><p>這是我的備審<br>連結：<a href=\"https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt\">https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>因為臺師大校園內疫情的關係，所以改為不面試並調整分數的比例<br>(學測：45%，書審：25%，APCS：30%)</p>\n<p>至於面試的部分，以下我會放面試前我跟108學年有參加臺師大資工(APCS組)的學長姐請教的問題與回答。</p>\n<p>這是我給學長姐們的問題：<br>       你好，我是來自新北市時雨高中的蘇子權，懇請讓我借用你一些時間問一些關於臺師大APCS口試的準備指引。<br>       我希望能透過你了解一些面試時的「注意狀況與細節」和「問題導向」，因為我不確定口試時是會問關於「備審的內容」還是「演算法的問題」還是「單純像一些大學的資工乙組的聊聊天，用學測與在校成績評斷」（我認為應該不會是後者）。<br>       我們學校的老師一直說前面的大學注重的是課業（我的老師認為簡章上只是形式上寫寫的）。<br>       我的學測成績不好、數學也只有14、在校成績也不是很好，只有資訊競賽跟相關活動比較豐富（可是我資奧也不是打得很好），因此我想請教一下大致上口試的狀況，並且設法在口試時翻身。非常的謝謝你。</p>\n<p>其中一位學長給我這篇文章<br>連結：<a href=\"https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc\">https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc</a></p>\n<p>其中一位學姊提供她的經驗<br>        我覺得照你說的你的條件是比我好的。<br>        我學測自然四科48 數學12 英文11 在校就普普 資訊競賽雖然看起來很多 但沒甚麼成績 資奧我那時候只有壓線拿到去考初選的資格而已。<br>        然後師大面試整體我覺得是比較輕鬆的 聽我同學說 一般組的還會有一些小測驗 類似海貍那種題目。<br>        但APCS完全沒有。<br>        那時候就是第一間進去有兩個教授 會問一些備審上面的問題然後叫你自介 但不是學術向問題 比較像是認識你那種。<br>        第二間就是跟教授聊聊天的感覺。</p>\n<hr>\n<p>5/7更新放榜結果：正取1</p>\n<hr>\n<h2 id=\"長庚資工-面試-4-18\"><a href=\"#長庚資工-面試-4-18\" class=\"headerlink\" title=\"長庚資工(面試)(4/18)\"></a>長庚資工(面試)(4/18)</h2><p>這是我的備審<br>連結 : <a href=\"https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW\">https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>面試時間大概10-12分鐘</p>\n<p>教授：請各位大概用3-4分鐘自介<br>以下依序為教授問的題目</p>\n<ol>\n<li>程式語言是什麼？如果沒有程式人類會變得怎麼樣？(這題是搶答)</li>\n<li>你學過哪些程式，如何1加到100？ (這題是教授想從左往右答)</li>\n<li>有什麼問題想問教授？(最後只有我問)<br> 我：請問有沒有icpc競賽和校內培訓</li>\n</ol>\n<p>結論：<br>        我跟三個女的一起面試，可能是因為這樣，所以被問到的題目非常簡單(沒有性別歧視的意味，只是去年都問很多思考性的問題，但今年卻都是問題庫的題目，所以這只是我單方面的結論。)</p>\n<hr>\n<p>5/1附記：正取8</p>\n<hr>\n<h2 id=\"長庚電機-面試-4-25\"><a href=\"#長庚電機-面試-4-25\" class=\"headerlink\" title=\"長庚電機 (面試)(4/25)\"></a>長庚電機 (面試)(4/25)</h2><p>這是我的備審：<br>連結：<a href=\"https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g\">https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>（沒有自介）<br>有三間教室（各一個教授，有點像跑班的概念）<br>第一間教室（聊天教室）<br>就是問很多個人狀況，先問一些基本的資料，反正就是想認識你；想了解你有沒有在打程式；想知道你有沒有考APCS；想知道你有沒有在玩資訊相關的社團，人很友善。<br>第二間教室（專業題一題）<br>我被問到「電話是如何運作，並如何將聲音與訊號互相轉換？」<br>第三間教室（考英文聽說讀這三個）</p>\n<ol>\n<li>先看投影片上三句英文10秒，再用15秒內的時間念投影片上三句英文。</li>\n<li>再來聽不到10秒的英文錄音檔。<br>（錄音檔聲音超模糊，但不用緊張，教授會一段一段跟你解釋）</li>\n<li>5題選一題文章，看15秒，然後翻譯整篇。</li>\n</ol>\n<hr>\n<p>5/1附記：正取25</p>\n","site":{"data":{}},"excerpt":"","more":"<p><img src=\"https://i.imgur.com/IeHQ56h.jpg\"></p>\n<h2 id=\"交大資工-APCS組-面試-amp-心得-4-23\"><a href=\"#交大資工-APCS組-面試-amp-心得-4-23\" class=\"headerlink\" title=\"交大資工(APCS組)(面試&amp;心得)(4/23)\"></a>交大資工(APCS組)(面試&amp;心得)(4/23)</h2><p>這是我的備審<br>連結：<a href=\"https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv\">https://drive.google.com/open?id=1v4fw_F4DYsee9jLfdwLjFZ5MW5tFjUOv</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>由左到右ABC三個教授，B是主面試官，也是競賽指導的教授，C聽說是資安的教授。<br>自介1分鐘，但我介紹1分半。</p>\n<hr>\n<p>教授A ：你接觸演算法時所運用的讀書方法。</p>\n<p>教授 B ：請說明在資訊之芽學習最深刻的演算法。</p>\n<p>教授 B ：請說具體的題目。</p>\n<p>教授 B ：那你覺得你不擅長的是什麼？</p>\n<p>我        ：是指哪個方面的？</p>\n<p>教授 B ：在資訊之芽時的演算法。</p>\n<p>教授 C ：請說明一下你發現app store 的付費漏洞。</p>\n<p>教授 B ：你是怎麼發現這個漏洞的？</p>\n<p>教授 B ：你有打Codeforces喔？目前如何？</p>\n<p>我         ：我綠人</p>\n<p>教授 B ：為什麼這樣？</p>\n<p>我         ：英文讀題比較慢，別人兩三分鐘一題，我要十幾分鐘</p>\n<p>教授B  ：可是題目很短（？</p>\n<p>我         ：我近期打的比賽是長的QAQ</p>\n<p>教授 A ：考APCS有先做準備嗎？</p>\n<p>回答完後七分鐘剛好到，被敲門了。</p>\n<p>教授B  ：好，按右邊的按鈕開門</p>\n<hr>\n<p>嘛……教授A的第一題我回答到腦袋空掉，突然想起陳威達學長說的『不要太緊張，不然面試時腦袋會空白，然後就會覺得越來越可怕』，此時輪到教授B時我就回歸正常，後面都回答得蠻順的，但是有一點尬聊，因為每次回答完一個問題，就會安靜個十幾秒(因為教授們在翻備審找題目問我，面試後聽說其他人也有)。面完試後跟吳邦寧、韋詠祥(Sean)等人聊天吃飯。有被問家裡住所的 ; 有被電的，我好想被電啊，被電都會入取 &gt;&lt;。然後等客運時遇到一位媽媽帶女兒來面試，聊一聊發現她也是來交大資工APCS的面試，聽她媽說她是唯一女的(? 為啥我去哪面試都會遇到女的OAO</p>\n<hr>\n<p>5/1附記：備取13 QAQ</p>\n<hr>\n<h2 id=\"臺師大-APCS組-面試-4-26\"><a href=\"#臺師大-APCS組-面試-4-26\" class=\"headerlink\" title=\"臺師大 (APCS組)(面試)(4/26)\"></a>臺師大 (APCS組)(面試)(4/26)</h2><p>這是我的備審<br>連結：<a href=\"https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt\">https://drive.google.com/open?id=1B2Zi7ft8KcVla44UyAdwnZb82z55tMKt</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>因為臺師大校園內疫情的關係，所以改為不面試並調整分數的比例<br>(學測：45%，書審：25%，APCS：30%)</p>\n<p>至於面試的部分，以下我會放面試前我跟108學年有參加臺師大資工(APCS組)的學長姐請教的問題與回答。</p>\n<p>這是我給學長姐們的問題：<br>       你好，我是來自新北市時雨高中的蘇子權，懇請讓我借用你一些時間問一些關於臺師大APCS口試的準備指引。<br>       我希望能透過你了解一些面試時的「注意狀況與細節」和「問題導向」，因為我不確定口試時是會問關於「備審的內容」還是「演算法的問題」還是「單純像一些大學的資工乙組的聊聊天，用學測與在校成績評斷」（我認為應該不會是後者）。<br>       我們學校的老師一直說前面的大學注重的是課業（我的老師認為簡章上只是形式上寫寫的）。<br>       我的學測成績不好、數學也只有14、在校成績也不是很好，只有資訊競賽跟相關活動比較豐富（可是我資奧也不是打得很好），因此我想請教一下大致上口試的狀況，並且設法在口試時翻身。非常的謝謝你。</p>\n<p>其中一位學長給我這篇文章<br>連結：<a href=\"https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc\">https://www.ptt.cc/bbs/SENIORHIGH/M.1524292907.A.DF8.html?fbclid=IwAR2cTlpIx0m50SVHnyCnOnFaBxv6_EgukLO_hyDMSyGHiGPBlwUXvDL1Ftc</a></p>\n<p>其中一位學姊提供她的經驗<br>        我覺得照你說的你的條件是比我好的。<br>        我學測自然四科48 數學12 英文11 在校就普普 資訊競賽雖然看起來很多 但沒甚麼成績 資奧我那時候只有壓線拿到去考初選的資格而已。<br>        然後師大面試整體我覺得是比較輕鬆的 聽我同學說 一般組的還會有一些小測驗 類似海貍那種題目。<br>        但APCS完全沒有。<br>        那時候就是第一間進去有兩個教授 會問一些備審上面的問題然後叫你自介 但不是學術向問題 比較像是認識你那種。<br>        第二間就是跟教授聊聊天的感覺。</p>\n<hr>\n<p>5/7更新放榜結果：正取1</p>\n<hr>\n<h2 id=\"長庚資工-面試-4-18\"><a href=\"#長庚資工-面試-4-18\" class=\"headerlink\" title=\"長庚資工(面試)(4/18)\"></a>長庚資工(面試)(4/18)</h2><p>這是我的備審<br>連結 : <a href=\"https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW\">https://drive.google.com/open?id=1rZ75w6ZeeY2U-0Ru0HKrMcKd3o95jggW</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>面試時間大概10-12分鐘</p>\n<p>教授：請各位大概用3-4分鐘自介<br>以下依序為教授問的題目</p>\n<ol>\n<li>程式語言是什麼？如果沒有程式人類會變得怎麼樣？(這題是搶答)</li>\n<li>你學過哪些程式，如何1加到100？ (這題是教授想從左往右答)</li>\n<li>有什麼問題想問教授？(最後只有我問)<br> 我：請問有沒有icpc競賽和校內培訓</li>\n</ol>\n<p>結論：<br>        我跟三個女的一起面試，可能是因為這樣，所以被問到的題目非常簡單(沒有性別歧視的意味，只是去年都問很多思考性的問題，但今年卻都是問題庫的題目，所以這只是我單方面的結論。)</p>\n<hr>\n<p>5/1附記：正取8</p>\n<hr>\n<h2 id=\"長庚電機-面試-4-25\"><a href=\"#長庚電機-面試-4-25\" class=\"headerlink\" title=\"長庚電機 (面試)(4/25)\"></a>長庚電機 (面試)(4/25)</h2><p>這是我的備審：<br>連結：<a href=\"https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g\">https://drive.google.com/open?id=11AltvoSak_cOq5NRt_CxkRz1GMh5Ry6g</a><br>備註我的學測成績(國11 數14 英14 自11)</p>\n<p>（沒有自介）<br>有三間教室（各一個教授，有點像跑班的概念）<br>第一間教室（聊天教室）<br>就是問很多個人狀況，先問一些基本的資料，反正就是想認識你；想了解你有沒有在打程式；想知道你有沒有考APCS；想知道你有沒有在玩資訊相關的社團，人很友善。<br>第二間教室（專業題一題）<br>我被問到「電話是如何運作，並如何將聲音與訊號互相轉換？」<br>第三間教室（考英文聽說讀這三個）</p>\n<ol>\n<li>先看投影片上三句英文10秒，再用15秒內的時間念投影片上三句英文。</li>\n<li>再來聽不到10秒的英文錄音檔。<br>（錄音檔聲音超模糊，但不用緊張，教授會一段一段跟你解釋）</li>\n<li>5題選一題文章，看15秒，然後翻譯整篇。</li>\n</ol>\n<hr>\n<p>5/1附記：正取25</p>\n"},{"title":"程設(一) 作業1 有趣有用的小東西,心得","date":"2020-10-08T16:00:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"1. **由於高中的資訊課從來都沒有L紀的課那麼~~毒瘤~~有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO**\n3. **至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）**\n4. **近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz**\n5. **友情連結 ->** [吳文元的Blog](https://blog.jw910731.wtf/blog/) \n## 先淺談一些有趣的東西\n為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。\n\n>懶惰就都define起來啊OwO\n\n習慣打int的我，就\n```c=\n#include<stdint.h>\n#define int int32_t\n```\n>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）\n\n```c=\n#include<stdbool.h>\n```\n>上課毒L紀說給你錯的輸入格式（？判掉它OAO\n\n我喜歡的寫法\n```c=\nint c;\nwhile(scanf(\"%...\")!=...)//\"...\"是指輸入多少量\n{\n    printf(\"Please input correct format!\\n\");\n    while(c=getchar()!='\\n' && c!=EOF);\n}\n```\nsad之神吳文元喜歡的精簡寫法\n```c=\nwhile(scanf(\"%...\")!=...)//\"...\"是指輸入多少量\n{\n    printf(\"Please input correct format!\\n\");\n    while(getchar()!='\\n');\n}\n```\n>為什麼會有人main函式寫signed main() ?\n\n~~別問你會怕OwO~~\n好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）\n![](https://i.imgur.com/yyx8gfb.png)\n\n就像把```long long int```打成```long long```一樣啦，**粗略來說**就是名字不一樣但性質一樣。\n\n用途就是有人跟我一樣毒瘤到懶的開```long long```時就```#define int long long```。\n\n這時就要談到main為什麼只回傳int了 QAQ\n\n又是很毒的C規定標準-> ISO/IEC 9899:201x 第13頁的[Program startup](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf)有規定。\n\n然後第14頁的[Program termination](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf)有講到```main()```回傳的```return```值會丟給```exit()```。\n\nPS: ```return```是調用堆疊（函數退出），```exit```是系統調用（進程退出）。\n\n通常```return 0```是成功，```return 1```**可能**表示失敗，回傳值丟給```exit()```後會告訴使用者\n\n**exit(0)正常結束**或**exit(非0)產生錯誤資訊**，有定義[system exit](https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html)回傳數字是什麼意思。\n\n**上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(~~文元不要打我~~)**\n```c=\n#include<stdio.h>\n#define int long long\nsigned main()\n{\n    return 0;\n}\n```\n\n\n>你不知道為什麼scanf編譯時吃了warning?\n\n![](https://i.imgur.com/S3q1XnO.png)\n\n其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看[這裡](https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf)，-Wunused-result看[這裡](https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result)。\n\n>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)\n\n```c=\n//正常寫法\nwhile(scanf(\"%d\",&n)!=EOF){\n    ...\n}\n//毒瘤寫法（黑魔法）\nwhile(~scanf(\"%d\",&n)){\n    ...\n}\n```\n好啦，其實不是黑魔法，'~'符號只是位元運算子的「not」\n\n舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)\n\n通常EOF是系統跑到文件結尾時，所回傳的信號（-1）\n\n* **因系統而異，不全是-1**\n\n然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not\n\n因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)\n\n那麼，while(~(-1)) = while(0) \n\n* **提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。**\n\n* **EOF是被define的 -> ```#define EOF -1```**\n\n>當你很想輸出後就直接```return 0```時(1行超讚)\n```c=\nreturn printf(\"%d+%d=%d\",a,b,a+b),0;\n```\n\n---\n防雷線(以下是作業部份)\n---\n---\n\n## <hw0101>\n簡單的輸出題。\n\n## <hw0102>\n題目規定要5 digits，所以要判斷是否有輸入錯格式。\n再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。\n\n## <hw0103>\n物理算術題。\n\n下面第21行的```%.2f``` , ```%.3f```**極粗略上來說**是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看[這裡](https://blog.csdn.net/wonglong01/article/details/6074887)。\n## <hw0104>\n我先使用 ```whereis stdio.h``` 尋找 stdio.h 的 path，跟著路徑```/usr/include/```找到stdio.h後將它mv成不同名字（```sudo mv stdio.h stdioo.h```）(沒加sudo會permission denied，所以提高權限)，改完後回去直接```$ make clean``` ```$ make```會得到\"fatal error\"，不能過編。但是，如果我把程式裡的```#include<stdio.h>```砍掉就「可以過編」，但會吃warning，原因在於```[-Wimplicit-function-declaration]```(隱式宣告函式)也就是C語言有規定，**「對於沒有宣告的函式，自動使用隱式宣告」**。\n\n![](https://i.imgur.com/oHga5aJ.jpg)\n\n\n## <hw0105>\n\n### 解釋10進位負數轉16進位\n首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。\n\n或是可以參考[這裡](https://www.itread01.com/content/1543721235.html)。\n## Bonus <hw0106>\n我先使用```whereis cd```尋找cd，之後又用```ls /bin | grep cd```也找不到，於是詢問一下他的type是什麼```type cd```，出現了以下我簡化後的敘述。\n```\ncd is a function with definition\n#Defined in /usr/share/fish/functions/cd.fish\n...\n```\n在fish-shell，cd是個function（因為我的是fish-shell）。\n但如果要查bash，那```echo \"type cd\" | bash```或```echo \"type cd\" | sh```它會超貼心的說```cd is a shell builtin```。\n\nPS: 讚嘆余原齊大神只用```which cd```揍掉這題m(_ _)m\n\n","source":"_posts/程設(一) 作業1 有趣有用的小東西,心得.md","raw":"---\ntitle: 程設(一) 作業1 有趣有用的小東西,心得\ndate: 2020-10-09 00:00:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: 心得\ntags: \n- 作業\n- 有趣的東西\n---\n1. **由於高中的資訊課從來都沒有L紀的課那麼~~毒瘤~~有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO**\n3. **至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）**\n4. **近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz**\n5. **友情連結 ->** [吳文元的Blog](https://blog.jw910731.wtf/blog/) \n## 先淺談一些有趣的東西\n為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。\n\n>懶惰就都define起來啊OwO\n\n習慣打int的我，就\n```c=\n#include<stdint.h>\n#define int int32_t\n```\n>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）\n\n```c=\n#include<stdbool.h>\n```\n>上課毒L紀說給你錯的輸入格式（？判掉它OAO\n\n我喜歡的寫法\n```c=\nint c;\nwhile(scanf(\"%...\")!=...)//\"...\"是指輸入多少量\n{\n    printf(\"Please input correct format!\\n\");\n    while(c=getchar()!='\\n' && c!=EOF);\n}\n```\nsad之神吳文元喜歡的精簡寫法\n```c=\nwhile(scanf(\"%...\")!=...)//\"...\"是指輸入多少量\n{\n    printf(\"Please input correct format!\\n\");\n    while(getchar()!='\\n');\n}\n```\n>為什麼會有人main函式寫signed main() ?\n\n~~別問你會怕OwO~~\n好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）\n![](https://i.imgur.com/yyx8gfb.png)\n\n就像把```long long int```打成```long long```一樣啦，**粗略來說**就是名字不一樣但性質一樣。\n\n用途就是有人跟我一樣毒瘤到懶的開```long long```時就```#define int long long```。\n\n這時就要談到main為什麼只回傳int了 QAQ\n\n又是很毒的C規定標準-> ISO/IEC 9899:201x 第13頁的[Program startup](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf)有規定。\n\n然後第14頁的[Program termination](http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf)有講到```main()```回傳的```return```值會丟給```exit()```。\n\nPS: ```return```是調用堆疊（函數退出），```exit```是系統調用（進程退出）。\n\n通常```return 0```是成功，```return 1```**可能**表示失敗，回傳值丟給```exit()```後會告訴使用者\n\n**exit(0)正常結束**或**exit(非0)產生錯誤資訊**，有定義[system exit](https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html)回傳數字是什麼意思。\n\n**上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(~~文元不要打我~~)**\n```c=\n#include<stdio.h>\n#define int long long\nsigned main()\n{\n    return 0;\n}\n```\n\n\n>你不知道為什麼scanf編譯時吃了warning?\n\n![](https://i.imgur.com/S3q1XnO.png)\n\n其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看[這裡](https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf)，-Wunused-result看[這裡](https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result)。\n\n>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)\n\n```c=\n//正常寫法\nwhile(scanf(\"%d\",&n)!=EOF){\n    ...\n}\n//毒瘤寫法（黑魔法）\nwhile(~scanf(\"%d\",&n)){\n    ...\n}\n```\n好啦，其實不是黑魔法，'~'符號只是位元運算子的「not」\n\n舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)\n\n通常EOF是系統跑到文件結尾時，所回傳的信號（-1）\n\n* **因系統而異，不全是-1**\n\n然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not\n\n因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)\n\n那麼，while(~(-1)) = while(0) \n\n* **提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。**\n\n* **EOF是被define的 -> ```#define EOF -1```**\n\n>當你很想輸出後就直接```return 0```時(1行超讚)\n```c=\nreturn printf(\"%d+%d=%d\",a,b,a+b),0;\n```\n\n---\n防雷線(以下是作業部份)\n---\n---\n\n## <hw0101>\n簡單的輸出題。\n\n## <hw0102>\n題目規定要5 digits，所以要判斷是否有輸入錯格式。\n再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。\n\n## <hw0103>\n物理算術題。\n\n下面第21行的```%.2f``` , ```%.3f```**極粗略上來說**是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看[這裡](https://blog.csdn.net/wonglong01/article/details/6074887)。\n## <hw0104>\n我先使用 ```whereis stdio.h``` 尋找 stdio.h 的 path，跟著路徑```/usr/include/```找到stdio.h後將它mv成不同名字（```sudo mv stdio.h stdioo.h```）(沒加sudo會permission denied，所以提高權限)，改完後回去直接```$ make clean``` ```$ make```會得到\"fatal error\"，不能過編。但是，如果我把程式裡的```#include<stdio.h>```砍掉就「可以過編」，但會吃warning，原因在於```[-Wimplicit-function-declaration]```(隱式宣告函式)也就是C語言有規定，**「對於沒有宣告的函式，自動使用隱式宣告」**。\n\n![](https://i.imgur.com/oHga5aJ.jpg)\n\n\n## <hw0105>\n\n### 解釋10進位負數轉16進位\n首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。\n\n或是可以參考[這裡](https://www.itread01.com/content/1543721235.html)。\n## Bonus <hw0106>\n我先使用```whereis cd```尋找cd，之後又用```ls /bin | grep cd```也找不到，於是詢問一下他的type是什麼```type cd```，出現了以下我簡化後的敘述。\n```\ncd is a function with definition\n#Defined in /usr/share/fish/functions/cd.fish\n...\n```\n在fish-shell，cd是個function（因為我的是fish-shell）。\n但如果要查bash，那```echo \"type cd\" | bash```或```echo \"type cd\" | sh```它會超貼心的說```cd is a shell builtin```。\n\nPS: 讚嘆余原齊大神只用```which cd```揍掉這題m(_ _)m\n\n","slug":"程設(一) 作業1 有趣有用的小東西,心得","published":1,"updated":"2020-12-03T14:50:29.410Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckiiye9dm0017cdg6f7uch9v3","content":"<ol>\n<li><strong>由於高中的資訊課從來都沒有L紀的課那麼<del>毒瘤</del>有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO</strong></li>\n<li><strong>至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）</strong></li>\n<li><strong>近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz</strong></li>\n<li><strong>友情連結 -&gt;</strong> <a href=\"https://blog.jw910731.wtf/blog/\">吳文元的Blog</a> <h2 id=\"先淺談一些有趣的東西\"><a href=\"#先淺談一些有趣的東西\" class=\"headerlink\" title=\"先淺談一些有趣的東西\"></a>先淺談一些有趣的東西</h2>為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。</li>\n</ol>\n<blockquote>\n<p>懶惰就都define起來啊OwO</p>\n</blockquote>\n<p>習慣打int的我，就</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> int32_t</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上課毒L紀說給你錯的輸入格式（？判掉它OAO</p>\n</blockquote>\n<p>我喜歡的寫法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%...\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//\"...\"是指輸入多少量</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input correct format!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>sad之神吳文元喜歡的精簡寫法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%...\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//\"...\"是指輸入多少量</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input correct format!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>為什麼會有人main函式寫signed main() ?</p>\n</blockquote>\n<p><del>別問你會怕OwO</del><br>好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）<br><img src=\"https://i.imgur.com/yyx8gfb.png\" loading=\"lazy\"></p>\n<p>就像把<code>long long int</code>打成<code>long long</code>一樣啦，<strong>粗略來說</strong>就是名字不一樣但性質一樣。</p>\n<p>用途就是有人跟我一樣毒瘤到懶的開<code>long long</code>時就<code>#define int long long</code>。</p>\n<p>這時就要談到main為什麼只回傳int了 QAQ</p>\n<p>又是很毒的C規定標準-&gt; ISO/IEC 9899:201x 第13頁的<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">Program startup</a>有規定。</p>\n<p>然後第14頁的<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">Program termination</a>有講到<code>main()</code>回傳的<code>return</code>值會丟給<code>exit()</code>。</p>\n<p>PS: <code>return</code>是調用堆疊（函數退出），<code>exit</code>是系統調用（進程退出）。</p>\n<p>通常<code>return 0</code>是成功，<code>return 1</code><strong>可能</strong>表示失敗，回傳值丟給<code>exit()</code>後會告訴使用者</p>\n<p><strong>exit(0)正常結束</strong>或<strong>exit(非0)產生錯誤資訊</strong>，有定義<a href=\"https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html\">system exit</a>回傳數字是什麼意思。</p>\n<p><strong>上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(<del>文元不要打我</del>)</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote>\n<p>你不知道為什麼scanf編譯時吃了warning?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/S3q1XnO.png\" loading=\"lazy\"></p>\n<p>其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看<a href=\"https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf\">這裡</a>，-Wunused-result看<a href=\"https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result\">這裡</a>。</p>\n<blockquote>\n<p>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//正常寫法</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//毒瘤寫法（黑魔法）</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，其實不是黑魔法，’~’符號只是位元運算子的「not」</p>\n<p>舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)</p>\n<p>通常EOF是系統跑到文件結尾時，所回傳的信號（-1）</p>\n<ul>\n<li><strong>因系統而異，不全是-1</strong></li>\n</ul>\n<p>然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not</p>\n<p>因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)</p>\n<p>那麼，while(~(-1)) = while(0) </p>\n<ul>\n<li><p><strong>提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。</strong></p>\n</li>\n<li><p><strong>EOF是被define的 -&gt; <code>#define EOF -1</code></strong></p>\n</li>\n</ul>\n<blockquote>\n<p>當你很想輸出後就直接<code>return 0</code>時(1行超讚)</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">return</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d+%d=%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"防雷線-以下是作業部份\"><a href=\"#防雷線-以下是作業部份\" class=\"headerlink\" title=\"防雷線(以下是作業部份)\"></a>防雷線(以下是作業部份)</h2><hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><hw0101></h2><p>簡單的輸出題。</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><hw0102></h2><p>題目規定要5 digits，所以要判斷是否有輸入錯格式。<br>再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。</p>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><hw0103></h2><p>物理算術題。</p>\n<p>下面第21行的<code>%.2f</code> , <code>%.3f</code><strong>極粗略上來說</strong>是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看<a href=\"https://blog.csdn.net/wonglong01/article/details/6074887\">這裡</a>。</p>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a><hw0104></h2><p>我先使用 <code>whereis stdio.h</code> 尋找 stdio.h 的 path，跟著路徑<code>/usr/include/</code>找到stdio.h後將它mv成不同名字（<code>sudo mv stdio.h stdioo.h</code>）(沒加sudo會permission denied，所以提高權限)，改完後回去直接<code>$ make clean</code> <code>$ make</code>會得到”fatal error”，不能過編。但是，如果我把程式裡的<code>#include&lt;stdio.h&gt;</code>砍掉就「可以過編」，但會吃warning，原因在於<code>[-Wimplicit-function-declaration]</code>(隱式宣告函式)也就是C語言有規定，<strong>「對於沒有宣告的函式，自動使用隱式宣告」</strong>。</p>\n<p><img src=\"https://i.imgur.com/oHga5aJ.jpg\" loading=\"lazy\"></p>\n<h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a><hw0105></h2><h3 id=\"解釋10進位負數轉16進位\"><a href=\"#解釋10進位負數轉16進位\" class=\"headerlink\" title=\"解釋10進位負數轉16進位\"></a>解釋10進位負數轉16進位</h3><p>首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。</p>\n<p>或是可以參考<a href=\"https://www.itread01.com/content/1543721235.html\">這裡</a>。</p>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus \"></a>Bonus <hw0106></h2><p>我先使用<code>whereis cd</code>尋找cd，之後又用<code>ls /bin | grep cd</code>也找不到，於是詢問一下他的type是什麼<code>type cd</code>，出現了以下我簡化後的敘述。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd is a function with definition\n#Defined in &#x2F;usr&#x2F;share&#x2F;fish&#x2F;functions&#x2F;cd.fish\n...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在fish-shell，cd是個function（因為我的是fish-shell）。<br>但如果要查bash，那<code>echo &quot;type cd&quot; | bash</code>或<code>echo &quot;type cd&quot; | sh</code>它會超貼心的說<code>cd is a shell builtin</code>。</p>\n<p>PS: 讚嘆余原齊大神只用<code>which cd</code>揍掉這題m(_ _)m</p>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><strong>由於高中的資訊課從來都沒有L紀的課那麼<del>毒瘤</del>有趣，在寫功課中有感而發而寫了這篇有趣的小東西與大家分享，如果有各方大神有超毒瘤或有趣的玩法記得傳教我OwO</strong></li>\n<li><strong>至於以後有遇到有趣的東東就會再寫，但功課解析不會再有（除非那題很毒瘤或有趣）</strong></li>\n<li><strong>近期我會盡快架個Blog，有趣的東東都會放在Blog上，希望往後大家能多多造訪Orz</strong></li>\n<li><strong>友情連結 -&gt;</strong> <a href=\"https://blog.jw910731.wtf/blog/\">吳文元的Blog</a> <h2 id=\"先淺談一些有趣的東西\"><a href=\"#先淺談一些有趣的東西\" class=\"headerlink\" title=\"先淺談一些有趣的東西\"></a>先淺談一些有趣的東西</h2>為什麼我要先寫有趣的東西呢？因為大部分是寫功課過程中學到的，小部份只是想順道跟大家分享。</li>\n</ol>\n<blockquote>\n<p>懶惰就都define起來啊OwO</p>\n</blockquote>\n<p>習慣打int的我，就</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdint.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> int32_t</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<blockquote>\n<p>C語言中沒有布林？（這篇是之前寫的，下一週上課剛好就被提到）</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdbool.h></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote>\n<p>上課毒L紀說給你錯的輸入格式（？判掉它OAO</p>\n</blockquote>\n<p>我喜歡的寫法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%...\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//\"...\"是指輸入多少量</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input correct format!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">=</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>sad之神吳文元喜歡的精簡寫法</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%...\"</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//\"...\"是指輸入多少量</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Please input correct format!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote>\n<p>為什麼會有人main函式寫signed main() ?</p>\n</blockquote>\n<p><del>別問你會怕OwO</del><br>好啦，其實C99 ISO/IEC 9899:1999第99,100頁有規定到（如圖）<br><img src=\"https://i.imgur.com/yyx8gfb.png\"></p>\n<p>就像把<code>long long int</code>打成<code>long long</code>一樣啦，<strong>粗略來說</strong>就是名字不一樣但性質一樣。</p>\n<p>用途就是有人跟我一樣毒瘤到懶的開<code>long long</code>時就<code>#define int long long</code>。</p>\n<p>這時就要談到main為什麼只回傳int了 QAQ</p>\n<p>又是很毒的C規定標準-&gt; ISO/IEC 9899:201x 第13頁的<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">Program startup</a>有規定。</p>\n<p>然後第14頁的<a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\">Program termination</a>有講到<code>main()</code>回傳的<code>return</code>值會丟給<code>exit()</code>。</p>\n<p>PS: <code>return</code>是調用堆疊（函數退出），<code>exit</code>是系統調用（進程退出）。</p>\n<p>通常<code>return 0</code>是成功，<code>return 1</code><strong>可能</strong>表示失敗，回傳值丟給<code>exit()</code>後會告訴使用者</p>\n<p><strong>exit(0)正常結束</strong>或<strong>exit(非0)產生錯誤資訊</strong>，有定義<a href=\"https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html\">system exit</a>回傳數字是什麼意思。</p>\n<p><strong>上面看不懂沒關係，因為總結起來如下面程式碼一樣簡單又簡潔OwO(<del>文元不要打我</del>)</strong></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token keyword\">int</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<blockquote>\n<p>你不知道為什麼scanf編譯時吃了warning?</p>\n</blockquote>\n<p><img src=\"https://i.imgur.com/S3q1XnO.png\"></p>\n<p>其實scanf是會回傳值的，只是單純警告你忽略了回傳值（就像宣告了一個變數，但整個程式都沒用到它，就會給你一個warning提醒使用者），在這點到為止，有興趣的看<a href=\"https://stackoverflow.com/questions/10043841/c-error-ignoring-return-value-of-scanf\">這裡</a>，-Wunused-result看<a href=\"https://stackoverflow.com/questions/40576003/ignoring-warning-wunused-result\">這裡</a>。</p>\n<blockquote>\n<p>題目要求連續輸入直到EOF時(End of File)(ctrl+z是Windows的EOF)(ctrl+d是Linux的EOF)</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">//正常寫法</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token constant\">EOF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//毒瘤寫法（黑魔法）</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span><span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>好啦，其實不是黑魔法，’~’符號只是位元運算子的「not」</p>\n<p>舉例 a=101001 ; b=~a ; 那麼 b=010110 (not的這個想法在hw0105的手寫部份可以用的上OwO)</p>\n<p>通常EOF是系統跑到文件結尾時，所回傳的信號（-1）</p>\n<ul>\n<li><strong>因系統而異，不全是-1</strong></li>\n</ul>\n<p>然後在上面那一篇有說到scanf是會回傳值的，它回傳了EOF(-1)，並將(-1)給not</p>\n<p>因此，以8位元二補數舉例表示為： ~(-1) = ~(1111 1111)(二進位) = (0000 0000)(二進位)= 0 (十進位)</p>\n<p>那麼，while(~(-1)) = while(0) </p>\n<ul>\n<li><p><strong>提醒 : ASCII沒有負數(0~127)，因此EOF不是特殊字符。</strong></p>\n</li>\n<li><p><strong>EOF是被define的 -&gt; <code>#define EOF -1</code></strong></p>\n</li>\n</ul>\n<blockquote>\n<p>當你很想輸出後就直接<code>return 0</code>時(1行超讚)</p>\n</blockquote>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">return</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d+%d=%d\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<hr>\n<h2 id=\"防雷線-以下是作業部份\"><a href=\"#防雷線-以下是作業部份\" class=\"headerlink\" title=\"防雷線(以下是作業部份)\"></a>防雷線(以下是作業部份)</h2><hr>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><hw0101></h2><p>簡單的輸出題。</p>\n<h2 id=\"-1\"><a href=\"#-1\" class=\"headerlink\" title=\"\"></a><hw0102></h2><p>題目規定要5 digits，所以要判斷是否有輸入錯格式。<br>再來把輸入的數字丟進for裡，每次除以一個從10000開始每次除以10的數字，一直乘進答案裡，輸入的數字記得模掉最前面一位。</p>\n<h2 id=\"-2\"><a href=\"#-2\" class=\"headerlink\" title=\"\"></a><hw0103></h2><p>物理算術題。</p>\n<p>下面第21行的<code>%.2f</code> , <code>%.3f</code><strong>極粗略上來說</strong>是取四捨五入當第多少位，如果不足位數則補0，如果需要實做輔助看<a href=\"https://blog.csdn.net/wonglong01/article/details/6074887\">這裡</a>。</p>\n<h2 id=\"-3\"><a href=\"#-3\" class=\"headerlink\" title=\"\"></a><hw0104></h2><p>我先使用 <code>whereis stdio.h</code> 尋找 stdio.h 的 path，跟著路徑<code>/usr/include/</code>找到stdio.h後將它mv成不同名字（<code>sudo mv stdio.h stdioo.h</code>）(沒加sudo會permission denied，所以提高權限)，改完後回去直接<code>$ make clean</code> <code>$ make</code>會得到”fatal error”，不能過編。但是，如果我把程式裡的<code>#include&lt;stdio.h&gt;</code>砍掉就「可以過編」，但會吃warning，原因在於<code>[-Wimplicit-function-declaration]</code>(隱式宣告函式)也就是C語言有規定，<strong>「對於沒有宣告的函式，自動使用隱式宣告」</strong>。</p>\n<p><img src=\"https://i.imgur.com/oHga5aJ.jpg\"></p>\n<h2 id=\"-4\"><a href=\"#-4\" class=\"headerlink\" title=\"\"></a><hw0105></h2><h3 id=\"解釋10進位負數轉16進位\"><a href=\"#解釋10進位負數轉16進位\" class=\"headerlink\" title=\"解釋10進位負數轉16進位\"></a>解釋10進位負數轉16進位</h3><p>首先將此十進位數字部份轉成二進位，反碼後加1，4個數字一組轉成16進位（共8組）($2^{4*8}$)。</p>\n<p>或是可以參考<a href=\"https://www.itread01.com/content/1543721235.html\">這裡</a>。</p>\n<h2 id=\"Bonus\"><a href=\"#Bonus\" class=\"headerlink\" title=\"Bonus \"></a>Bonus <hw0106></h2><p>我先使用<code>whereis cd</code>尋找cd，之後又用<code>ls /bin | grep cd</code>也找不到，於是詢問一下他的type是什麼<code>type cd</code>，出現了以下我簡化後的敘述。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">cd is a function with definition\n#Defined in &#x2F;usr&#x2F;share&#x2F;fish&#x2F;functions&#x2F;cd.fish\n...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在fish-shell，cd是個function（因為我的是fish-shell）。<br>但如果要查bash，那<code>echo &quot;type cd&quot; | bash</code>或<code>echo &quot;type cd&quot; | sh</code>它會超貼心的說<code>cd is a shell builtin</code>。</p>\n<p>PS: 讚嘆余原齊大神只用<code>which cd</code>揍掉這題m(_ _)m</p>\n"},{"title":"2020 CPTC 心得","date":"2020-12-16T19:26:00.000Z","highlight":{"enable":true,"line_number":true,"auto_detect":true,"tab_replace":"","wrap":true,"hljs":true},"prismjs":{"enable":true,"preprocess":true,"line_number":true,"tab_replace":""},"_content":"  \n# CPTC 心得\n題目在[這裡](https://drive.google.com/drive/folders/1ajpjsjsR_dzitV-5PMmbXPFg3XNhVGm_?usp=sharing),就跳過題序了QAQ\n## 考前\n三個完全還沒進入狀況的人：我,吳文元,余原齊被一開始登不進去的DOMjudge嚇到，於是發現team的編號從3位數多加了2000（？並延後15分鐘開始。\n## 正式開始 (18:15)\n原齊看pA,我看pB,文元去了廁所（？\n後來調成我看pA\n我先有了```map```+計數+discretization的想法，然後原齊和文元覺得pB是水題，於是原齊就快速讓它AC掉（？\n後來我發現我在實做上```idx```的discretization卡住了，而且還用了```map<int,pair<int,int>>```分別紀錄```aij```,```cnt```,```prefix```，文元來用板書幫我把思緒整理過一遍，順便提醒我map的複雜度很爛$O(nlog(len))$。\n(今天的我狀況極差QAQ)\n然後好好的做出了我上面那三個想法，但一直爛掉，我把原齊和文元找來，確認都有好好做事，後來才發現在最後二分搜時要用```upper_bound-1```而非```lower_bound```，並AC了這題。\n後來文元在刻pD，原齊告訴我pC,pE的題序，我馬上說pE是數位DP，但我沒有學過(very sad)，然後pC沒想法。\n此時原齊想說要不要用數學的方式解pE，但始終想不出規律，於是一起幫文元想pD。\npD: 一棟樓1001層，有三顆只有超過其承受高度才會破掉且一樣的蛋，並從第```n```層往下丟，尋找蛋的確切硬度。尋找次數$\\leq30$。\n他們當時的想法是LCA倍增，但LCA是倒著做的，所以卡住。\n我當時還不知道這是互動題，我就跟原齊說兩頭都倍增，壓縮```L```,```R```的範圍，如果已知會破就不做，不會破就可以將左邊界快速向右移。但當時文元一聽到就很生氣的說絕對行不通，我想嘗試說明給他聽，卻被文元直接插斷說：「不是你算法的問題，是你腦袋的問題！」我心態瞬間崩掉，直接去廁所消氣，回來繼續想其他方法。(說白的就是我欠嘴，不然我不會變強OwO)\n(常打FPS都知道互嘴是正常的(畢竟台灣人不嘴不會變強OwO)，但心態崩時會繼續爭吵不休，甚至會賭氣，進而影響整支隊伍)\n回來想一段時間後，我說：不然先二分搜直到第一顆蛋破掉，我們至少可以在第一顆蛋砍掉一半長，接下來留兩顆做你們的倍增。\n後來又把第三顆蛋的狀態改掉，最後三人一起調整後統整如下：\n第一顆：二分搜直到破掉\n第二顆：倍增到$\\frac{L+R}{2}$就回到從+1重新倍增\n第三顆：+1直到結束\n但直到Contest Over依舊WA\n直到看了題解才知道有$(log10^3)\\times10$的分10份想法。\n## 結束 (21:15)\n### pA (AC)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nmap<long long,int> mp;\nlong long str[100005],ct[100005];\nint main(){\n    int n,m,q;\n    long long a;\n    cin >> n >> m >> q;\n    for(int i=0;i<n*m;i++){\n        cin >> a;\n        mp[a]++;\n    }\n    int fl=0,qu;\n    for(map<long long ,int>::iterator it=mp.begin();it!=mp.end();it++){\n        ct[fl] = it->first;\n        str[fl]+=it->second;\n        if(fl>0) str[fl]+=str[fl-1];\n        fl++;\n    }\n    for(int i=0;i<q;i++){\n        cin >> qu;\n        long long *pos=upper_bound(ct, ct+fl, qu);\n        cout << str[pos-ct-1] <<\"\\n\";\n    }\n    return 0;\n}\n```\n### pB (AC)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n    int n, m;\n    cin >> n >> m;\n    int g[n], t[n];\n    memset(g, 0, sizeof(g));\n    for(int i = 0; i < m; ++i) {\n        int a, b;\n        cin >> a >> b;\n        ++g[a - 1];\n        ++g[b - 1];\n    }\n    for(int i = 0; i < n; ++i) cin >> t[i];\n    sort(g, g + n); \n    sort(t, t + n);\n    long long int ans = 0;\n    for(int i = 0; i < n; ++i) ans += g[i] * t[n - i - 1];\n    cout << ans;\n    return 0;\n}\n```\n### pD (WA)\n```cpp=\n#include <bits/stdc++.h>\n#ifdef TEST\n\t#define debug(...) printf(__VA_ARGS__)\n#else\n\t#define debug(...) (void)0\n#endif\n#define EB emplace_back\n#define MP make_pair\n#define X first\n#define Y second\nusing namespace std;\nusing ll = long long;\nusing llu = long long unsigned;\nusing pii = pair<int,int>;\n/************************/\nint main() {\n\tconst int R = 1001;\n    int l = 0, r = R, mul = 1, m = l+((r-l)/2); // [l, r)\n    int cnt = 0;\n    // tumor egg throw\n    while(++cnt){\n    \tif(30-cnt > r-l+1){\n    \t\tgoto TUMOR;\n    \t}\n    \tif(m == R-1){\n    \t\tcout << \"! \" << m << endl;\n    \t\treturn 0;\n    \t}\n    \t// SAFE\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << m << endl;\n    \tstring s;\n        cin >> s;\n        if(s == \"SAFE\"){\n        \tl = m;\n        \tm = l+((r-l)/2);\t\n        }\n        else{\n        \tbreak;\n        }\n    }\n    // normal\n    while(++cnt) { \n    \tif(30-cnt >= r-l+1){\n    \t\tgoto TUMOR;\n    \t}\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << l+mul << endl;\n        string s;\n        cin >> s;\n        if(s == \"SAFE\") {\n        \tif(l+mul > m){\t\n        \t\tl = l+mul;\n        \t\tmul = 1;\n        \t\tm = (l+r)/2;\n        \t}\n        \telse{\n\t\t\t\tmul = mul << 1;\n        \t}\n      \t}\n        else{\n        \tr = l+mul;\n        \tl = l + (mul>>1);\n        \tm = (l+r)/2;\n        \tmul = 1;\n        \tbreak;\n        }\n    }\n    TUMOR:\n    while(++cnt){\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << l+1 << endl;\n    \tstring s;\n        cin >> s;\n        if(s == \"SAFE\"){\n        \t++l;\n        }\n        else{\n        \tcout << \"! \" << l << endl;\n        \tbreak;\n        }\n    }\n    return 0;\n}\n```\n## 結論\n* 名次: 43/94\n* AC: 2/5\n* WA: 1\n* Penalty:111\n* 文元使用goto，然後整個人變得很母湯www\n* Sad~檢討文就不發了，反正都知道我自己的問題出在那OwO\n\n![](https://i.imgur.com/aAoKV8x.png)","source":"_posts/[2020 CPTC 心得].md","raw":"---\ntitle: 2020 CPTC 心得\ndate: 2020-12-17 03:26:00\nhighlight:\n  enable: true\n  line_number: true\n  auto_detect: true\n  tab_replace: ''\n  wrap: true\n  hljs: true\nprismjs:\n  enable: true\n  preprocess: true\n  line_number: true\n  tab_replace: ''\ncategories: \n- 心得\ntags: \n- 2020\n- CPTC\n---  \n# CPTC 心得\n題目在[這裡](https://drive.google.com/drive/folders/1ajpjsjsR_dzitV-5PMmbXPFg3XNhVGm_?usp=sharing),就跳過題序了QAQ\n## 考前\n三個完全還沒進入狀況的人：我,吳文元,余原齊被一開始登不進去的DOMjudge嚇到，於是發現team的編號從3位數多加了2000（？並延後15分鐘開始。\n## 正式開始 (18:15)\n原齊看pA,我看pB,文元去了廁所（？\n後來調成我看pA\n我先有了```map```+計數+discretization的想法，然後原齊和文元覺得pB是水題，於是原齊就快速讓它AC掉（？\n後來我發現我在實做上```idx```的discretization卡住了，而且還用了```map<int,pair<int,int>>```分別紀錄```aij```,```cnt```,```prefix```，文元來用板書幫我把思緒整理過一遍，順便提醒我map的複雜度很爛$O(nlog(len))$。\n(今天的我狀況極差QAQ)\n然後好好的做出了我上面那三個想法，但一直爛掉，我把原齊和文元找來，確認都有好好做事，後來才發現在最後二分搜時要用```upper_bound-1```而非```lower_bound```，並AC了這題。\n後來文元在刻pD，原齊告訴我pC,pE的題序，我馬上說pE是數位DP，但我沒有學過(very sad)，然後pC沒想法。\n此時原齊想說要不要用數學的方式解pE，但始終想不出規律，於是一起幫文元想pD。\npD: 一棟樓1001層，有三顆只有超過其承受高度才會破掉且一樣的蛋，並從第```n```層往下丟，尋找蛋的確切硬度。尋找次數$\\leq30$。\n他們當時的想法是LCA倍增，但LCA是倒著做的，所以卡住。\n我當時還不知道這是互動題，我就跟原齊說兩頭都倍增，壓縮```L```,```R```的範圍，如果已知會破就不做，不會破就可以將左邊界快速向右移。但當時文元一聽到就很生氣的說絕對行不通，我想嘗試說明給他聽，卻被文元直接插斷說：「不是你算法的問題，是你腦袋的問題！」我心態瞬間崩掉，直接去廁所消氣，回來繼續想其他方法。(說白的就是我欠嘴，不然我不會變強OwO)\n(常打FPS都知道互嘴是正常的(畢竟台灣人不嘴不會變強OwO)，但心態崩時會繼續爭吵不休，甚至會賭氣，進而影響整支隊伍)\n回來想一段時間後，我說：不然先二分搜直到第一顆蛋破掉，我們至少可以在第一顆蛋砍掉一半長，接下來留兩顆做你們的倍增。\n後來又把第三顆蛋的狀態改掉，最後三人一起調整後統整如下：\n第一顆：二分搜直到破掉\n第二顆：倍增到$\\frac{L+R}{2}$就回到從+1重新倍增\n第三顆：+1直到結束\n但直到Contest Over依舊WA\n直到看了題解才知道有$(log10^3)\\times10$的分10份想法。\n## 結束 (21:15)\n### pA (AC)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nmap<long long,int> mp;\nlong long str[100005],ct[100005];\nint main(){\n    int n,m,q;\n    long long a;\n    cin >> n >> m >> q;\n    for(int i=0;i<n*m;i++){\n        cin >> a;\n        mp[a]++;\n    }\n    int fl=0,qu;\n    for(map<long long ,int>::iterator it=mp.begin();it!=mp.end();it++){\n        ct[fl] = it->first;\n        str[fl]+=it->second;\n        if(fl>0) str[fl]+=str[fl-1];\n        fl++;\n    }\n    for(int i=0;i<q;i++){\n        cin >> qu;\n        long long *pos=upper_bound(ct, ct+fl, qu);\n        cout << str[pos-ct-1] <<\"\\n\";\n    }\n    return 0;\n}\n```\n### pB (AC)\n```cpp=\n#include <bits/stdc++.h>\nusing namespace std;\nint main() {\n    int n, m;\n    cin >> n >> m;\n    int g[n], t[n];\n    memset(g, 0, sizeof(g));\n    for(int i = 0; i < m; ++i) {\n        int a, b;\n        cin >> a >> b;\n        ++g[a - 1];\n        ++g[b - 1];\n    }\n    for(int i = 0; i < n; ++i) cin >> t[i];\n    sort(g, g + n); \n    sort(t, t + n);\n    long long int ans = 0;\n    for(int i = 0; i < n; ++i) ans += g[i] * t[n - i - 1];\n    cout << ans;\n    return 0;\n}\n```\n### pD (WA)\n```cpp=\n#include <bits/stdc++.h>\n#ifdef TEST\n\t#define debug(...) printf(__VA_ARGS__)\n#else\n\t#define debug(...) (void)0\n#endif\n#define EB emplace_back\n#define MP make_pair\n#define X first\n#define Y second\nusing namespace std;\nusing ll = long long;\nusing llu = long long unsigned;\nusing pii = pair<int,int>;\n/************************/\nint main() {\n\tconst int R = 1001;\n    int l = 0, r = R, mul = 1, m = l+((r-l)/2); // [l, r)\n    int cnt = 0;\n    // tumor egg throw\n    while(++cnt){\n    \tif(30-cnt > r-l+1){\n    \t\tgoto TUMOR;\n    \t}\n    \tif(m == R-1){\n    \t\tcout << \"! \" << m << endl;\n    \t\treturn 0;\n    \t}\n    \t// SAFE\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << m << endl;\n    \tstring s;\n        cin >> s;\n        if(s == \"SAFE\"){\n        \tl = m;\n        \tm = l+((r-l)/2);\t\n        }\n        else{\n        \tbreak;\n        }\n    }\n    // normal\n    while(++cnt) { \n    \tif(30-cnt >= r-l+1){\n    \t\tgoto TUMOR;\n    \t}\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << l+mul << endl;\n        string s;\n        cin >> s;\n        if(s == \"SAFE\") {\n        \tif(l+mul > m){\t\n        \t\tl = l+mul;\n        \t\tmul = 1;\n        \t\tm = (l+r)/2;\n        \t}\n        \telse{\n\t\t\t\tmul = mul << 1;\n        \t}\n      \t}\n        else{\n        \tr = l+mul;\n        \tl = l + (mul>>1);\n        \tm = (l+r)/2;\n        \tmul = 1;\n        \tbreak;\n        }\n    }\n    TUMOR:\n    while(++cnt){\n    \tdebug(\"%d\\n\", cnt);\n    \tcout << \"? \" << l+1 << endl;\n    \tstring s;\n        cin >> s;\n        if(s == \"SAFE\"){\n        \t++l;\n        }\n        else{\n        \tcout << \"! \" << l << endl;\n        \tbreak;\n        }\n    }\n    return 0;\n}\n```\n## 結論\n* 名次: 43/94\n* AC: 2/5\n* WA: 1\n* Penalty:111\n* 文元使用goto，然後整個人變得很母湯www\n* Sad~檢討文就不發了，反正都知道我自己的問題出在那OwO\n\n![](https://i.imgur.com/aAoKV8x.png)","slug":"[2020 CPTC 心得]","published":1,"updated":"2020-12-16T20:14:17.423Z","_id":"ckirtie1p000083g6e9as7qnx","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"CPTC-心得\"><a href=\"#CPTC-心得\" class=\"headerlink\" title=\"CPTC 心得\"></a>CPTC 心得</h1><p>題目在<a href=\"https://drive.google.com/drive/folders/1ajpjsjsR_dzitV-5PMmbXPFg3XNhVGm_?usp=sharing\">這裡</a>,就跳過題序了QAQ</p>\n<h2 id=\"考前\"><a href=\"#考前\" class=\"headerlink\" title=\"考前\"></a>考前</h2><p>三個完全還沒進入狀況的人：我,吳文元,余原齊被一開始登不進去的DOMjudge嚇到，於是發現team的編號從3位數多加了2000（？並延後15分鐘開始。</p>\n<h2 id=\"正式開始-18-15\"><a href=\"#正式開始-18-15\" class=\"headerlink\" title=\"正式開始 (18:15)\"></a>正式開始 (18:15)</h2><p>原齊看pA,我看pB,文元去了廁所（？<br>後來調成我看pA<br>我先有了<code>map</code>+計數+discretization的想法，然後原齊和文元覺得pB是水題，於是原齊就快速讓它AC掉（？<br>後來我發現我在實做上<code>idx</code>的discretization卡住了，而且還用了<code>map&lt;int,pair&lt;int,int&gt;&gt;</code>分別紀錄<code>aij</code>,<code>cnt</code>,<code>prefix</code>，文元來用板書幫我把思緒整理過一遍，順便提醒我map的複雜度很爛$O(nlog(len))$。<br>(今天的我狀況極差QAQ)<br>然後好好的做出了我上面那三個想法，但一直爛掉，我把原齊和文元找來，確認都有好好做事，後來才發現在最後二分搜時要用<code>upper_bound-1</code>而非<code>lower_bound</code>，並AC了這題。<br>後來文元在刻pD，原齊告訴我pC,pE的題序，我馬上說pE是數位DP，但我沒有學過(very sad)，然後pC沒想法。<br>此時原齊想說要不要用數學的方式解pE，但始終想不出規律，於是一起幫文元想pD。<br>pD: 一棟樓1001層，有三顆只有超過其承受高度才會破掉且一樣的蛋，並從第<code>n</code>層往下丟，尋找蛋的確切硬度。尋找次數$\\leq30$。<br>他們當時的想法是LCA倍增，但LCA是倒著做的，所以卡住。<br>我當時還不知道這是互動題，我就跟原齊說兩頭都倍增，壓縮<code>L</code>,<code>R</code>的範圍，如果已知會破就不做，不會破就可以將左邊界快速向右移。但當時文元一聽到就很生氣的說絕對行不通，我想嘗試說明給他聽，卻被文元直接插斷說：「不是你算法的問題，是你腦袋的問題！」我心態瞬間崩掉，直接去廁所消氣，回來繼續想其他方法。(說白的就是我欠嘴，不然我不會變強OwO)<br>(常打FPS都知道互嘴是正常的(畢竟台灣人不嘴不會變強OwO)，但心態崩時會繼續爭吵不休，甚至會賭氣，進而影響整支隊伍)<br>回來想一段時間後，我說：不然先二分搜直到第一顆蛋破掉，我們至少可以在第一顆蛋砍掉一半長，接下來留兩顆做你們的倍增。<br>後來又把第三顆蛋的狀態改掉，最後三人一起調整後統整如下：<br>第一顆：二分搜直到破掉<br>第二顆：倍增到$\\frac{L+R}{2}$就回到從+1重新倍增<br>第三顆：+1直到結束<br>但直到Contest Over依舊WA<br>直到看了題解才知道有$(log10^3)\\times10$的分10份想法。</p>\n<h2 id=\"結束-21-15\"><a href=\"#結束-21-15\" class=\"headerlink\" title=\"結束 (21:15)\"></a>結束 (21:15)</h2><h3 id=\"pA-AC\"><a href=\"#pA-AC\" class=\"headerlink\" title=\"pA (AC)\"></a>pA (AC)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ct<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> fl<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>qu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token operator\">=</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ct<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> it<span class=\"token operator\">-></span>first<span class=\"token punctuation\">;</span>\n        str<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fl<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> str<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>str<span class=\"token punctuation\">[</span>fl<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        fl<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> qu<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>pos<span class=\"token operator\">=</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">,</span> ct<span class=\"token operator\">+</span>fl<span class=\"token punctuation\">,</span> qu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">-</span>ct<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pB-AC\"><a href=\"#pB-AC\" class=\"headerlink\" title=\"pB (AC)\"></a>pB (AC)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>g<span class=\"token punctuation\">[</span>a <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>g<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> g <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> t <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ans <span class=\"token operator\">+=</span> g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> t<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pD-WA\"><a href=\"#pD-WA\" class=\"headerlink\" title=\"pD (WA)\"></a>pD (WA)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">TEST</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>__VA_ARGS__<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">EB emplace_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MP make_pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">X first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">Y second</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> llu <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> pii <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> R <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> R<span class=\"token punctuation\">,</span> mul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [l, r)</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// tumor egg throw</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">-</span>cnt <span class=\"token operator\">></span> r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\t<span class=\"token keyword\">goto</span> TUMOR<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> R<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"! \"</span> <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token comment\">// SAFE</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \tstring s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \tl <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        \tm <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// normal</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">-</span>cnt <span class=\"token operator\">>=</span> r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\t<span class=\"token keyword\">goto</span> TUMOR<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token operator\">+</span>mul <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>mul <span class=\"token operator\">></span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n        \t\tl <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>mul<span class=\"token punctuation\">;</span>\n        \t\tmul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t\tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token punctuation\">&#125;</span>\n        \t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmul <span class=\"token operator\">=</span> mul <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token punctuation\">&#125;</span>\n      \t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tr <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>mul<span class=\"token punctuation\">;</span>\n        \tl <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>mul<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        \tmul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    TUMOR<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \tstring s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token operator\">++</span>l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"! \"</span> <span class=\"token operator\">&lt;&lt;</span> l <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><ul>\n<li>名次: 43/94</li>\n<li>AC: 2/5</li>\n<li>WA: 1</li>\n<li>Penalty:111</li>\n<li>文元使用goto，然後整個人變得很母湯www</li>\n<li>Sad~檢討文就不發了，反正都知道我自己的問題出在那OwO</li>\n</ul>\n<p><img src=\"https://i.imgur.com/aAoKV8x.png\" loading=\"lazy\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"CPTC-心得\"><a href=\"#CPTC-心得\" class=\"headerlink\" title=\"CPTC 心得\"></a>CPTC 心得</h1><p>題目在<a href=\"https://drive.google.com/drive/folders/1ajpjsjsR_dzitV-5PMmbXPFg3XNhVGm_?usp=sharing\">這裡</a>,就跳過題序了QAQ</p>\n<h2 id=\"考前\"><a href=\"#考前\" class=\"headerlink\" title=\"考前\"></a>考前</h2><p>三個完全還沒進入狀況的人：我,吳文元,余原齊被一開始登不進去的DOMjudge嚇到，於是發現team的編號從3位數多加了2000（？並延後15分鐘開始。</p>\n<h2 id=\"正式開始-18-15\"><a href=\"#正式開始-18-15\" class=\"headerlink\" title=\"正式開始 (18:15)\"></a>正式開始 (18:15)</h2><p>原齊看pA,我看pB,文元去了廁所（？<br>後來調成我看pA<br>我先有了<code>map</code>+計數+discretization的想法，然後原齊和文元覺得pB是水題，於是原齊就快速讓它AC掉（？<br>後來我發現我在實做上<code>idx</code>的discretization卡住了，而且還用了<code>map&lt;int,pair&lt;int,int&gt;&gt;</code>分別紀錄<code>aij</code>,<code>cnt</code>,<code>prefix</code>，文元來用板書幫我把思緒整理過一遍，順便提醒我map的複雜度很爛$O(nlog(len))$。<br>(今天的我狀況極差QAQ)<br>然後好好的做出了我上面那三個想法，但一直爛掉，我把原齊和文元找來，確認都有好好做事，後來才發現在最後二分搜時要用<code>upper_bound-1</code>而非<code>lower_bound</code>，並AC了這題。<br>後來文元在刻pD，原齊告訴我pC,pE的題序，我馬上說pE是數位DP，但我沒有學過(very sad)，然後pC沒想法。<br>此時原齊想說要不要用數學的方式解pE，但始終想不出規律，於是一起幫文元想pD。<br>pD: 一棟樓1001層，有三顆只有超過其承受高度才會破掉且一樣的蛋，並從第<code>n</code>層往下丟，尋找蛋的確切硬度。尋找次數$\\leq30$。<br>他們當時的想法是LCA倍增，但LCA是倒著做的，所以卡住。<br>我當時還不知道這是互動題，我就跟原齊說兩頭都倍增，壓縮<code>L</code>,<code>R</code>的範圍，如果已知會破就不做，不會破就可以將左邊界快速向右移。但當時文元一聽到就很生氣的說絕對行不通，我想嘗試說明給他聽，卻被文元直接插斷說：「不是你算法的問題，是你腦袋的問題！」我心態瞬間崩掉，直接去廁所消氣，回來繼續想其他方法。(說白的就是我欠嘴，不然我不會變強OwO)<br>(常打FPS都知道互嘴是正常的(畢竟台灣人不嘴不會變強OwO)，但心態崩時會繼續爭吵不休，甚至會賭氣，進而影響整支隊伍)<br>回來想一段時間後，我說：不然先二分搜直到第一顆蛋破掉，我們至少可以在第一顆蛋砍掉一半長，接下來留兩顆做你們的倍增。<br>後來又把第三顆蛋的狀態改掉，最後三人一起調整後統整如下：<br>第一顆：二分搜直到破掉<br>第二顆：倍增到$\\frac{L+R}{2}$就回到從+1重新倍增<br>第三顆：+1直到結束<br>但直到Contest Over依舊WA<br>直到看了題解才知道有$(log10^3)\\times10$的分10份想法。</p>\n<h2 id=\"結束-21-15\"><a href=\"#結束-21-15\" class=\"headerlink\" title=\"結束 (21:15)\"></a>結束 (21:15)</h2><h3 id=\"pA-AC\"><a href=\"#pA-AC\" class=\"headerlink\" title=\"pA (AC)\"></a>pA (AC)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\nmap<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> mp<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ct<span class=\"token punctuation\">[</span><span class=\"token number\">100005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> a<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m <span class=\"token operator\">>></span> q<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> a<span class=\"token punctuation\">;</span>\n        mp<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> fl<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>qu<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it<span class=\"token operator\">=</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">!=</span>mp<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>it<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        ct<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> it<span class=\"token operator\">-></span>first<span class=\"token punctuation\">;</span>\n        str<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>it<span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fl<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> str<span class=\"token punctuation\">[</span>fl<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>str<span class=\"token punctuation\">[</span>fl<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        fl<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cin <span class=\"token operator\">>></span> qu<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>pos<span class=\"token operator\">=</span><span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>ct<span class=\"token punctuation\">,</span> ct<span class=\"token operator\">+</span>fl<span class=\"token punctuation\">,</span> qu<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> str<span class=\"token punctuation\">[</span>pos<span class=\"token operator\">-</span>ct<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pB-AC\"><a href=\"#pB-AC\" class=\"headerlink\" title=\"pB (AC)\"></a>pB (AC)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">;</span>\n    cin <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> g<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> a <span class=\"token operator\">>></span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>g<span class=\"token punctuation\">[</span>a <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>g<span class=\"token punctuation\">[</span>b <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> cin <span class=\"token operator\">>></span> t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> g <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> t <span class=\"token operator\">+</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> ans <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> ans <span class=\"token operator\">+=</span> g<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> t<span class=\"token punctuation\">[</span>n <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> ans<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"pD-WA\"><a href=\"#pD-WA\" class=\"headerlink\" title=\"pD (WA)\"></a>pD (WA)</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">TEST</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>__VA_ARGS__<span class=\"token punctuation\">)</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\"><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">EB emplace_back</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">MP make_pair</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">X first</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token expression\">Y second</span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> ll <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> llu <span class=\"token operator\">=</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">unsigned</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> pii <span class=\"token operator\">=</span> pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/************************/</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> R <span class=\"token operator\">=</span> <span class=\"token number\">1001</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> R<span class=\"token punctuation\">,</span> mul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [l, r)</span>\n    <span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// tumor egg throw</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">-</span>cnt <span class=\"token operator\">></span> r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\t<span class=\"token keyword\">goto</span> TUMOR<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>m <span class=\"token operator\">==</span> R<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"! \"</span> <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token comment\">// SAFE</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> m <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \tstring s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \tl <span class=\"token operator\">=</span> m<span class=\"token punctuation\">;</span>\n        \tm <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// normal</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> \n    \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token operator\">-</span>cnt <span class=\"token operator\">>=</span> r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t\t<span class=\"token keyword\">goto</span> TUMOR<span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">&#125;</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token operator\">+</span>mul <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        string s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>mul <span class=\"token operator\">></span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\t\n        \t\tl <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>mul<span class=\"token punctuation\">;</span>\n        \t\tmul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t\tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token punctuation\">&#125;</span>\n        \t<span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n\t\t\t\tmul <span class=\"token operator\">=</span> mul <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token punctuation\">&#125;</span>\n      \t<span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tr <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>mul<span class=\"token punctuation\">;</span>\n        \tl <span class=\"token operator\">=</span> l <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>mul<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \tm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>l<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        \tmul <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    TUMOR<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\\n\"</span><span class=\"token punctuation\">,</span> cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"? \"</span> <span class=\"token operator\">&lt;&lt;</span> l<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    \tstring s<span class=\"token punctuation\">;</span>\n        cin <span class=\"token operator\">>></span> s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token string\">\"SAFE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \t<span class=\"token operator\">++</span>l<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        \tcout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"! \"</span> <span class=\"token operator\">&lt;&lt;</span> l <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        \t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"結論\"><a href=\"#結論\" class=\"headerlink\" title=\"結論\"></a>結論</h2><ul>\n<li>名次: 43/94</li>\n<li>AC: 2/5</li>\n<li>WA: 1</li>\n<li>Penalty:111</li>\n<li>文元使用goto，然後整個人變得很母湯www</li>\n<li>Sad~檢討文就不發了，反正都知道我自己的問題出在那OwO</li>\n</ul>\n<p><img src=\"https://i.imgur.com/aAoKV8x.png\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckiiye9d10001cdg663bb7f1j","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9dd000jcdg62kz478rl"},{"post_id":"ckiiye9db000fcdg6e3ok7w44","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9df000ocdg6de945nm1"},{"post_id":"ckiiye9d30003cdg6he0j3a9m","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9dh000tcdg60sysewwp"},{"post_id":"ckiiye9d60007cdg696p8c1vh","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9dj000vcdg64s8agbtu"},{"post_id":"ckiiye9dg000scdg6folqee5l","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9dl0011cdg66djf79jo"},{"post_id":"ckiiye9d80009cdg6a20ihqkq","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9dm0015cdg6c9zn3h4m"},{"post_id":"ckiiye9dh000ucdg609baa0gg","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9dn0018cdg68j4o4bjj"},{"post_id":"ckiiye9dj000ycdg61fun2dzq","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9dn001acdg673oef6wj"},{"post_id":"ckiiye9d9000bcdg60rom5yd3","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9do001dcdg64elcdmrw"},{"post_id":"ckiiye9dk0010cdg6hry37z20","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9do001gcdg63q4r7jpt"},{"post_id":"ckiiye9dl0014cdg6dhtma41k","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9do001icdg66vwpbhgv"},{"post_id":"ckiiye9dc000hcdg6arf24kfg","category_id":"ckiiye9dl0012cdg6c59h78lg","_id":"ckiiye9dp001jcdg69iodbsu9"},{"post_id":"ckiiye9dm0017cdg6f7uch9v3","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckiiye9dp001lcdg6ap1mb144"},{"post_id":"ckiiye9de000lcdg6bexccil0","category_id":"ckiiye9df000pcdg69fup7m9p","_id":"ckiiye9dp001ncdg65arb2nte"},{"post_id":"ckiiye9df000ncdg6htos1y00","category_id":"ckiiye9do001ecdg679wfcmpo","_id":"ckiiye9dq001qcdg69dxugh8z"},{"post_id":"ckirtie1p000083g6e9as7qnx","category_id":"ckiiye9d50004cdg626qo43b5","_id":"ckirtie20000283g6641s1eqi"}],"PostTag":[{"post_id":"ckiiye9d10001cdg663bb7f1j","tag_id":"ckiiye9d60005cdg639uebxj0","_id":"ckiiye9de000mcdg6bc0r2frb"},{"post_id":"ckiiye9d10001cdg663bb7f1j","tag_id":"ckiiye9d9000dcdg64ivb529i","_id":"ckiiye9dg000qcdg6chy50giv"},{"post_id":"ckiiye9d30003cdg6he0j3a9m","tag_id":"ckiiye9dd000kcdg627o05eet","_id":"ckiiye9dk000zcdg6ggb8bp3r"},{"post_id":"ckiiye9d30003cdg6he0j3a9m","tag_id":"ckiiye9dg000rcdg6hnm77ezd","_id":"ckiiye9dl0013cdg64vlf5cqf"},{"post_id":"ckiiye9d60007cdg696p8c1vh","tag_id":"ckiiye9dj000xcdg6aq8y51jc","_id":"ckiiye9do001ccdg6ef1tam3p"},{"post_id":"ckiiye9d60007cdg696p8c1vh","tag_id":"ckiiye9dg000rcdg6hnm77ezd","_id":"ckiiye9do001fcdg61xqkg49l"},{"post_id":"ckiiye9d80009cdg6a20ihqkq","tag_id":"ckiiye9dn001bcdg699zhda82","_id":"ckiiye9dp001mcdg6bhfl5bb6"},{"post_id":"ckiiye9d80009cdg6a20ihqkq","tag_id":"ckiiye9do001hcdg6en8v9q6g","_id":"ckiiye9dp001ocdg6ersybd30"},{"post_id":"ckiiye9d9000bcdg60rom5yd3","tag_id":"ckiiye9dn001bcdg699zhda82","_id":"ckiiye9dq001scdg6e8jv35vu"},{"post_id":"ckiiye9d9000bcdg60rom5yd3","tag_id":"ckiiye9dp001pcdg6fotg7ngb","_id":"ckiiye9dq001tcdg6718qhxun"},{"post_id":"ckiiye9db000fcdg6e3ok7w44","tag_id":"ckiiye9dq001rcdg6etiacwy7","_id":"ckiiye9dr001wcdg65pxu1s32"},{"post_id":"ckiiye9db000fcdg6e3ok7w44","tag_id":"ckiiye9dg000rcdg6hnm77ezd","_id":"ckiiye9dr001xcdg66nb0dy33"},{"post_id":"ckiiye9dc000hcdg6arf24kfg","tag_id":"ckiiye9dq001vcdg6dkgl2htf","_id":"ckiiye9ds0022cdg65vt7bngk"},{"post_id":"ckiiye9dc000hcdg6arf24kfg","tag_id":"ckiiye9dr001ycdg61jdl79r0","_id":"ckiiye9ds0023cdg614vnau8e"},{"post_id":"ckiiye9dc000hcdg6arf24kfg","tag_id":"ckiiye9dr001zcdg68x83bh1j","_id":"ckiiye9ds0025cdg6bb2242pd"},{"post_id":"ckiiye9dc000hcdg6arf24kfg","tag_id":"ckiiye9dr0020cdg626n53lt0","_id":"ckiiye9ds0026cdg68q204lz2"},{"post_id":"ckiiye9de000lcdg6bexccil0","tag_id":"ckiiye9dr0021cdg6663087z3","_id":"ckiiye9dt0029cdg68fui3wy8"},{"post_id":"ckiiye9de000lcdg6bexccil0","tag_id":"ckiiye9ds0024cdg63jbm840p","_id":"ckiiye9dt002acdg6hk2lejf3"},{"post_id":"ckiiye9de000lcdg6bexccil0","tag_id":"ckiiye9ds0027cdg68opx99sf","_id":"ckiiye9dt002ccdg60nvi6pc3"},{"post_id":"ckiiye9df000ncdg6htos1y00","tag_id":"ckiiye9ds0028cdg66a9u5png","_id":"ckiiye9dt002ecdg6gb9e6nlm"},{"post_id":"ckiiye9df000ncdg6htos1y00","tag_id":"ckiiye9dt002bcdg65p4z1bfz","_id":"ckiiye9dt002fcdg6cy4274tj"},{"post_id":"ckiiye9dg000scdg6folqee5l","tag_id":"ckiiye9dt002dcdg6glw1hbs6","_id":"ckiiye9du002jcdg63vpr6n06"},{"post_id":"ckiiye9dg000scdg6folqee5l","tag_id":"ckiiye9dt002gcdg6dpbs8vkx","_id":"ckiiye9du002kcdg6h1s0h85h"},{"post_id":"ckiiye9dg000scdg6folqee5l","tag_id":"ckiiye9dp001pcdg6fotg7ngb","_id":"ckiiye9du002mcdg67ked0a0k"},{"post_id":"ckiiye9dh000ucdg609baa0gg","tag_id":"ckiiye9dt002dcdg6glw1hbs6","_id":"ckiiye9dv002pcdg6apoc4w2v"},{"post_id":"ckiiye9dh000ucdg609baa0gg","tag_id":"ckiiye9du002lcdg6fwzcfvhv","_id":"ckiiye9dv002qcdg64j9cc1ex"},{"post_id":"ckiiye9dh000ucdg609baa0gg","tag_id":"ckiiye9dv002ncdg659xc7vfw","_id":"ckiiye9dv002scdg64b58do0l"},{"post_id":"ckiiye9dj000ycdg61fun2dzq","tag_id":"ckiiye9dn001bcdg699zhda82","_id":"ckiiye9dw002vcdg66b2oa668"},{"post_id":"ckiiye9dj000ycdg61fun2dzq","tag_id":"ckiiye9dv002rcdg64cbn3mwa","_id":"ckiiye9dw002wcdg6gl5ldnan"},{"post_id":"ckiiye9dj000ycdg61fun2dzq","tag_id":"ckiiye9dv002tcdg61tzl6734","_id":"ckiiye9dw002ycdg6b7h18i15"},{"post_id":"ckiiye9dk0010cdg6hry37z20","tag_id":"ckiiye9dw002ucdg6e4o814fl","_id":"ckiiye9dx0030cdg61bie7deh"},{"post_id":"ckiiye9dk0010cdg6hry37z20","tag_id":"ckiiye9dg000rcdg6hnm77ezd","_id":"ckiiye9dx0031cdg6gnc19wbp"},{"post_id":"ckiiye9dk0010cdg6hry37z20","tag_id":"ckiiye9dw002xcdg6baxh66yi","_id":"ckiiye9dx0033cdg6dr7he50x"},{"post_id":"ckiiye9dl0014cdg6dhtma41k","tag_id":"ckiiye9dw002zcdg6hvynecv9","_id":"ckiiye9dx0035cdg66wf2find"},{"post_id":"ckiiye9dl0014cdg6dhtma41k","tag_id":"ckiiye9dx0032cdg63295eb7c","_id":"ckiiye9dx0036cdg6ctfqa106"},{"post_id":"ckiiye9dm0017cdg6f7uch9v3","tag_id":"ckiiye9dx0034cdg60mum62sp","_id":"ckiiye9dy0038cdg69b5o6o30"},{"post_id":"ckiiye9dm0017cdg6f7uch9v3","tag_id":"ckiiye9dx0037cdg65k6td08c","_id":"ckiiye9dy0039cdg62x529d8n"},{"post_id":"ckirtie1p000083g6e9as7qnx","tag_id":"ckiiye9dg000rcdg6hnm77ezd","_id":"ckirtie21000383g6gs4t69j0"},{"post_id":"ckirtie1p000083g6e9as7qnx","tag_id":"ckirtie1x000183g601l07bhl","_id":"ckirtie21000483g684gl31ju"}],"Tag":[{"name":"新北市TOI","_id":"ckiiye9d60005cdg639uebxj0"},{"name":"2019","_id":"ckiiye9d9000dcdg64ivb529i"},{"name":"NCPC","_id":"ckiiye9dd000kcdg627o05eet"},{"name":"2020","_id":"ckiiye9dg000rcdg6hnm77ezd"},{"name":"TOPC","_id":"ckiiye9dj000xcdg6aq8y51jc"},{"name":"TIOJ","_id":"ckiiye9dn001bcdg699zhda82"},{"name":"樹直徑","_id":"ckiiye9do001hcdg6en8v9q6g"},{"name":"並查集","_id":"ckiiye9dp001pcdg6fotg7ngb"},{"name":"模擬賽","_id":"ckiiye9dq001rcdg6etiacwy7"},{"name":"Failure Function","_id":"ckiiye9dq001vcdg6dkgl2htf"},{"name":"KMP","_id":"ckiiye9dr001ycdg61jdl79r0"},{"name":"競程","_id":"ckiiye9dr001zcdg68x83bh1j"},{"name":"算法","_id":"ckiiye9dr0020cdg626n53lt0"},{"name":"NTHU","_id":"ckiiye9dr0021cdg6663087z3"},{"name":"矩陣快速冪","_id":"ckiiye9ds0024cdg63jbm840p"},{"name":"數論","_id":"ckiiye9ds0027cdg68opx99sf"},{"name":"SPOJ","_id":"ckiiye9ds0028cdg66a9u5png"},{"name":"線段樹","_id":"ckiiye9dt002bcdg65p4z1bfz"},{"name":"SOJ","_id":"ckiiye9dt002dcdg6glw1hbs6"},{"name":"MST","_id":"ckiiye9dt002gcdg6dpbs8vkx"},{"name":"djijkstra","_id":"ckiiye9du002lcdg6fwzcfvhv"},{"name":"最短路徑","_id":"ckiiye9dv002ncdg659xc7vfw"},{"name":"時間標記","_id":"ckiiye9dv002rcdg64cbn3mwa"},{"name":"前綴和","_id":"ckiiye9dv002tcdg61tzl6734"},{"name":"Blog","_id":"ckiiye9dw002ucdg6e4o814fl"},{"name":"Hexo","_id":"ckiiye9dw002xcdg6baxh66yi"},{"name":"面試","_id":"ckiiye9dw002zcdg6hvynecv9"},{"name":"高中","_id":"ckiiye9dx0032cdg63295eb7c"},{"name":"作業","_id":"ckiiye9dx0034cdg60mum62sp"},{"name":"有趣的東西","_id":"ckiiye9dx0037cdg65k6td08c"},{"name":"CPTC","_id":"ckirtie1x000183g601l07bhl"}]}}